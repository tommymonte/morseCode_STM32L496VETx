
codiceMorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800f374  0800f374  0001f374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f75c  0800f75c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f75c  0800f75c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f75c  0800f75c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f75c  0800f75c  0001f75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f760  0800f760  0001f760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f0  200001f0  0800f954  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ae0  0800f954  00026ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd22  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006139  00000000  00000000  0004cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  00053080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b8  00000000  00000000  000554d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a2a  00000000  00000000  00057688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a217  00000000  00000000  0008b0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b4d5  00000000  00000000  000b52c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e079e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dd4  00000000  00000000  001e07f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f35c 	.word	0x0800f35c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0800f35c 	.word	0x0800f35c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002aa:	2003      	movs	r0, #3
 80002ac:	f001 fac3 	bl	8001836 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002b0:	2000      	movs	r0, #0
 80002b2:	f00d fad1 	bl	800d858 <HAL_InitTick>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80002bc:	2301      	movs	r3, #1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	e001      	b.n	80002c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80002c2:	f00d f851 	bl	800d368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80002c6:	79fb      	ldrb	r3, [r7, #7]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_IncTick+0x20>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	461a      	mov	r2, r3
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <HAL_IncTick+0x24>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <HAL_IncTick+0x24>)
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000004 	.word	0x20000004
 80002f4:	2000020c 	.word	0x2000020c

080002f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return uwTick;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <HAL_GetTick+0x14>)
 80002fe:	681b      	ldr	r3, [r3, #0]
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2000020c 	.word	0x2000020c

08000310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000318:	f7ff ffee 	bl	80002f8 <HAL_GetTick>
 800031c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000328:	d005      	beq.n	8000336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_Delay+0x44>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	461a      	mov	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4413      	add	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000336:	bf00      	nop
 8000338:	f7ff ffde 	bl	80002f8 <HAL_GetTick>
 800033c:	4602      	mov	r2, r0
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	429a      	cmp	r2, r3
 8000346:	d8f7      	bhi.n	8000338 <HAL_Delay+0x28>
  {
  }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000004 	.word	0x20000004

08000358 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f023 0204 	bic.w	r2, r3, #4
 8000368:	4904      	ldr	r1, [pc, #16]	; (800037c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	600b      	str	r3, [r1, #0]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40010030 	.word	0x40010030

08000380 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f023 0202 	bic.w	r2, r3, #2
 8000390:	4904      	ldr	r1, [pc, #16]	; (80003a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	600b      	str	r3, [r1, #0]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40010030 	.word	0x40010030

080003a8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80003ba:	f7ff ff9d 	bl	80002f8 <HAL_GetTick>
 80003be:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80003c0:	e008      	b.n	80003d4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80003c2:	f7ff ff99 	bl	80002f8 <HAL_GetTick>
 80003c6:	4602      	mov	r2, r0
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	1ad3      	subs	r3, r2, r3
 80003cc:	2b0a      	cmp	r3, #10
 80003ce:	d901      	bls.n	80003d4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e006      	b.n	80003e2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f0      	beq.n	80003c2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40010030 	.word	0x40010030

080003f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	609a      	str	r2, [r3, #8]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	609a      	str	r2, [r3, #8]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
 8000464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3360      	adds	r3, #96	; 0x60
 800046a:	461a      	mov	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	4413      	add	r3, r2
 8000472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <LL_ADC_SetOffset+0x44>)
 800047a:	4013      	ands	r3, r2
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	430a      	orrs	r2, r1
 8000486:	4313      	orrs	r3, r2
 8000488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000490:	bf00      	nop
 8000492:	371c      	adds	r7, #28
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	03fff000 	.word	0x03fff000

080004a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3360      	adds	r3, #96	; 0x60
 80004ae:	461a      	mov	r2, r3
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3360      	adds	r3, #96	; 0x60
 80004dc:	461a      	mov	r2, r3
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	431a      	orrs	r2, r3
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80004f6:	bf00      	nop
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	431a      	orrs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	615a      	str	r2, [r3, #20]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3330      	adds	r3, #48	; 0x30
 8000538:	461a      	mov	r2, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	f003 030c 	and.w	r3, r3, #12
 8000544:	4413      	add	r3, r2
 8000546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	f003 031f 	and.w	r3, r3, #31
 8000552:	211f      	movs	r1, #31
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	401a      	ands	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	0e9b      	lsrs	r3, r3, #26
 8000560:	f003 011f 	and.w	r1, r3, #31
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	f003 031f 	and.w	r3, r3, #31
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000574:	bf00      	nop
 8000576:	371c      	adds	r7, #28
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3314      	adds	r3, #20
 8000590:	461a      	mov	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	0e5b      	lsrs	r3, r3, #25
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	4413      	add	r3, r2
 800059e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	0d1b      	lsrs	r3, r3, #20
 80005a8:	f003 031f 	and.w	r3, r3, #31
 80005ac:	2107      	movs	r1, #7
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	401a      	ands	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	0d1b      	lsrs	r3, r3, #20
 80005ba:	f003 031f 	and.w	r3, r3, #31
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	431a      	orrs	r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80005ca:	bf00      	nop
 80005cc:	371c      	adds	r7, #28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005f0:	43db      	mvns	r3, r3
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0318 	and.w	r3, r3, #24
 80005fa:	4908      	ldr	r1, [pc, #32]	; (800061c <LL_ADC_SetChannelSingleDiff+0x44>)
 80005fc:	40d9      	lsrs	r1, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	400b      	ands	r3, r1
 8000602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000606:	431a      	orrs	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	0007ffff 	.word	0x0007ffff

08000620 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	6093      	str	r3, [r2, #8]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000658:	d101      	bne.n	800065e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800067c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000680:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a8:	d101      	bne.n	80006ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d101      	bne.n	80006d4 <LL_ADC_IsEnabled+0x18>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <LL_ADC_IsEnabled+0x1a>
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d101      	bne.n	80006fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	2b08      	cmp	r3, #8
 800071a:	d101      	bne.n	8000720 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e139      	b.n	80009be <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	2b00      	cmp	r3, #0
 8000756:	d109      	bne.n	800076c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f00c fe35 	bl	800d3c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff67 	bl	8000644 <LL_ADC_IsDeepPowerDownEnabled>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff4d 	bl	8000620 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff82 	bl	8000694 <LL_ADC_IsInternalRegulatorEnabled>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d115      	bne.n	80007c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff66 	bl	800066c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007a0:	4b89      	ldr	r3, [pc, #548]	; (80009c8 <HAL_ADC_Init+0x298>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	099b      	lsrs	r3, r3, #6
 80007a6:	4a89      	ldr	r2, [pc, #548]	; (80009cc <HAL_ADC_Init+0x29c>)
 80007a8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ac:	099b      	lsrs	r3, r3, #6
 80007ae:	3301      	adds	r3, #1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007b4:	e002      	b.n	80007bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f9      	bne.n	80007b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff64 	bl	8000694 <LL_ADC_IsInternalRegulatorEnabled>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10d      	bne.n	80007ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f043 0210 	orr.w	r2, r3, #16
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007e2:	f043 0201 	orr.w	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff75 	bl	80006e2 <LL_ADC_REG_IsConversionOngoing>
 80007f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 80d2 	bne.w	80009ac <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f040 80ce 	bne.w	80009ac <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000814:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000818:	f043 0202 	orr.w	r2, r3, #2
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff49 	bl	80006bc <LL_ADC_IsEnabled>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d115      	bne.n	800085c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000830:	4867      	ldr	r0, [pc, #412]	; (80009d0 <HAL_ADC_Init+0x2a0>)
 8000832:	f7ff ff43 	bl	80006bc <LL_ADC_IsEnabled>
 8000836:	4604      	mov	r4, r0
 8000838:	4866      	ldr	r0, [pc, #408]	; (80009d4 <HAL_ADC_Init+0x2a4>)
 800083a:	f7ff ff3f 	bl	80006bc <LL_ADC_IsEnabled>
 800083e:	4603      	mov	r3, r0
 8000840:	431c      	orrs	r4, r3
 8000842:	4865      	ldr	r0, [pc, #404]	; (80009d8 <HAL_ADC_Init+0x2a8>)
 8000844:	f7ff ff3a 	bl	80006bc <LL_ADC_IsEnabled>
 8000848:	4603      	mov	r3, r0
 800084a:	4323      	orrs	r3, r4
 800084c:	2b00      	cmp	r3, #0
 800084e:	d105      	bne.n	800085c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4619      	mov	r1, r3
 8000856:	4861      	ldr	r0, [pc, #388]	; (80009dc <HAL_ADC_Init+0x2ac>)
 8000858:	f7ff fdca 	bl	80003f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7e5b      	ldrb	r3, [r3, #25]
 8000860:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000866:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800086c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000872:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800087a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800087c:	4313      	orrs	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d106      	bne.n	8000898 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	3b01      	subs	r3, #1
 8000890:	045b      	lsls	r3, r3, #17
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089c:	2b00      	cmp	r3, #0
 800089e:	d009      	beq.n	80008b4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <HAL_ADC_Init+0x2b0>)
 80008bc:	4013      	ands	r3, r2
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	69b9      	ldr	r1, [r7, #24]
 80008c4:	430b      	orrs	r3, r1
 80008c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff08 	bl	80006e2 <LL_ADC_REG_IsConversionOngoing>
 80008d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff15 	bl	8000708 <LL_ADC_INJ_IsConversionOngoing>
 80008de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d140      	bne.n	8000968 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d13d      	bne.n	8000968 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7e1b      	ldrb	r3, [r3, #24]
 80008f4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008f6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000900:	4313      	orrs	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800090e:	f023 0306 	bic.w	r3, r3, #6
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	69b9      	ldr	r1, [r7, #24]
 8000918:	430b      	orrs	r3, r1
 800091a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000922:	2b01      	cmp	r3, #1
 8000924:	d118      	bne.n	8000958 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000930:	f023 0304 	bic.w	r3, r3, #4
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800093c:	4311      	orrs	r1, r2
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000942:	4311      	orrs	r1, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000948:	430a      	orrs	r2, r1
 800094a:	431a      	orrs	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f042 0201 	orr.w	r2, r2, #1
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	e007      	b.n	8000968 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	691a      	ldr	r2, [r3, #16]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f022 0201 	bic.w	r2, r2, #1
 8000966:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10c      	bne.n	800098a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f023 010f 	bic.w	r1, r3, #15
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	430a      	orrs	r2, r1
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
 8000988:	e007      	b.n	800099a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 020f 	bic.w	r2, r2, #15
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f023 0303 	bic.w	r3, r3, #3
 80009a2:	f043 0201 	orr.w	r2, r3, #1
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	659a      	str	r2, [r3, #88]	; 0x58
 80009aa:	e007      	b.n	80009bc <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	f043 0210 	orr.w	r2, r3, #16
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	053e2d63 	.word	0x053e2d63
 80009d0:	50040000 	.word	0x50040000
 80009d4:	50040100 	.word	0x50040100
 80009d8:	50040200 	.word	0x50040200
 80009dc:	50040300 	.word	0x50040300
 80009e0:	fff0c007 	.word	0xfff0c007

080009e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0b6      	sub	sp, #216	; 0xd8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <HAL_ADC_ConfigChannel+0x22>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e3e3      	b.n	80011ce <HAL_ADC_ConfigChannel+0x7ea>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe65 	bl	80006e2 <LL_ADC_REG_IsConversionOngoing>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 83c4 	bne.w	80011a8 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d824      	bhi.n	8000a72 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	3b02      	subs	r3, #2
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d81b      	bhi.n	8000a6a <HAL_ADC_ConfigChannel+0x86>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <HAL_ADC_ConfigChannel+0x54>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a59 	.word	0x08000a59
 8000a44:	08000a61 	.word	0x08000a61
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	605a      	str	r2, [r3, #4]
          break;
 8000a4e:	e011      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2212      	movs	r2, #18
 8000a54:	605a      	str	r2, [r3, #4]
          break;
 8000a56:	e00d      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	605a      	str	r2, [r3, #4]
          break;
 8000a5e:	e009      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	605a      	str	r2, [r3, #4]
          break;
 8000a68:	e004      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2206      	movs	r2, #6
 8000a6e:	605a      	str	r2, [r3, #4]
          break;
 8000a70:	e000      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000a72:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6859      	ldr	r1, [r3, #4]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	f7ff fd51 	bl	8000528 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe29 	bl	80006e2 <LL_ADC_REG_IsConversionOngoing>
 8000a90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe35 	bl	8000708 <LL_ADC_INJ_IsConversionOngoing>
 8000a9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 81c1 	bne.w	8000e2e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f040 81bc 	bne.w	8000e2e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000abe:	d10f      	bne.n	8000ae0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	f7ff fd58 	bl	8000580 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd12 	bl	8000502 <LL_ADC_SetSamplingTimeCommonConfig>
 8000ade:	e00e      	b.n	8000afe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	461a      	mov	r2, r3
 8000aee:	f7ff fd47 	bl	8000580 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd02 	bl	8000502 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d00a      	beq.n	8000b36 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6919      	ldr	r1, [r3, #16]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000b30:	f7ff fc92 	bl	8000458 <LL_ADC_SetOffset>
 8000b34:	e17b      	b.n	8000e2e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fcaf 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10a      	bne.n	8000b62 <HAL_ADC_ConfigChannel+0x17e>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fca4 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	0e9b      	lsrs	r3, r3, #26
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	e01e      	b.n	8000ba0 <HAL_ADC_ConfigChannel+0x1bc>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc99 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b78:	fa93 f3a3 	rbit	r3, r3
 8000b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000b90:	2320      	movs	r3, #32
 8000b92:	e004      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1d4>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0e9b      	lsrs	r3, r3, #26
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	e018      	b.n	8000bea <HAL_ADC_ConfigChannel+0x206>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000bc4:	fa93 f3a3 	rbit	r3, r3
 8000bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	e004      	b.n	8000bea <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d106      	bne.n	8000bfc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc68 	bl	80004cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc4c 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10a      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x244>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc41 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	0e9b      	lsrs	r3, r3, #26
 8000c22:	f003 021f 	and.w	r2, r3, #31
 8000c26:	e01e      	b.n	8000c66 <HAL_ADC_ConfigChannel+0x282>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc36 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000c56:	2320      	movs	r3, #32
 8000c58:	e004      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c5e:	fab3 f383 	clz	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <HAL_ADC_ConfigChannel+0x29a>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	0e9b      	lsrs	r3, r3, #26
 8000c78:	f003 031f 	and.w	r3, r3, #31
 8000c7c:	e018      	b.n	8000cb0 <HAL_ADC_ConfigChannel+0x2cc>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	e004      	b.n	8000cb0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d106      	bne.n	8000cc2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc05 	bl	80004cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fbe9 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10a      	bne.n	8000cee <HAL_ADC_ConfigChannel+0x30a>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fbde 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	0e9b      	lsrs	r3, r3, #26
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	e01e      	b.n	8000d2c <HAL_ADC_ConfigChannel+0x348>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fbd3 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000d1c:	2320      	movs	r3, #32
 8000d1e:	e004      	b.n	8000d2a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x360>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0e9b      	lsrs	r3, r3, #26
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	e016      	b.n	8000d72 <HAL_ADC_ConfigChannel+0x38e>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000d64:	2320      	movs	r3, #32
 8000d66:	e004      	b.n	8000d72 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d6c:	fab3 f383 	clz	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d106      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fba4 	bl	80004cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb88 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10a      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x3cc>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb7d 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	0e9b      	lsrs	r3, r3, #26
 8000daa:	f003 021f 	and.w	r2, r3, #31
 8000dae:	e017      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x3fc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2103      	movs	r1, #3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb72 	bl	80004a0 <LL_ADC_GetOffsetChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	e003      	b.n	8000dde <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8000dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <HAL_ADC_ConfigChannel+0x414>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0e9b      	lsrs	r3, r3, #26
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	e011      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x438>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8000e10:	2320      	movs	r3, #32
 8000e12:	e003      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8000e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d106      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	2103      	movs	r1, #3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb4f 	bl	80004cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc42 	bl	80006bc <LL_ADC_IsEnabled>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 8140 	bne.w	80010c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f7ff fbc3 	bl	80005d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4a8f      	ldr	r2, [pc, #572]	; (8001094 <HAL_ADC_ConfigChannel+0x6b0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	f040 8131 	bne.w	80010c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10b      	bne.n	8000e86 <HAL_ADC_ConfigChannel+0x4a2>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0e9b      	lsrs	r3, r3, #26
 8000e74:	3301      	adds	r3, #1
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	2b09      	cmp	r3, #9
 8000e7c:	bf94      	ite	ls
 8000e7e:	2301      	movls	r3, #1
 8000e80:	2300      	movhi	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	e019      	b.n	8000eba <HAL_ADC_ConfigChannel+0x4d6>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8000e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e96:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8000e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	e003      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8000ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	bf94      	ite	ls
 8000eb4:	2301      	movls	r3, #1
 8000eb6:	2300      	movhi	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d079      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d107      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x4f6>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0e9b      	lsrs	r3, r3, #26
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	069b      	lsls	r3, r3, #26
 8000ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ed8:	e015      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x522>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8000eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	e003      	b.n	8000efe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8000ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	069b      	lsls	r3, r3, #26
 8000f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x542>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	e017      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x572>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8000f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8000f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	e003      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8000f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	ea42 0103 	orr.w	r1, r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x598>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0e9b      	lsrs	r3, r3, #26
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f003 021f 	and.w	r2, r3, #31
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	051b      	lsls	r3, r3, #20
 8000f7a:	e018      	b.n	8000fae <HAL_ADC_ConfigChannel+0x5ca>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8000f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8000f94:	2320      	movs	r3, #32
 8000f96:	e003      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8000f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f003 021f 	and.w	r2, r3, #31
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	e081      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d107      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x5ea>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	0e9b      	lsrs	r3, r3, #26
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	069b      	lsls	r3, r3, #26
 8000fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fcc:	e015      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x616>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	e003      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	069b      	lsls	r3, r3, #26
 8000ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_ADC_ConfigChannel+0x636>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0e9b      	lsrs	r3, r3, #26
 800100c:	3301      	adds	r3, #1
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	e017      	b.n	800104a <HAL_ADC_ConfigChannel+0x666>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	61fb      	str	r3, [r7, #28]
  return result;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001032:	2320      	movs	r3, #32
 8001034:	e003      	b.n	800103e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	ea42 0103 	orr.w	r1, r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_ADC_ConfigChannel+0x692>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0e9b      	lsrs	r3, r3, #26
 8001060:	3301      	adds	r3, #1
 8001062:	f003 021f 	and.w	r2, r3, #31
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	3b1e      	subs	r3, #30
 800106e:	051b      	lsls	r3, r3, #20
 8001070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001074:	e01e      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x6d0>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	613b      	str	r3, [r7, #16]
  return result;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800108e:	2320      	movs	r3, #32
 8001090:	e006      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x6bc>
 8001092:	bf00      	nop
 8001094:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	f003 021f 	and.w	r2, r3, #31
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	3b1e      	subs	r3, #30
 80010ae:	051b      	lsls	r3, r3, #20
 80010b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010b4:	430b      	orrs	r3, r1
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6892      	ldr	r2, [r2, #8]
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fa60 	bl	8000580 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <HAL_ADC_ConfigChannel+0x7f4>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d07a      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010cc:	4843      	ldr	r0, [pc, #268]	; (80011dc <HAL_ADC_ConfigChannel+0x7f8>)
 80010ce:	f7ff f9b5 	bl	800043c <LL_ADC_GetCommonPathInternalCh>
 80010d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <HAL_ADC_ConfigChannel+0x7fc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d12c      	bne.n	800113a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d126      	bne.n	800113a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a3c      	ldr	r2, [pc, #240]	; (80011e4 <HAL_ADC_ConfigChannel+0x800>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d004      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x71c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <HAL_ADC_ConfigChannel+0x804>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d15d      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001108:	4619      	mov	r1, r3
 800110a:	4834      	ldr	r0, [pc, #208]	; (80011dc <HAL_ADC_ConfigChannel+0x7f8>)
 800110c:	f7ff f983 	bl	8000416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_ADC_ConfigChannel+0x808>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	099b      	lsrs	r3, r3, #6
 8001116:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <HAL_ADC_ConfigChannel+0x80c>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800112a:	e002      	b.n	8001132 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3b01      	subs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f9      	bne.n	800112c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001138:	e040      	b.n	80011bc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <HAL_ADC_ConfigChannel+0x810>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d118      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x792>
 8001144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d112      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_ADC_ConfigChannel+0x800>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d004      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x780>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_ADC_ConfigChannel+0x804>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d12d      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800116c:	4619      	mov	r1, r3
 800116e:	481b      	ldr	r0, [pc, #108]	; (80011dc <HAL_ADC_ConfigChannel+0x7f8>)
 8001170:	f7ff f951 	bl	8000416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001174:	e024      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_ADC_ConfigChannel+0x814>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d120      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11a      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_ADC_ConfigChannel+0x800>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d115      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800119a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119e:	4619      	mov	r1, r3
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_ADC_ConfigChannel+0x7f8>)
 80011a2:	f7ff f938 	bl	8000416 <LL_ADC_SetCommonPathInternalCh>
 80011a6:	e00c      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	f043 0220 	orr.w	r2, r3, #32
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80011ba:	e002      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011bc:	bf00      	nop
 80011be:	e000      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80011c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80011ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	37d8      	adds	r7, #216	; 0xd8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	80080000 	.word	0x80080000
 80011dc:	50040300 	.word	0x50040300
 80011e0:	c7520000 	.word	0xc7520000
 80011e4:	50040000 	.word	0x50040000
 80011e8:	50040200 	.word	0x50040200
 80011ec:	2000011c 	.word	0x2000011c
 80011f0:	053e2d63 	.word	0x053e2d63
 80011f4:	cb840000 	.word	0xcb840000
 80011f8:	80000001 	.word	0x80000001

080011fc <LL_ADC_IsEnabled>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <LL_ADC_IsEnabled+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_IsEnabled+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_REG_IsConversionOngoing>:
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b04      	cmp	r3, #4
 8001234:	d101      	bne.n	800123a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b0a1      	sub	sp, #132	; 0x84
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001262:	2302      	movs	r3, #2
 8001264:	e093      	b.n	800138e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800126e:	2300      	movs	r3, #0
 8001270:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001272:	2300      	movs	r3, #0
 8001274:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d102      	bne.n	8001286 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e001      	b.n	800128a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10b      	bne.n	80012a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e072      	b.n	800138e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffb9 	bl	8001222 <LL_ADC_REG_IsConversionOngoing>
 80012b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffb3 	bl	8001222 <LL_ADC_REG_IsConversionOngoing>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d154      	bne.n	800136c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80012c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d151      	bne.n	800136c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80012ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d02c      	beq.n	800132e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80012d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e6:	035b      	lsls	r3, r3, #13
 80012e8:	430b      	orrs	r3, r1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f0:	4829      	ldr	r0, [pc, #164]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80012f2:	f7ff ff83 	bl	80011fc <LL_ADC_IsEnabled>
 80012f6:	4604      	mov	r4, r0
 80012f8:	4828      	ldr	r0, [pc, #160]	; (800139c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80012fa:	f7ff ff7f 	bl	80011fc <LL_ADC_IsEnabled>
 80012fe:	4603      	mov	r3, r0
 8001300:	431c      	orrs	r4, r3
 8001302:	4828      	ldr	r0, [pc, #160]	; (80013a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001304:	f7ff ff7a 	bl	80011fc <LL_ADC_IsEnabled>
 8001308:	4603      	mov	r3, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d137      	bne.n	8001380 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	6892      	ldr	r2, [r2, #8]
 8001324:	430a      	orrs	r2, r1
 8001326:	431a      	orrs	r2, r3
 8001328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800132a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800132c:	e028      	b.n	8001380 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800132e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001338:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800133c:	f7ff ff5e 	bl	80011fc <LL_ADC_IsEnabled>
 8001340:	4604      	mov	r4, r0
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001344:	f7ff ff5a 	bl	80011fc <LL_ADC_IsEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	431c      	orrs	r4, r3
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800134e:	f7ff ff55 	bl	80011fc <LL_ADC_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	4323      	orrs	r3, r4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d112      	bne.n	8001380 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800135a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001362:	f023 030f 	bic.w	r3, r3, #15
 8001366:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001368:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800136a:	e009      	b.n	8001380 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	f043 0220 	orr.w	r2, r3, #32
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800137e:	e000      	b.n	8001382 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001380:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800138a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800138e:	4618      	mov	r0, r3
 8001390:	3784      	adds	r7, #132	; 0x84
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	50040000 	.word	0x50040000
 800139c:	50040100 	.word	0x50040100
 80013a0:	50040300 	.word	0x50040300
 80013a4:	50040200 	.word	0x50040200

080013a8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4904      	ldr	r1, [pc, #16]	; (80013c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40010400 	.word	0x40010400

080013cc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4904      	ldr	r1, [pc, #16]	; (80013f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40010400 	.word	0x40010400

080013f4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <LL_EXTI_EnableEvent_0_31+0x20>)
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]

}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40010400 	.word	0x40010400

08001418 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	43db      	mvns	r3, r3
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <LL_EXTI_DisableEvent_0_31+0x24>)
 800142a:	4013      	ands	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40010400 	.word	0x40010400

08001440 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4904      	ldr	r1, [pc, #16]	; (8001460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]

}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40010400 	.word	0x40010400

08001464 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	43db      	mvns	r3, r3
 8001474:	4904      	ldr	r1, [pc, #16]	; (8001488 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001476:	4013      	ands	r3, r2
 8001478:	608b      	str	r3, [r1, #8]

}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40010400 	.word	0x40010400

0800148c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	4904      	ldr	r1, [pc, #16]	; (80014ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40010400 	.word	0x40010400

080014b0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40010400 	.word	0x40010400

080014d8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6153      	str	r3, [r2, #20]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]
 8001512:	e0d1      	b.n	80016b8 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800151e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001522:	d102      	bne.n	800152a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]
 8001528:	e0c6      	b.n	80016b8 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d115      	bne.n	8001562 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_COMP_Init+0x1cc>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_COMP_Init+0x1cc>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6613      	str	r3, [r2, #96]	; 0x60
 8001550:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_COMP_Init+0x1cc>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f00b ffb3 	bl	800d4c8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800158e:	4313      	orrs	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_COMP_Init+0x1d0>)
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6979      	ldr	r1, [r7, #20]
 80015a2:	430b      	orrs	r3, r1
 80015a4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d106      	bne.n	80015be <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80015b0:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_COMP_Init+0x1d4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_COMP_Init+0x1d4>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e005      	b.n	80015ca <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_COMP_Init+0x1d4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a42      	ldr	r2, [pc, #264]	; (80016cc <HAL_COMP_Init+0x1d4>)
 80015c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015c8:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d016      	beq.n	8001606 <HAL_COMP_Init+0x10e>
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d113      	bne.n	8001606 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_COMP_Init+0x1d8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_COMP_Init+0x1dc>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80015f8:	e002      	b.n	8001600 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <HAL_COMP_Init+0x1e0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d102      	bne.n	8001616 <HAL_COMP_Init+0x11e>
 8001610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001614:	e001      	b.n	800161a <HAL_COMP_Init+0x122>
 8001616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d037      	beq.n	8001698 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8001634:	6938      	ldr	r0, [r7, #16]
 8001636:	f7ff ff03 	bl	8001440 <LL_EXTI_EnableRisingTrig_0_31>
 800163a:	e002      	b.n	8001642 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800163c:	6938      	ldr	r0, [r7, #16]
 800163e:	f7ff ff11 	bl	8001464 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800164e:	6938      	ldr	r0, [r7, #16]
 8001650:	f7ff ff1c 	bl	800148c <LL_EXTI_EnableFallingTrig_0_31>
 8001654:	e002      	b.n	800165c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001656:	6938      	ldr	r0, [r7, #16]
 8001658:	f7ff ff2a 	bl	80014b0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800165c:	6938      	ldr	r0, [r7, #16]
 800165e:	f7ff ff3b 	bl	80014d8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fec0 	bl	80013f4 <LL_EXTI_EnableEvent_0_31>
 8001674:	e002      	b.n	800167c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001676:	6938      	ldr	r0, [r7, #16]
 8001678:	f7ff fece 	bl	8001418 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8001688:	6938      	ldr	r0, [r7, #16]
 800168a:	f7ff fe8d 	bl	80013a8 <LL_EXTI_EnableIT_0_31>
 800168e:	e009      	b.n	80016a4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001690:	6938      	ldr	r0, [r7, #16]
 8001692:	f7ff fe9b 	bl	80013cc <LL_EXTI_DisableIT_0_31>
 8001696:	e005      	b.n	80016a4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8001698:	6938      	ldr	r0, [r7, #16]
 800169a:	f7ff febd 	bl	8001418 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800169e:	6938      	ldr	r0, [r7, #16]
 80016a0:	f7ff fe94 	bl	80013cc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80016b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	ff207d03 	.word	0xff207d03
 80016cc:	40010204 	.word	0x40010204
 80016d0:	2000011c 	.word	0x2000011c
 80016d4:	053e2d63 	.word	0x053e2d63
 80016d8:	40010200 	.word	0x40010200

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff4c 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185e:	f7ff ff61 	bl	8001724 <__NVIC_GetPriorityGrouping>
 8001862:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff ffb1 	bl	80017d0 <NVIC_EncodePriority>
 800186e:	4602      	mov	r2, r0
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff80 	bl	800177c <__NVIC_SetPriority>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff54 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e014      	b.n	80018dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f00b fe34 	bl	800d530 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	795b      	ldrb	r3, [r3, #5]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_DAC_ConfigChannel+0x1c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e107      	b.n	8001b10 <HAL_DAC_ConfigChannel+0x22c>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2202      	movs	r2, #2
 800190a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d174      	bne.n	80019fe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001914:	f7fe fcf0 	bl	80002f8 <HAL_GetTick>
 8001918:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d134      	bne.n	800198a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001920:	e011      	b.n	8001946 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001922:	f7fe fce9 	bl	80002f8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d90a      	bls.n	8001946 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f043 0208 	orr.w	r2, r3, #8
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2203      	movs	r2, #3
 8001940:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0e4      	b.n	8001b10 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e6      	bne.n	8001922 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001954:	2001      	movs	r0, #1
 8001956:	f7fe fcdb 	bl	8000310 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	6992      	ldr	r2, [r2, #24]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
 8001964:	e01e      	b.n	80019a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001966:	f7fe fcc7 	bl	80002f8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d90a      	bls.n	800198a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f043 0208 	orr.w	r2, r3, #8
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2203      	movs	r2, #3
 8001984:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0c2      	b.n	8001b10 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	2b00      	cmp	r3, #0
 8001992:	dbe8      	blt.n	8001966 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001994:	2001      	movs	r0, #1
 8001996:	f7fe fcbb 	bl	8000310 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	6992      	ldr	r2, [r2, #24]
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	ea02 0103 	and.w	r1, r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	21ff      	movs	r1, #255	; 0xff
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	ea02 0103 	and.w	r1, r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d11d      	bne.n	8001a42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	221f      	movs	r2, #31
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2207      	movs	r2, #7
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	22c0      	movs	r2, #192	; 0xc0
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43da      	mvns	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	e166      	b.n	8001df6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8158 	beq.w	8001df0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d005      	beq.n	8001b58 <HAL_GPIO_Init+0x40>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d130      	bne.n	8001bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 0201 	and.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d017      	beq.n	8001bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d123      	bne.n	8001c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	6939      	ldr	r1, [r7, #16]
 8001c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0203 	and.w	r2, r3, #3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80b2 	beq.w	8001df0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_GPIO_Init+0x2fc>)
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_GPIO_Init+0x2fc>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6613      	str	r3, [r2, #96]	; 0x60
 8001c98:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_GPIO_Init+0x2fc>)
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cce:	d02b      	beq.n	8001d28 <HAL_GPIO_Init+0x210>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d025      	beq.n	8001d24 <HAL_GPIO_Init+0x20c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01f      	beq.n	8001d20 <HAL_GPIO_Init+0x208>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d019      	beq.n	8001d1c <HAL_GPIO_Init+0x204>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <HAL_GPIO_Init+0x310>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_GPIO_Init+0x200>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_GPIO_Init+0x314>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00d      	beq.n	8001d14 <HAL_GPIO_Init+0x1fc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4d      	ldr	r2, [pc, #308]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4c      	ldr	r2, [pc, #304]	; (8001e34 <HAL_GPIO_Init+0x31c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_GPIO_Init+0x1f4>
 8001d08:	2307      	movs	r3, #7
 8001d0a:	e00e      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	e00c      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d10:	2306      	movs	r3, #6
 8001d12:	e00a      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d14:	2305      	movs	r3, #5
 8001d16:	e008      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4093      	lsls	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3a:	4937      	ldr	r1, [pc, #220]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d6c:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d96:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f ae91 	bne.w	8001b28 <HAL_GPIO_Init+0x10>
  }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	48000800 	.word	0x48000800
 8001e24:	48000c00 	.word	0x48000c00
 8001e28:	48001000 	.word	0x48001000
 8001e2c:	48001400 	.word	0x48001400
 8001e30:	48001800 	.word	0x48001800
 8001e34:	48001c00 	.word	0x48001c00
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f806 	bl	8001e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0af      	b.n	8002026 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f00b fb66 	bl	800d5ac <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e00a      	b.n	8001f14 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3304      	adds	r3, #4
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d9f1      	bls.n	8001efe <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0204 	orr.w	r2, r2, #4
 8001f28:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_LCD_Init+0x17c>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6851      	ldr	r1, [r2, #4]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6892      	ldr	r2, [r2, #8]
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	69d2      	ldr	r2, [r2, #28]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6a12      	ldr	r2, [r2, #32]
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6992      	ldr	r2, [r2, #24]
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	430b      	orrs	r3, r1
 8001f68:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f862 	bl	8002034 <LCD_WaitForSynchro>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_LCD_Init+0xca>
  {
    return status;
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	e053      	b.n	8002026 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001fb6:	f7fe f99f 	bl	80002f8 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001fbc:	e00c      	b.n	8001fd8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001fbe:	f7fe f99b 	bl	80002f8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fcc:	d904      	bls.n	8001fd8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e026      	b.n	8002026 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d1eb      	bne.n	8001fbe <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001fe6:	f7fe f987 	bl	80002f8 <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001fec:	e00c      	b.n	8002008 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001fee:	f7fe f983 	bl	80002f8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffc:	d904      	bls.n	8002008 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2210      	movs	r2, #16
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e00e      	b.n	8002026 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b10      	cmp	r3, #16
 8002014:	d1eb      	bne.n	8001fee <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	fc00000e 	.word	0xfc00000e

08002034 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800203c:	f7fe f95c 	bl	80002f8 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002042:	e00c      	b.n	800205e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002044:	f7fe f958 	bl	80002f8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002052:	d904      	bls.n	800205e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e007      	b.n	800206e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b20      	cmp	r3, #32
 800206a:	d1eb      	bne.n	8002044 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0c3      	b.n	8002216 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b05      	cmp	r3, #5
 8002098:	d101      	bne.n	800209e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0bb      	b.n	8002216 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d101      	bne.n	80020ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0b3      	b.n	8002216 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f00b fb18 	bl	800d700 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020de:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d11b      	bne.n	8002120 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 80020f2:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6891      	ldr	r1, [r2, #8]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6992      	ldr	r2, [r2, #24]
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6912      	ldr	r2, [r2, #16]
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6952      	ldr	r2, [r2, #20]
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	69d2      	ldr	r2, [r2, #28]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d115      	bne.n	8002154 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8002132:	f023 030e 	bic.w	r3, r3, #14
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6891      	ldr	r1, [r2, #8]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68d2      	ldr	r2, [r2, #12]
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6952      	ldr	r2, [r2, #20]
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	69d2      	ldr	r2, [r2, #28]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d118      	bne.n	800218e <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8002166:	f023 030e 	bic.w	r3, r3, #14
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6891      	ldr	r1, [r2, #8]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6912      	ldr	r2, [r2, #16]
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6952      	ldr	r2, [r2, #20]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	69d2      	ldr	r2, [r2, #28]
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	430b      	orrs	r3, r1
 800218c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002196:	d12a      	bne.n	80021ee <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d013      	beq.n	80021c8 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80021b8:	f023 031f 	bic.w	r3, r3, #31
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]
 80021c6:	e012      	b.n	80021ee <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80021e0:	f023 031f 	bic.w	r3, r3, #31
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_OPAMP_Init+0x1a8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4909      	ldr	r1, [pc, #36]	; (8002220 <HAL_OPAMP_Init+0x1a8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40007800 	.word	0x40007800

08002224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b08f      	sub	sp, #60	; 0x3c
 8002228:	af0a      	add	r7, sp, #40	; 0x28
 800222a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e116      	b.n	8002464 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f00b fd15 	bl	800dc80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ffa6 	bl	80051c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	687e      	ldr	r6, [r7, #4]
 8002282:	466d      	mov	r5, sp
 8002284:	f106 0410 	add.w	r4, r6, #16
 8002288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002294:	e885 0003 	stmia.w	r5, {r0, r1}
 8002298:	1d33      	adds	r3, r6, #4
 800229a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f002 feb9 	bl	8005014 <USB_CoreInit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d7      	b.n	8002464 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ff94 	bl	80051e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e04a      	b.n	800235c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	333d      	adds	r3, #61	; 0x3d
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333c      	adds	r3, #60	; 0x3c
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b298      	uxth	r0, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3342      	adds	r3, #66	; 0x42
 8002302:	4602      	mov	r2, r0
 8002304:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	333f      	adds	r3, #63	; 0x3f
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3344      	adds	r3, #68	; 0x44
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3348      	adds	r3, #72	; 0x48
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3350      	adds	r3, #80	; 0x50
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3af      	bcc.n	80022c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e044      	b.n	80023f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	3301      	adds	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3b5      	bcc.n	800236c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	687e      	ldr	r6, [r7, #4]
 8002408:	466d      	mov	r5, sp
 800240a:	f106 0410 	add.w	r4, r6, #16
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241a:	e885 0003 	stmia.w	r5, {r0, r1}
 800241e:	1d33      	adds	r3, r6, #4
 8002420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f002 ff2c 	bl	8005280 <USB_DevInit>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e014      	b.n	8002464 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 ff56 	bl	8003304 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f003 fefe 	bl	800625e <USB_DevDisconnect>

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_PCD_Start+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e01c      	b.n	80024c2 <HAL_PCD_Start+0x56>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 fe7b 	bl	80051a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 feb2 	bl	800621c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b08d      	sub	sp, #52	; 0x34
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 ff70 	bl	80063c6 <USB_GetMode>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 8384 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fed4 	bl	80062a0 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 837a 	beq.w	8002bf4 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fecb 	bl	80062a0 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f002 0202 	and.w	r2, r2, #2
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 feb9 	bl	80062a0 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b10      	cmp	r3, #16
 8002536:	d161      	bne.n	80025fc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0210 	bic.w	r2, r2, #16
 8002546:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2b02      	cmp	r3, #2
 8002572:	d124      	bne.n	80025be <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d035      	beq.n	80025ec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6a38      	ldr	r0, [r7, #32]
 8002594:	f003 fcf0 	bl	8005f78 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	441a      	add	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	441a      	add	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	e016      	b.n	80025ec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	0c5b      	lsrs	r3, r3, #17
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d110      	bne.n	80025ec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d0:	2208      	movs	r2, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	6a38      	ldr	r0, [r7, #32]
 80025d6:	f003 fccf 	bl	8005f78 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e6:	441a      	add	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fe4d 	bl	80062a0 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002610:	d16e      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fe53 	bl	80062c6 <USB_ReadDevAllOutEpInterrupt>
 8002620:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002622:	e062      	b.n	80026ea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d057      	beq.n	80026de <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fe78 	bl	800632e <USB_ReadDevOutEPInterrupt>
 800263e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2301      	movs	r3, #1
 800265a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fd76 	bl	8003150 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	461a      	mov	r2, r3
 800267c:	2308      	movs	r3, #8
 800267e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fdb2 	bl	80031ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269e:	461a      	mov	r2, r3
 80026a0:	2310      	movs	r3, #16
 80026a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	2320      	movs	r3, #32
 80026be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	3301      	adds	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d199      	bne.n	8002624 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fdd3 	bl	80062a0 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002704:	f040 808c 	bne.w	8002820 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fdf4 	bl	80062fa <USB_ReadDevAllInEpInterrupt>
 8002712:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002718:	e07e      	b.n	8002818 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d073      	beq.n	800280c <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fe1b 	bl	800636a <USB_ReadDevInEPInterrupt>
 8002734:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2201      	movs	r2, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002760:	4013      	ands	r3, r2
 8002762:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002770:	461a      	mov	r2, r3
 8002772:	2301      	movs	r3, #1
 8002774:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f00b fb2e 	bl	800ddde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	2308      	movs	r3, #8
 800279c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b4:	461a      	mov	r2, r3
 80027b6:	2310      	movs	r3, #16
 80027b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d0:	461a      	mov	r2, r3
 80027d2:	2340      	movs	r3, #64	; 0x40
 80027d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00c      	beq.n	80027fa <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e2:	6a38      	ldr	r0, [r7, #32]
 80027e4:	f002 fe98 	bl	8005518 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f4:	461a      	mov	r2, r3
 80027f6:	2302      	movs	r3, #2
 80027f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fc1a 	bl	8003040 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3301      	adds	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	f47f af7d 	bne.w	800271a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fd3b 	bl	80062a0 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002834:	d122      	bne.n	800287c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800285c:	2100      	movs	r1, #0
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fd74 	bl	800334c <HAL_PCDEx_LPM_Callback>
 8002864:	e002      	b.n	800286c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f00b fb26 	bl	800deb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800287a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fd0d 	bl	80062a0 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002890:	d112      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d102      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f00b fae2 	bl	800de6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fcef 	bl	80062a0 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028cc:	d121      	bne.n	8002912 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80028dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002902:	2101      	movs	r1, #1
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fd21 	bl	800334c <HAL_PCDEx_LPM_Callback>
 800290a:	e002      	b.n	8002912 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f00b faad 	bl	800de6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fcc2 	bl	80062a0 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	f040 80b5 	bne.w	8002a94 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2110      	movs	r1, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f002 fde7 	bl	8005518 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	e046      	b.n	80029de <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295c:	461a      	mov	r2, r3
 800295e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002962:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002974:	0151      	lsls	r1, r2, #5
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	440a      	add	r2, r1
 800297a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800297e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002982:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002996:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	3301      	adds	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3b3      	bcc.n	8002950 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d016      	beq.n	8002a32 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a14:	f043 030b 	orr.w	r3, r3, #11
 8002a18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2a:	f043 030b 	orr.w	r3, r3, #11
 8002a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a30:	e015      	b.n	8002a5e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a58:	f043 030b 	orr.w	r3, r3, #11
 8002a5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f003 fcd2 	bl	8006428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fc01 	bl	80062a0 <USB_ReadInterrupts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa8:	d124      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fc97 	bl	80063e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 fda6 	bl	800560a <USB_GetDevSpeed>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681c      	ldr	r4, [r3, #0]
 8002aca:	f001 fa53 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8002ace:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f002 fac7 	bl	800506c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f00b f9a5 	bl	800de2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fbd1 	bl	80062a0 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d10a      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f00b f982 	bl	800de12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f002 0208 	and.w	r2, r2, #8
 8002b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fbbc 	bl	80062a0 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b32:	d10f      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f00b f9f4 	bl	800df2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fba1 	bl	80062a0 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b68:	d10f      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00b f9c7 	bl	800df08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fb86 	bl	80062a0 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f00b f9d5 	bl	800df50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fb70 	bl	80062a0 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d115      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f00b f9c5 	bl	800df6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e000      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x72c>
      return;
 8002bf4:	bf00      	nop
    }
  }
}
 8002bf6:	3734      	adds	r7, #52	; 0x34
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_SetAddress+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e013      	b.n	8002c3e <HAL_PCD_SetAddress+0x42>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 face 	bl	80061d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	4608      	mov	r0, r1
 8002c50:	4611      	mov	r1, r2
 8002c52:	461a      	mov	r2, r3
 8002c54:	4603      	mov	r3, r0
 8002c56:	70fb      	strb	r3, [r7, #3]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	803b      	strh	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da0f      	bge.n	8002c8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	3338      	adds	r3, #56	; 0x38
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	705a      	strb	r2, [r3, #1]
 8002c8a:	e00f      	b.n	8002cac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cb8:	883a      	ldrh	r2, [r7, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	78ba      	ldrb	r2, [r7, #2]
 8002cc2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd6:	78bb      	ldrb	r3, [r7, #2]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d102      	bne.n	8002ce2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_PCD_EP_Open+0xaa>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e00e      	b.n	8002d0e <HAL_PCD_EP_Open+0xc8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68f9      	ldr	r1, [r7, #12]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fca2 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da0f      	bge.n	8002d4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3338      	adds	r3, #56	; 0x38
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	705a      	strb	r2, [r3, #1]
 8002d48:	e00f      	b.n	8002d6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_PCD_EP_Close+0x6e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e00e      	b.n	8002da2 <HAL_PCD_EP_Close+0x8c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68f9      	ldr	r1, [r7, #12]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fce0 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	460b      	mov	r3, r1
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 ff5d 	bl	8005cc8 <USB_EP0StartXfer>
 8002e0e:	e005      	b.n	8002e1c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fd7a 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e48:	681b      	ldr	r3, [r3, #0]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	460b      	mov	r3, r1
 8002e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	3338      	adds	r3, #56	; 0x38
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2201      	movs	r2, #1
 8002e94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 ff08 	bl	8005cc8 <USB_EP0StartXfer>
 8002eb8:	e005      	b.n	8002ec6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fd25 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d901      	bls.n	8002eee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e04e      	b.n	8002f8c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0f      	bge.n	8002f16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3338      	adds	r3, #56	; 0x38
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	705a      	strb	r2, [r3, #1]
 8002f14:	e00d      	b.n	8002f32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_PCD_EP_SetStall+0x82>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e01c      	b.n	8002f8c <HAL_PCD_EP_SetStall+0xbc>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 f861 	bl	8006028 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f003 fa53 	bl	8006428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d901      	bls.n	8002fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e042      	b.n	8003038 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0f      	bge.n	8002fda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	3338      	adds	r3, #56	; 0x38
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	705a      	strb	r2, [r3, #1]
 8002fd8:	e00f      	b.n	8002ffa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_PCD_EP_ClrStall+0x86>
 8003016:	2302      	movs	r3, #2
 8003018:	e00e      	b.n	8003038 <HAL_PCD_EP_ClrStall+0xa4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 f86b 	bl	8006104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e067      	b.n	8003148 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3303      	adds	r3, #3
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309c:	e026      	b.n	80030ec <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d902      	bls.n	80030ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3303      	adds	r3, #3
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f002 ff18 	bl	8005f04 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	441a      	add	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d809      	bhi.n	8003116 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310a:	429a      	cmp	r2, r3
 800310c:	d203      	bcs.n	8003116 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1c3      	bne.n	800309e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	429a      	cmp	r2, r3
 8003120:	d811      	bhi.n	8003146 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	43db      	mvns	r3, r3
 800313c:	6939      	ldr	r1, [r7, #16]
 800313e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003142:	4013      	ands	r3, r2
 8003144:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	333c      	adds	r3, #60	; 0x3c
 8003168:	3304      	adds	r3, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <PCD_EP_OutXfrComplete_int+0x98>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d124      	bne.n	80031d0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a2:	6093      	str	r3, [r2, #8]
 80031a4:	e01a      	b.n	80031dc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f00a fded 	bl	800dda8 <HAL_PCD_DataOutStageCallback>
 80031ce:	e005      	b.n	80031dc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f00a fde6 	bl	800dda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	4f54310a 	.word	0x4f54310a

080031ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	333c      	adds	r3, #60	; 0x3c
 8003204:	3304      	adds	r3, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <PCD_EP_OutSetupPacket_int+0x64>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d90e      	bls.n	8003240 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f00a fd9f 	bl	800dd84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	4f54300a 	.word	0x4f54300a

08003254 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
 8003260:	4613      	mov	r3, r2
 8003262:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003272:	883b      	ldrh	r3, [r7, #0]
 8003274:	0419      	lsls	r1, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	430a      	orrs	r2, r1
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	e028      	b.n	80032d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e00d      	b.n	80032b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3340      	adds	r3, #64	; 0x40
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4413      	add	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	3301      	adds	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3ec      	bcc.n	8003296 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032bc:	883b      	ldrh	r3, [r7, #0]
 80032be:	0418      	lsls	r0, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4302      	orrs	r2, r0
 80032cc:	3340      	adds	r3, #64	; 0x40
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	f043 0303 	orr.w	r3, r3, #3
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_PWREx_GetVoltageRange+0x18>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d130      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d038      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2232      	movs	r2, #50	; 0x32
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9b      	lsrs	r3, r3, #18
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c4:	e002      	b.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d8:	d102      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f2      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d110      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e00f      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d007      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40007000 	.word	0x40007000
 8003424:	2000011c 	.word	0x2000011c
 8003428:	431bde83 	.word	0x431bde83

0800342c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	6053      	str	r3, [r2, #4]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f000 bc16 	b.w	8003c8c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003460:	4b96      	ldr	r3, [pc, #600]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346a:	4b94      	ldr	r3, [pc, #592]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80e4 	beq.w	800364a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_RCC_OscConfig+0x4c>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	f040 808b 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 8087 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003498:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x64>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e3ed      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	4b81      	ldr	r3, [pc, #516]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_RCC_OscConfig+0x7e>
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c8:	e005      	b.n	80034d6 <HAL_RCC_OscConfig+0x8a>
 80034ca:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d223      	bcs.n	8003522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fd9c 	bl	800401c <RCC_SetFlashLatencyFromMSIRange>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e3ce      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ee:	4b73      	ldr	r3, [pc, #460]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a72      	ldr	r2, [pc, #456]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	496d      	ldr	r1, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350c:	4b6b      	ldr	r3, [pc, #428]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4968      	ldr	r1, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e025      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003522:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4960      	ldr	r1, [pc, #384]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	495b      	ldr	r1, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd5c 	bl	800401c <RCC_SetFlashLatencyFromMSIRange>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e38e      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356e:	f000 fc75 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4950      	ldr	r1, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 800358c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800358e:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f00a f960 	bl	800d858 <HAL_InitTick>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d052      	beq.n	8003648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	e372      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d032      	beq.n	8003614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a42      	ldr	r2, [pc, #264]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ba:	f7fc fe9d 	bl	80002f8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c2:	f7fc fe99 	bl	80002f8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e35b      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a35      	ldr	r2, [pc, #212]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4930      	ldr	r1, [pc, #192]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	492b      	ldr	r1, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e01a      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003620:	f7fc fe6a 	bl	80002f8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003628:	f7fc fe66 	bl	80002f8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e328      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1dc>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d073      	beq.n	800373e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x21c>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d10e      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d063      	beq.n	800373c <HAL_RCC_OscConfig+0x2f0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d15f      	bne.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e305      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x24c>
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e025      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d114      	bne.n	80036cc <HAL_RCC_OscConfig+0x280>
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	0800f680 	.word	0x0800f680
 80036c4:	2000011c 	.word	0x2000011c
 80036c8:	20000000 	.word	0x20000000
 80036cc:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a9f      	ldr	r2, [pc, #636]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a9c      	ldr	r2, [pc, #624]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fc fe04 	bl	80002f8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fc fe00 	bl	80002f8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e2c2      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2a8>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fc fdf0 	bl	80002f8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fc fdec 	bl	80002f8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e2ae      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x2d0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x310>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d119      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	4b7c      	ldr	r3, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x328>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e28b      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	4973      	ldr	r1, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	e040      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fc fdab 	bl	80002f8 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fc fda7 	bl	80002f8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e269      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	495f      	ldr	r1, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5c      	ldr	r2, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fc fd87 	bl	80002f8 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fc fd83 	bl	80002f8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e245      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fc fd62 	bl	80002f8 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fc fd5e 	bl	80002f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e220      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fc fd45 	bl	80002f8 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fc fd41 	bl	80002f8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e203      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	; 0x58
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d118      	bne.n	800390a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e4:	f7fc fd08 	bl	80002f8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fc fd04 	bl	80002f8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1c6      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x4d8>
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003922:	e029      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d115      	bne.n	8003958 <HAL_RCC_OscConfig+0x50c>
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	4b9d      	ldr	r3, [pc, #628]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a9c      	ldr	r2, [pc, #624]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	4b99      	ldr	r3, [pc, #612]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a98      	ldr	r2, [pc, #608]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fc fcba 	bl	80002f8 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fc fcb6 	bl	80002f8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e176      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ed      	beq.n	8003988 <HAL_RCC_OscConfig+0x53c>
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fc fca3 	bl	80002f8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fc fc9f 	bl	80002f8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e15f      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4b80      	ldr	r3, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ed      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a7a      	ldr	r2, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a00:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a06:	4a72      	ldr	r2, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fc fc72 	bl	80002f8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a18:	f7fc fc6e 	bl	80002f8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e130      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2a:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCC_OscConfig+0x5cc>
 8003a38:	e01b      	b.n	8003a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a40:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fc fc55 	bl	80002f8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fc fc51 	bl	80002f8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e113      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a64:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ef      	bne.n	8003a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8107 	beq.w	8003c8a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f040 80cf 	bne.w	8003c24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a86:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d12c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d123      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d11b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d113      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d071      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d068      	beq.n	8003bcc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afa:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b06:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0ba      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b22:	f7fc fbe9 	bl	80002f8 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fc fbe5 	bl	80002f8 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0a7      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_OscConfig+0x788>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b62:	0212      	lsls	r2, r2, #8
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0552      	lsls	r2, r2, #21
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b76:	0852      	lsrs	r2, r2, #1
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0652      	lsls	r2, r2, #25
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b82:	06d2      	lsls	r2, r2, #27
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4912      	ldr	r1, [pc, #72]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba4:	f7fc fba8 	bl	80002f8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fc fba4 	bl	80002f8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e066      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bca:	e05e      	b.n	8003c8a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e05d      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d152      	bne.n	8003c8a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf0:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bfc:	f7fc fb7c 	bl	80002f8 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fc fb78 	bl	80002f8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e03a      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x7b8>
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d02d      	beq.n	8003c86 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fc fb4b 	bl	80002f8 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fc fb47 	bl	80002f8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e009      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x848>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x81a>
 8003c84:	e001      	b.n	8003c8a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0c8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4961      	ldr	r1, [pc, #388]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d04c      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d121      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e09e      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d115      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e092      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d20:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e086      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e07e      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	493f      	ldr	r1, [pc, #252]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fc fad1 	bl	80002f8 <HAL_GetTick>
 8003d56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5a:	f7fc facd 	bl	80002f8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e066      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d70:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 020c 	and.w	r2, r3, #12
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d1eb      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	492c      	ldr	r1, [pc, #176]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4924      	ldr	r1, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e036      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4918      	ldr	r1, [pc, #96]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4910      	ldr	r1, [pc, #64]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0e:	f000 f825 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490c      	ldr	r1, [pc, #48]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f009 fd10 	bl	800d858 <HAL_InitTick>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800f680 	.word	0x0800f680
 8003e54:	2000011c 	.word	0x2000011c
 8003e58:	20000000 	.word	0x20000000

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x34>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d121      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d11e      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e9c:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d134      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d003      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0xac>
 8003f00:	e005      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f04:	617b      	str	r3, [r7, #20]
      break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f0a:	617b      	str	r3, [r7, #20]
      break;
 8003f0c:	e002      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	617b      	str	r3, [r7, #20]
      break;
 8003f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	3301      	adds	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	fb03 f202 	mul.w	r2, r3, r2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0e5b      	lsrs	r3, r3, #25
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	3301      	adds	r3, #1
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f54:	69bb      	ldr	r3, [r7, #24]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	0800f698 	.word	0x0800f698
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	00989680 	.word	0x00989680

08003f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	2000011c 	.word	0x2000011c

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800f690 	.word	0x0800f690

08003fb8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_RCC_GetClockConfig+0x5c>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0203 	and.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_RCC_GetClockConfig+0x5c>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_GetClockConfig+0x5c>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	08db      	lsrs	r3, r3, #3
 8003ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_RCC_GetClockConfig+0x60>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	40022000 	.word	0x40022000

0800401c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004034:	f7ff f996 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8004038:	6178      	str	r0, [r7, #20]
 800403a:	e014      	b.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6593      	str	r3, [r2, #88]	; 0x58
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004054:	f7ff f986 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8004058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800405a:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004064:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406c:	d10b      	bne.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d919      	bls.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2ba0      	cmp	r3, #160	; 0xa0
 8004078:	d902      	bls.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800407a:	2302      	movs	r3, #2
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	e013      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004080:	2301      	movs	r3, #1
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	e010      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d902      	bls.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800408c:	2303      	movs	r3, #3
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e00a      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d102      	bne.n	800409e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004098:	2302      	movs	r3, #2
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e004      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b70      	cmp	r3, #112	; 0x70
 80040a2:	d101      	bne.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040a4:	2301      	movs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 0207 	bic.w	r2, r3, #7
 80040b0:	4909      	ldr	r1, [pc, #36]	; (80040d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d001      	beq.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e8:	2300      	movs	r3, #0
 80040ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d041      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004100:	d02a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004106:	d824      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800410c:	d008      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800410e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004112:	d81e      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411c:	d010      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800411e:	e018      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004120:	4b86      	ldr	r3, [pc, #536]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a85      	ldr	r2, [pc, #532]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800412c:	e015      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 facd 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413e:	e00c      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3320      	adds	r3, #32
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fbb6 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	74fb      	strb	r3, [r7, #19]
      break;
 8004156:	e000      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004160:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416e:	4973      	ldr	r1, [pc, #460]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004176:	e001      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d041      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004190:	d02a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004196:	d824      	bhi.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419c:	d008      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800419e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a2:	d81e      	bhi.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ac:	d010      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ae:	e018      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041b0:	4b62      	ldr	r3, [pc, #392]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041bc:	e015      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fa85 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ce:	e00c      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3320      	adds	r3, #32
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fb6e 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	74fb      	strb	r3, [r7, #19]
      break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041f0:	4b52      	ldr	r3, [pc, #328]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fe:	494f      	ldr	r1, [pc, #316]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80a0 	beq.w	800435a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	4a40      	ldr	r2, [pc, #256]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	; 0x58
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424c:	2301      	movs	r3, #1
 800424e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004250:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425c:	f7fc f84c 	bl	80002f8 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fc f848 	bl	80002f8 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	74fb      	strb	r3, [r7, #19]
        break;
 8004276:	e005      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ef      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d15c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800428a:	4b2c      	ldr	r3, [pc, #176]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01f      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d019      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fc f807 	bl	80002f8 <HAL_GetTick>
 80042ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	e00b      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fc f803 	bl	80002f8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	74fb      	strb	r3, [r7, #19]
            break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ec      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	4904      	ldr	r1, [pc, #16]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004332:	e009      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004348:	7c7b      	ldrb	r3, [r7, #17]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4ba6      	ldr	r3, [pc, #664]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	4aa5      	ldr	r2, [pc, #660]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004366:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 0203 	bic.w	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	499c      	ldr	r1, [pc, #624]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004388:	4b97      	ldr	r3, [pc, #604]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 020c 	bic.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	4994      	ldr	r1, [pc, #592]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043aa:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	498b      	ldr	r1, [pc, #556]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043cc:	4b86      	ldr	r3, [pc, #536]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4983      	ldr	r1, [pc, #524]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ee:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	497a      	ldr	r1, [pc, #488]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004410:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	4972      	ldr	r1, [pc, #456]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	4969      	ldr	r1, [pc, #420]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004454:	4b64      	ldr	r3, [pc, #400]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004462:	4961      	ldr	r1, [pc, #388]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004476:	4b5c      	ldr	r3, [pc, #368]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	4958      	ldr	r1, [pc, #352]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004498:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	4950      	ldr	r1, [pc, #320]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044ba:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	4947      	ldr	r1, [pc, #284]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044dc:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	493f      	ldr	r1, [pc, #252]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4936      	ldr	r1, [pc, #216]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451c:	d106      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a31      	ldr	r2, [pc, #196]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004528:	60d3      	str	r3, [r2, #12]
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f8c9 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d028      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800455c:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	491f      	ldr	r1, [pc, #124]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457a:	d106      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e011      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f89a 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d8:	d108      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	e013      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80045e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f869 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02f      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800461c:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462a:	4929      	ldr	r1, [pc, #164]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f846 	bl	80046d4 <RCCEx_PLLSAI1_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d014      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	74bb      	strb	r3, [r7, #18]
 8004656:	e011      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3320      	adds	r3, #32
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f925 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	490d      	ldr	r1, [pc, #52]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046bc:	4904      	ldr	r1, [pc, #16]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000

080046d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e2:	4b74      	ldr	r3, [pc, #464]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046ee:	4b71      	ldr	r3, [pc, #452]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0203 	and.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d10d      	bne.n	800471a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
       ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004706:	4b6b      	ldr	r3, [pc, #428]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
       ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d047      	beq.n	80047aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
 800471e:	e044      	b.n	80047aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d018      	beq.n	800475a <RCCEx_PLLSAI1_Config+0x86>
 8004728:	2b03      	cmp	r3, #3
 800472a:	d825      	bhi.n	8004778 <RCCEx_PLLSAI1_Config+0xa4>
 800472c:	2b01      	cmp	r3, #1
 800472e:	d002      	beq.n	8004736 <RCCEx_PLLSAI1_Config+0x62>
 8004730:	2b02      	cmp	r3, #2
 8004732:	d009      	beq.n	8004748 <RCCEx_PLLSAI1_Config+0x74>
 8004734:	e020      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004736:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004746:	e01a      	b.n	800477e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004748:	4b5a      	ldr	r3, [pc, #360]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d116      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e013      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800475a:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10f      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004766:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004776:	e006      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	e004      	b.n	8004788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
    }

    if(status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478e:	4b49      	ldr	r3, [pc, #292]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	3b01      	subs	r3, #1
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	430b      	orrs	r3, r1
 80047a4:	4943      	ldr	r1, [pc, #268]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d17c      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b0:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3f      	ldr	r2, [pc, #252]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fb fd9c 	bl	80002f8 <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c2:	e009      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c4:	f7fb fd98 	bl	80002f8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d902      	bls.n	80047d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	73fb      	strb	r3, [r7, #15]
        break;
 80047d6:	e005      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ef      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d15f      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d110      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
 8004800:	0211      	lsls	r1, r2, #8
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	06d2      	lsls	r2, r2, #27
 8004808:	430a      	orrs	r2, r1
 800480a:	492a      	ldr	r1, [pc, #168]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
 8004810:	e027      	b.n	8004862 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d112      	bne.n	800483e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004820:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	0211      	lsls	r1, r2, #8
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6912      	ldr	r2, [r2, #16]
 800482e:	0852      	lsrs	r2, r2, #1
 8004830:	3a01      	subs	r2, #1
 8004832:	0552      	lsls	r2, r2, #21
 8004834:	430a      	orrs	r2, r1
 8004836:	491f      	ldr	r1, [pc, #124]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	610b      	str	r3, [r1, #16]
 800483c:	e011      	b.n	8004862 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004846:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	0211      	lsls	r1, r2, #8
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6952      	ldr	r2, [r2, #20]
 8004854:	0852      	lsrs	r2, r2, #1
 8004856:	3a01      	subs	r2, #1
 8004858:	0652      	lsls	r2, r2, #25
 800485a:	430a      	orrs	r2, r1
 800485c:	4915      	ldr	r1, [pc, #84]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485e:	4313      	orrs	r3, r2
 8004860:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800486c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486e:	f7fb fd43 	bl	80002f8 <HAL_GetTick>
 8004872:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004874:	e009      	b.n	800488a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004876:	f7fb fd3f 	bl	80002f8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d902      	bls.n	800488a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	73fb      	strb	r3, [r7, #15]
          break;
 8004888:	e005      	b.n	8004896 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0ef      	beq.n	8004876 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000

080048b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048c6:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048d2:	4b66      	ldr	r3, [pc, #408]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d10d      	bne.n	80048fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
       ||
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048ea:	4b60      	ldr	r3, [pc, #384]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
       ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d047      	beq.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e044      	b.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d018      	beq.n	800493e <RCCEx_PLLSAI2_Config+0x86>
 800490c:	2b03      	cmp	r3, #3
 800490e:	d825      	bhi.n	800495c <RCCEx_PLLSAI2_Config+0xa4>
 8004910:	2b01      	cmp	r3, #1
 8004912:	d002      	beq.n	800491a <RCCEx_PLLSAI2_Config+0x62>
 8004914:	2b02      	cmp	r3, #2
 8004916:	d009      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x74>
 8004918:	e020      	b.n	800495c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800491a:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11d      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492a:	e01a      	b.n	8004962 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800492c:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e013      	b.n	8004966 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800495a:	e006      	b.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e004      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800496a:	bf00      	nop
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	430b      	orrs	r3, r1
 8004988:	4938      	ldr	r1, [pc, #224]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d166      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fb fcaa 	bl	80002f8 <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a8:	f7fb fca6 	bl	80002f8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ef      	bne.n	80049a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d149      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d110      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049d4:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	0211      	lsls	r1, r2, #8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68d2      	ldr	r2, [r2, #12]
 80049ea:	06d2      	lsls	r2, r2, #27
 80049ec:	430a      	orrs	r2, r1
 80049ee:	491f      	ldr	r1, [pc, #124]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	614b      	str	r3, [r1, #20]
 80049f4:	e011      	b.n	8004a1a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	0211      	lsls	r1, r2, #8
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6912      	ldr	r2, [r2, #16]
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0652      	lsls	r2, r2, #25
 8004a12:	430a      	orrs	r2, r1
 8004a14:	4915      	ldr	r1, [pc, #84]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fb fc67 	bl	80002f8 <HAL_GetTick>
 8004a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a2c:	e009      	b.n	8004a42 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a2e:	f7fb fc63 	bl	80002f8 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d902      	bls.n	8004a42 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8004a40:	e005      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ef      	beq.n	8004a2e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000

08004a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e049      	b.n	8004b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f841 	bl	8004b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 f9f8 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e04f      	b.n	8004bec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d018      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_TIM_Base_Start_IT+0x76>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d115      	bne.n	8004bd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d015      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0xb4>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc2:	d011      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	e008      	b.n	8004be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e000      	b.n	8004bea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	00010007 	.word	0x00010007

08004c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0202 	mvn.w	r2, #2
 8004c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f905 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8f7 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f908 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0204 	mvn.w	r2, #4
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8db 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8cd 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8de 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0208 	mvn.w	r2, #8
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2204      	movs	r2, #4
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8b1 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8a3 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8b4 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0210 	mvn.w	r2, #16
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2208      	movs	r2, #8
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f887 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f879 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f88a 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10e      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0201 	mvn.w	r2, #1
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f008 face 	bl	800d334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d10e      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	2b80      	cmp	r3, #128	; 0x80
 8004db2:	d107      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f914 	bl	8004fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d10e      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d107      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f907 	bl	8005000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d10e      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d107      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f838 	bl	8004e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d10e      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0220 	mvn.w	r2, #32
 8004e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8c7 	bl	8004fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a40      	ldr	r2, [pc, #256]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <TIM_Base_SetConfig+0x118>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <TIM_Base_SetConfig+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3a      	ldr	r2, [pc, #232]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d01b      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <TIM_Base_SetConfig+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d017      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <TIM_Base_SetConfig+0x11c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <TIM_Base_SetConfig+0x128>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00f      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <TIM_Base_SetConfig+0x128>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d103      	bne.n	8004fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	615a      	str	r2, [r3, #20]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 001c 	add.w	r0, r7, #28
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 fa40 	bl	80064b8 <USB_CoreReset>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
 800504e:	e005      	b.n	800505c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005068:	b004      	add	sp, #16
 800506a:	4770      	bx	lr

0800506c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d165      	bne.n	800514c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a3e      	ldr	r2, [pc, #248]	; (800517c <USB_SetTurnaroundTime+0x110>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d906      	bls.n	8005096 <USB_SetTurnaroundTime+0x2a>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <USB_SetTurnaroundTime+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d202      	bcs.n	8005096 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005090:	230f      	movs	r3, #15
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e05c      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4a39      	ldr	r2, [pc, #228]	; (8005180 <USB_SetTurnaroundTime+0x114>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d306      	bcc.n	80050ac <USB_SetTurnaroundTime+0x40>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a38      	ldr	r2, [pc, #224]	; (8005184 <USB_SetTurnaroundTime+0x118>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d202      	bcs.n	80050ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050a6:	230e      	movs	r3, #14
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e051      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4a35      	ldr	r2, [pc, #212]	; (8005184 <USB_SetTurnaroundTime+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d306      	bcc.n	80050c2 <USB_SetTurnaroundTime+0x56>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <USB_SetTurnaroundTime+0x11c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d202      	bcs.n	80050c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050bc:	230d      	movs	r3, #13
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e046      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <USB_SetTurnaroundTime+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d306      	bcc.n	80050d8 <USB_SetTurnaroundTime+0x6c>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	; (800518c <USB_SetTurnaroundTime+0x120>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d802      	bhi.n	80050d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050d2:	230c      	movs	r3, #12
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e03b      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4a2c      	ldr	r2, [pc, #176]	; (800518c <USB_SetTurnaroundTime+0x120>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d906      	bls.n	80050ee <USB_SetTurnaroundTime+0x82>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <USB_SetTurnaroundTime+0x124>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d802      	bhi.n	80050ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050e8:	230b      	movs	r3, #11
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e030      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4a27      	ldr	r2, [pc, #156]	; (8005190 <USB_SetTurnaroundTime+0x124>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d906      	bls.n	8005104 <USB_SetTurnaroundTime+0x98>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a26      	ldr	r2, [pc, #152]	; (8005194 <USB_SetTurnaroundTime+0x128>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d802      	bhi.n	8005104 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050fe:	230a      	movs	r3, #10
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e025      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a23      	ldr	r2, [pc, #140]	; (8005194 <USB_SetTurnaroundTime+0x128>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d906      	bls.n	800511a <USB_SetTurnaroundTime+0xae>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a22      	ldr	r2, [pc, #136]	; (8005198 <USB_SetTurnaroundTime+0x12c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d202      	bcs.n	800511a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005114:	2309      	movs	r3, #9
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e01a      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <USB_SetTurnaroundTime+0x12c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d306      	bcc.n	8005130 <USB_SetTurnaroundTime+0xc4>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <USB_SetTurnaroundTime+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d802      	bhi.n	8005130 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800512a:	2308      	movs	r3, #8
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e00f      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4a1a      	ldr	r2, [pc, #104]	; (800519c <USB_SetTurnaroundTime+0x130>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d906      	bls.n	8005146 <USB_SetTurnaroundTime+0xda>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <USB_SetTurnaroundTime+0x134>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d202      	bcs.n	8005146 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005140:	2307      	movs	r3, #7
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e004      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005146:	2306      	movs	r3, #6
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e001      	b.n	8005150 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800514c:	2309      	movs	r3, #9
 800514e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	029b      	lsls	r3, r3, #10
 8005164:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	00d8acbf 	.word	0x00d8acbf
 8005180:	00e4e1c0 	.word	0x00e4e1c0
 8005184:	00f42400 	.word	0x00f42400
 8005188:	01067380 	.word	0x01067380
 800518c:	011a499f 	.word	0x011a499f
 8005190:	01312cff 	.word	0x01312cff
 8005194:	014ca43f 	.word	0x014ca43f
 8005198:	016e3600 	.word	0x016e3600
 800519c:	01a6ab1f 	.word	0x01a6ab1f
 80051a0:	01e84800 	.word	0x01e84800

080051a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d115      	bne.n	8005236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005216:	2001      	movs	r0, #1
 8005218:	f7fb f87a 	bl	8000310 <HAL_Delay>
      ms++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 f8cf 	bl	80063c6 <USB_GetMode>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d01e      	beq.n	800526c <USB_SetCurrentMode+0x84>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b31      	cmp	r3, #49	; 0x31
 8005232:	d9f0      	bls.n	8005216 <USB_SetCurrentMode+0x2e>
 8005234:	e01a      	b.n	800526c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d115      	bne.n	8005268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005248:	2001      	movs	r0, #1
 800524a:	f7fb f861 	bl	8000310 <HAL_Delay>
      ms++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f8b6 	bl	80063c6 <USB_GetMode>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <USB_SetCurrentMode+0x84>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b31      	cmp	r3, #49	; 0x31
 8005264:	d9f0      	bls.n	8005248 <USB_SetCurrentMode+0x60>
 8005266:	e001      	b.n	800526c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e005      	b.n	8005278 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b32      	cmp	r3, #50	; 0x32
 8005270:	d101      	bne.n	8005276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e009      	b.n	80052b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3340      	adds	r3, #64	; 0x40
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0e      	cmp	r3, #14
 80052b8:	d9f2      	bls.n	80052a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d11c      	bne.n	80052fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e005      	b.n	8005306 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800530c:	461a      	mov	r2, r3
 800530e:	2300      	movs	r3, #0
 8005310:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	4619      	mov	r1, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005320:	461a      	mov	r2, r3
 8005322:	680b      	ldr	r3, [r1, #0]
 8005324:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005326:	2103      	movs	r1, #3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f955 	bl	80055d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800532e:	2110      	movs	r1, #16
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8f1 	bl	8005518 <USB_FlushTxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f91b 	bl	800557c <USB_FlushRxFifo>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e043      	b.n	8005402 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d118      	bne.n	80053c4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e013      	b.n	80053d6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b7      	bcc.n	800537a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e043      	b.n	8005498 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d118      	bne.n	800545a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e008      	b.n	800546c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3b7      	bcc.n	8005410 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f043 0210 	orr.w	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	4b10      	ldr	r3, [pc, #64]	; (8005514 <USB_DevInit+0x294>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f043 0208 	orr.w	r2, r3, #8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800550e:	b004      	add	sp, #16
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	803c3800 	.word	0x803c3800

08005518 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <USB_FlushTxFifo+0x60>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e01a      	b.n	800556c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	daf3      	bge.n	8005526 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	4a08      	ldr	r2, [pc, #32]	; (8005578 <USB_FlushTxFifo+0x60>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e006      	b.n	800556c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b20      	cmp	r3, #32
 8005568:	d0f1      	beq.n	800554e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	00030d40 	.word	0x00030d40

0800557c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <USB_FlushRxFifo+0x58>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d901      	bls.n	8005598 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e017      	b.n	80055c8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	daf3      	bge.n	8005588 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2210      	movs	r2, #16
 80055a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <USB_FlushRxFifo+0x58>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d0f1      	beq.n	80055aa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x26>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	78db      	ldrb	r3, [r3, #3]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d161      	bne.n	8005838 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	4619      	mov	r1, r3
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <USB_DeactivateEndpoint+0x1b0>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	e060      	b.n	80058fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584e:	d11f      	bne.n	8005890 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800586e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	43db      	mvns	r3, r3
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	4619      	mov	r1, r3
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <USB_DeactivateEndpoint+0x1b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	ec337800 	.word	0xec337800
 800590c:	eff37800 	.word	0xeff37800

08005910 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	f040 810a 	bne.w	8005b42 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d132      	bne.n	800599c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005994:	0cdb      	lsrs	r3, r3, #19
 8005996:	04db      	lsls	r3, r3, #19
 8005998:	6113      	str	r3, [r2, #16]
 800599a:	e074      	b.n	8005a86 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	0cdb      	lsrs	r3, r3, #19
 80059b8:	04db      	lsls	r3, r3, #19
 80059ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6959      	ldr	r1, [r3, #20]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	440b      	add	r3, r1
 80059f8:	1e59      	subs	r1, r3, #1
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a04:	4baf      	ldr	r3, [pc, #700]	; (8005cc4 <USB_EPStartXfer+0x3b4>)
 8005a06:	400b      	ands	r3, r1
 8005a08:	6939      	ldr	r1, [r7, #16]
 8005a0a:	0148      	lsls	r0, r1, #5
 8005a0c:	6979      	ldr	r1, [r7, #20]
 8005a0e:	4401      	add	r1, r0
 8005a10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a14:	4313      	orrs	r3, r2
 8005a16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	0148      	lsls	r0, r1, #5
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	4401      	add	r1, r0
 8005a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d11f      	bne.n	8005a86 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a84:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aa4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	78db      	ldrb	r3, [r3, #3]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d015      	beq.n	8005ada <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8100 	beq.w	8005cb8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	634b      	str	r3, [r1, #52]	; 0x34
 8005ad8:	e0ee      	b.n	8005cb8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e00f      	b.n	8005b2c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68d9      	ldr	r1, [r3, #12]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9e2 	bl	8005f04 <USB_WritePacket>
 8005b40:	e0ba      	b.n	8005cb8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	0cdb      	lsrs	r3, r3, #19
 8005b5e:	04db      	lsls	r3, r3, #19
 8005b60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d123      	bne.n	8005bd6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba4:	6939      	ldr	r1, [r7, #16]
 8005ba6:	0148      	lsls	r0, r1, #5
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	4401      	add	r1, r0
 8005bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd2:	6113      	str	r3, [r2, #16]
 8005bd4:	e033      	b.n	8005c3e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	89fb      	ldrh	r3, [r7, #14]
 8005bfc:	04d9      	lsls	r1, r3, #19
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <USB_EPStartXfer+0x3b4>)
 8005c00:	400b      	ands	r3, r1
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	0148      	lsls	r0, r1, #5
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4401      	add	r1, r0
 8005c0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	89f9      	ldrh	r1, [r7, #14]
 8005c26:	fb01 f303 	mul.w	r3, r1, r3
 8005c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2e:	6939      	ldr	r1, [r7, #16]
 8005c30:	0148      	lsls	r0, r1, #5
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	4401      	add	r1, r0
 8005c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d128      	bne.n	8005c98 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d110      	bne.n	8005c78 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00f      	b.n	8005c98 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	1ff80000 	.word	0x1ff80000

08005cc8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f040 80ab 	bne.w	8005e3c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d132      	bne.n	8005d54 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	0cdb      	lsrs	r3, r3, #19
 8005d4e:	04db      	lsls	r3, r3, #19
 8005d50:	6113      	str	r3, [r2, #16]
 8005d52:	e04e      	b.n	8005df2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	0cdb      	lsrs	r3, r3, #19
 8005d70:	04db      	lsls	r3, r3, #19
 8005d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	0148      	lsls	r0, r1, #5
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	4401      	add	r1, r0
 8005dea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dee:	4313      	orrs	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e10:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d06d      	beq.n	8005ef6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e36:	4313      	orrs	r3, r2
 8005e38:	634b      	str	r3, [r1, #52]	; 0x34
 8005e3a:	e05c      	b.n	8005ef6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e56:	0cdb      	lsrs	r3, r3, #19
 8005e58:	04db      	lsls	r3, r3, #19
 8005e5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e7e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	0148      	lsls	r0, r1, #5
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	4401      	add	r1, r0
 8005ece:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b089      	sub	sp, #36	; 0x24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	460b      	mov	r3, r1
 8005f14:	71fb      	strb	r3, [r7, #7]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	3303      	adds	r3, #3
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e018      	b.n	8005f62 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	031a      	lsls	r2, r3, #12
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3e2      	bcc.n	8005f30 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3724      	adds	r7, #36	; 0x24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b08b      	sub	sp, #44	; 0x2c
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	e014      	b.n	8005fce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	3301      	adds	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3e6      	bcc.n	8005fa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fd6:	8bfb      	ldrh	r3, [r7, #30]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01e      	beq.n	800601a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	701a      	strb	r2, [r3, #0]
      i++;
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	3301      	adds	r3, #1
 8006006:	623b      	str	r3, [r7, #32]
      pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800600e:	8bfb      	ldrh	r3, [r7, #30]
 8006010:	3b01      	subs	r3, #1
 8006012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006014:	8bfb      	ldrh	r3, [r7, #30]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ea      	bne.n	8005ff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800601c:	4618      	mov	r0, r3
 800601e:	372c      	adds	r7, #44	; 0x2c
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d12c      	bne.n	800609e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db12      	blt.n	800607c <USB_EPSetStall+0x54>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800607a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e02b      	b.n	80060f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	db12      	blt.n	80060d6 <USB_EPSetStall+0xae>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00f      	beq.n	80060d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d128      	bne.n	8006172 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800613e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d003      	beq.n	8006150 <USB_EPClearStall+0x4c>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d138      	bne.n	80061c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e027      	b.n	80061c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006190:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	78db      	ldrb	r3, [r3, #3]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d003      	beq.n	80061a2 <USB_EPClearStall+0x9e>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d10f      	bne.n	80061c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620a:	4313      	orrs	r3, r2
 800620c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624a:	f023 0302 	bic.w	r3, r3, #2
 800624e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628c:	f043 0302 	orr.w	r3, r3, #2
 8006290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062b8:	68fb      	ldr	r3, [r7, #12]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	0c1b      	lsrs	r3, r3, #16
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	b29b      	uxth	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	4013      	ands	r3, r2
 800635a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800635c:	68bb      	ldr	r3, [r7, #8]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800636a:	b480      	push	{r7}
 800636c:	b087      	sub	sp, #28
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	01db      	lsls	r3, r3, #7
 800639c:	b2db      	uxtb	r3, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b8:	68bb      	ldr	r3, [r7, #8]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0301 	and.w	r3, r3, #1
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	333c      	adds	r3, #60	; 0x3c
 800643a:	3304      	adds	r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <USB_EP0_OutStart+0x8c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d90a      	bls.n	800645e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006458:	d101      	bne.n	800645e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e024      	b.n	80064a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800647c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f043 0318 	orr.w	r3, r3, #24
 8006490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	4f54300a 	.word	0x4f54300a

080064b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <USB_CoreReset+0x60>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e01a      	b.n	800650a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	daf3      	bge.n	80064c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f043 0201 	orr.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	4a09      	ldr	r2, [pc, #36]	; (8006518 <USB_CoreReset+0x60>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e006      	b.n	800650a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d0f1      	beq.n	80064ec <USB_CoreReset+0x34>

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	00030d40 	.word	0x00030d40

0800651c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006528:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800652c:	f007 ff70 	bl	800e410 <USBD_static_malloc>
 8006530:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006540:	2302      	movs	r3, #2
 8006542:	e066      	b.n	8006612 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7c1b      	ldrb	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006558:	2202      	movs	r2, #2
 800655a:	2181      	movs	r1, #129	; 0x81
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f007 fd91 	bl	800e084 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656c:	2202      	movs	r2, #2
 800656e:	2101      	movs	r1, #1
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f007 fd87 	bl	800e084 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2210      	movs	r2, #16
 8006582:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006586:	e016      	b.n	80065b6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	2202      	movs	r2, #2
 800658c:	2181      	movs	r1, #129	; 0x81
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f007 fd78 	bl	800e084 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	2202      	movs	r2, #2
 800659e:	2101      	movs	r1, #1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f007 fd6f 	bl	800e084 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2210      	movs	r2, #16
 80065b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065b6:	2308      	movs	r3, #8
 80065b8:	2203      	movs	r2, #3
 80065ba:	2182      	movs	r1, #130	; 0x82
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f007 fd61 	bl	800e084 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	7c1b      	ldrb	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f6:	2101      	movs	r1, #1
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f007 febd 	bl	800e378 <USBD_LL_PrepareReceive>
 80065fe:	e007      	b.n	8006610 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	2101      	movs	r1, #1
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f007 feb4 	bl	800e378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006626:	2181      	movs	r1, #129	; 0x81
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f007 fd69 	bl	800e100 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006634:	2101      	movs	r1, #1
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f007 fd62 	bl	800e100 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006644:	2182      	movs	r1, #130	; 0x82
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f007 fd5a 	bl	800e100 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006676:	4618      	mov	r0, r3
 8006678:	f007 fed8 	bl	800e42c <USBD_static_free>
    pdev->pClassData = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e0af      	b.n	8006818 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d03f      	beq.n	8006744 <USBD_CDC_Setup+0xb4>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	f040 809f 	bne.w	8006808 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02e      	beq.n	8006730 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	b25b      	sxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da16      	bge.n	800670a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80066e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	88d2      	ldrh	r2, [r2, #6]
 80066ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	88db      	ldrh	r3, [r3, #6]
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	bf28      	it	cs
 80066f8:	2307      	movcs	r3, #7
 80066fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	89fa      	ldrh	r2, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fb19 	bl	8007d3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006708:	e085      	b.n	8006816 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	785a      	ldrb	r2, [r3, #1]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	88db      	ldrh	r3, [r3, #6]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006720:	6939      	ldr	r1, [r7, #16]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88db      	ldrh	r3, [r3, #6]
 8006726:	461a      	mov	r2, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fb32 	bl	8007d92 <USBD_CtlPrepareRx>
      break;
 800672e:	e072      	b.n	8006816 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	7850      	ldrb	r0, [r2, #1]
 800673c:	2200      	movs	r2, #0
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	4798      	blx	r3
      break;
 8006742:	e068      	b.n	8006816 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b0b      	cmp	r3, #11
 800674a:	d852      	bhi.n	80067f2 <USBD_CDC_Setup+0x162>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USBD_CDC_Setup+0xc4>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006785 	.word	0x08006785
 8006758:	08006801 	.word	0x08006801
 800675c:	080067f3 	.word	0x080067f3
 8006760:	080067f3 	.word	0x080067f3
 8006764:	080067f3 	.word	0x080067f3
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067f3 	.word	0x080067f3
 8006770:	080067f3 	.word	0x080067f3
 8006774:	080067f3 	.word	0x080067f3
 8006778:	080067f3 	.word	0x080067f3
 800677c:	080067af 	.word	0x080067af
 8006780:	080067d9 	.word	0x080067d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d107      	bne.n	80067a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006790:	f107 030a 	add.w	r3, r7, #10
 8006794:	2202      	movs	r2, #2
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 face 	bl	8007d3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800679e:	e032      	b.n	8006806 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fa58 	bl	8007c58 <USBD_CtlError>
            ret = USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	75fb      	strb	r3, [r7, #23]
          break;
 80067ac:	e02b      	b.n	8006806 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d107      	bne.n	80067ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ba:	f107 030d 	add.w	r3, r7, #13
 80067be:	2201      	movs	r2, #1
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fab9 	bl	8007d3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067c8:	e01d      	b.n	8006806 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fa43 	bl	8007c58 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	75fb      	strb	r3, [r7, #23]
          break;
 80067d6:	e016      	b.n	8006806 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d00f      	beq.n	8006804 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fa36 	bl	8007c58 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067f0:	e008      	b.n	8006804 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fa2f 	bl	8007c58 <USBD_CtlError>
          ret = USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	75fb      	strb	r3, [r7, #23]
          break;
 80067fe:	e002      	b.n	8006806 <USBD_CDC_Setup+0x176>
          break;
 8006800:	bf00      	nop
 8006802:	e008      	b.n	8006816 <USBD_CDC_Setup+0x186>
          break;
 8006804:	bf00      	nop
      }
      break;
 8006806:	e006      	b.n	8006816 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fa24 	bl	8007c58 <USBD_CtlError>
      ret = USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	75fb      	strb	r3, [r7, #23]
      break;
 8006814:	bf00      	nop
  }

  return (uint8_t)ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800683e:	2303      	movs	r3, #3
 8006840:	e04f      	b.n	80068e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006848:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	3318      	adds	r3, #24
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d029      	beq.n	80068b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3318      	adds	r3, #24
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	78f9      	ldrb	r1, [r7, #3]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	460b      	mov	r3, r1
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	1a5b      	subs	r3, r3, r1
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4403      	add	r3, r0
 8006880:	3344      	adds	r3, #68	; 0x44
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	fbb2 f1f3 	udiv	r1, r2, r3
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800688e:	2b00      	cmp	r3, #0
 8006890:	d110      	bne.n	80068b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3318      	adds	r3, #24
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068a6:	78f9      	ldrb	r1, [r7, #3]
 80068a8:	2300      	movs	r3, #0
 80068aa:	2200      	movs	r2, #0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f007 fd2b 	bl	800e308 <USBD_LL_Transmit>
 80068b2:	e015      	b.n	80068e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e015      	b.n	8006938 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f007 fd69 	bl	800e3e8 <USBD_LL_GetRxDataSize>
 8006916:	4602      	mov	r2, r0
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006932:	4611      	mov	r1, r2
 8006934:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	e01b      	b.n	8006992 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d015      	beq.n	8006990 <USBD_CDC_EP0_RxReady+0x50>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d010      	beq.n	8006990 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800697c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006984:	b292      	uxth	r2, r2
 8006986:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22ff      	movs	r2, #255	; 0xff
 800698c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2243      	movs	r2, #67	; 0x43
 80069a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069aa:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	20000090 	.word	0x20000090

080069bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2243      	movs	r2, #67	; 0x43
 80069c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069ca:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	2000004c 	.word	0x2000004c

080069dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2243      	movs	r2, #67	; 0x43
 80069e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80069ea:	4b03      	ldr	r3, [pc, #12]	; (80069f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	200000d4 	.word	0x200000d4

080069fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	220a      	movs	r2, #10
 8006a08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a0a:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20000008 	.word	0x20000008

08006a1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e004      	b.n	8006a3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e008      	b.n	8006a76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e004      	b.n	8006aa8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e01a      	b.n	8006b0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d114      	bne.n	8006b0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006afe:	2181      	movs	r1, #129	; 0x81
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f007 fc01 	bl	800e308 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e016      	b.n	8006b60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7c1b      	ldrb	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b44:	2101      	movs	r1, #1
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f007 fc16 	bl	800e378 <USBD_LL_PrepareReceive>
 8006b4c:	e007      	b.n	8006b5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	2101      	movs	r1, #1
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f007 fc0d 	bl	800e378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e01f      	b.n	8006bc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	79fa      	ldrb	r2, [r7, #7]
 8006bb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f007 f9e7 	bl	800df88 <USBD_LL_Init>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e016      	b.n	8006c0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	f107 020e 	add.w	r2, r7, #14
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	4602      	mov	r2, r0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f007 f9fe 	bl	800e020 <USBD_LL_Start>
 8006c24:	4603      	mov	r3, r0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 ff90 	bl	8007be4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d01a      	beq.n	8006d1e <USBD_LL_SetupStage+0x72>
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d822      	bhi.n	8006d32 <USBD_LL_SetupStage+0x86>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <USBD_LL_SetupStage+0x4a>
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d00a      	beq.n	8006d0a <USBD_LL_SetupStage+0x5e>
 8006cf4:	e01d      	b.n	8006d32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa62 	bl	80071c8 <USBD_StdDevReq>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
      break;
 8006d08:	e020      	b.n	8006d4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fac6 	bl	80072a4 <USBD_StdItfReq>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1c:	e016      	b.n	8006d4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb05 	bl	8007336 <USBD_StdEPReq>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e00c      	b.n	8006d4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f007 fa13 	bl	800e16c <USBD_LL_StallEP>
 8006d46:	4603      	mov	r3, r0
 8006d48:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4a:	bf00      	nop
  }

  return ret;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d138      	bne.n	8006ddc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d14a      	bne.n	8006e12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d913      	bls.n	8006db0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bf28      	it	cs
 8006da2:	4613      	movcs	r3, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f001 f80f 	bl	8007dcc <USBD_CtlContinueRx>
 8006dae:	e030      	b.n	8006e12 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d10b      	bne.n	8006dd4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 f80a 	bl	8007dee <USBD_CtlSendStatus>
 8006dda:	e01a      	b.n	8006e12 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d114      	bne.n	8006e12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00e      	beq.n	8006e12 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	7afa      	ldrb	r2, [r7, #11]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	e000      	b.n	8006e14 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	460b      	mov	r3, r1
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d16b      	bne.n	8006f08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3314      	adds	r3, #20
 8006e34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d156      	bne.n	8006eee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d914      	bls.n	8006e76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 ff84 	bl	8007d70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f007 fa82 	bl	800e378 <USBD_LL_PrepareReceive>
 8006e74:	e03b      	b.n	8006eee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d11c      	bne.n	8006ebc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d316      	bcc.n	8006ebc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d20f      	bcs.n	8006ebc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 ff65 	bl	8007d70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f007 fa5f 	bl	800e378 <USBD_LL_PrepareReceive>
 8006eba:	e018      	b.n	8006eee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d10b      	bne.n	8006ee0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f007 f942 	bl	800e16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 ff93 	bl	8007e14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d122      	bne.n	8006f3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fe98 	bl	8006c2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f06:	e01a      	b.n	8006f3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d114      	bne.n	8006f3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	7afa      	ldrb	r2, [r7, #11]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	4798      	blx	r3
 8006f30:	4603      	mov	r3, r0
 8006f32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	e000      	b.n	8006f40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e02f      	b.n	8006fdc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00f      	beq.n	8006fa6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6852      	ldr	r2, [r2, #4]
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f007 f869 	bl	800e084 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2240      	movs	r2, #64	; 0x40
 8006fbe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fc2:	2340      	movs	r3, #64	; 0x40
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f007 f85b 	bl	800e084 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2240      	movs	r2, #64	; 0x40
 8006fd8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2da      	uxtb	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b04      	cmp	r3, #4
 8007042:	d106      	bne.n	8007052 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	e012      	b.n	800709c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d10b      	bne.n	800709a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e014      	b.n	80070e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d10d      	bne.n	80070e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	4611      	mov	r1, r2
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	e014      	b.n	8007134 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b03      	cmp	r3, #3
 8007114:	d10d      	bne.n	8007132 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6852      	ldr	r2, [r2, #4]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	4611      	mov	r1, r2
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
  }

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3301      	adds	r3, #1
 80071a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071a8:	8a3b      	ldrh	r3, [r7, #16]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	b21a      	sxth	r2, r3
 80071ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071b8:	89fb      	ldrh	r3, [r7, #14]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d005      	beq.n	80071ee <USBD_StdDevReq+0x26>
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d853      	bhi.n	800728e <USBD_StdDevReq+0xc6>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <USBD_StdDevReq+0x3a>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d14f      	bne.n	800728e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	e04a      	b.n	8007298 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b09      	cmp	r3, #9
 8007208:	d83b      	bhi.n	8007282 <USBD_StdDevReq+0xba>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <USBD_StdDevReq+0x48>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007265 	.word	0x08007265
 8007214:	08007279 	.word	0x08007279
 8007218:	08007283 	.word	0x08007283
 800721c:	0800726f 	.word	0x0800726f
 8007220:	08007283 	.word	0x08007283
 8007224:	08007243 	.word	0x08007243
 8007228:	08007239 	.word	0x08007239
 800722c:	08007283 	.word	0x08007283
 8007230:	0800725b 	.word	0x0800725b
 8007234:	0800724d 	.word	0x0800724d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9de 	bl	80075fc <USBD_GetDescriptor>
          break;
 8007240:	e024      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fb43 	bl	80078d0 <USBD_SetAddress>
          break;
 800724a:	e01f      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fb82 	bl	8007958 <USBD_SetConfig>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
          break;
 8007258:	e018      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc21 	bl	8007aa4 <USBD_GetConfig>
          break;
 8007262:	e013      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc52 	bl	8007b10 <USBD_GetStatus>
          break;
 800726c:	e00e      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc81 	bl	8007b78 <USBD_SetFeature>
          break;
 8007276:	e009      	b.n	800728c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fc90 	bl	8007ba0 <USBD_ClrFeature>
          break;
 8007280:	e004      	b.n	800728c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fce7 	bl	8007c58 <USBD_CtlError>
          break;
 800728a:	bf00      	nop
      }
      break;
 800728c:	e004      	b.n	8007298 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fce1 	bl	8007c58 <USBD_CtlError>
      break;
 8007296:	bf00      	nop
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop

080072a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d005      	beq.n	80072ca <USBD_StdItfReq+0x26>
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d82f      	bhi.n	8007322 <USBD_StdItfReq+0x7e>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <USBD_StdItfReq+0x26>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d12b      	bne.n	8007322 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d81d      	bhi.n	8007314 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	889b      	ldrh	r3, [r3, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d813      	bhi.n	800730a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	88db      	ldrh	r3, [r3, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d110      	bne.n	800731e <USBD_StdItfReq+0x7a>
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10d      	bne.n	800731e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fd73 	bl	8007dee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007308:	e009      	b.n	800731e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fca3 	bl	8007c58 <USBD_CtlError>
          break;
 8007312:	e004      	b.n	800731e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc9e 	bl	8007c58 <USBD_CtlError>
          break;
 800731c:	e000      	b.n	8007320 <USBD_StdItfReq+0x7c>
          break;
 800731e:	bf00      	nop
      }
      break;
 8007320:	e004      	b.n	800732c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc97 	bl	8007c58 <USBD_CtlError>
      break;
 800732a:	bf00      	nop
  }

  return ret;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	889b      	ldrh	r3, [r3, #4]
 8007348:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d007      	beq.n	8007366 <USBD_StdEPReq+0x30>
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	f200 8145 	bhi.w	80075e6 <USBD_StdEPReq+0x2b0>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <USBD_StdEPReq+0x44>
 8007360:	2b20      	cmp	r3, #32
 8007362:	f040 8140 	bne.w	80075e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e13a      	b.n	80075f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d007      	beq.n	8007392 <USBD_StdEPReq+0x5c>
 8007382:	2b03      	cmp	r3, #3
 8007384:	f300 8129 	bgt.w	80075da <USBD_StdEPReq+0x2a4>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d07f      	beq.n	800748c <USBD_StdEPReq+0x156>
 800738c:	2b01      	cmp	r3, #1
 800738e:	d03c      	beq.n	800740a <USBD_StdEPReq+0xd4>
 8007390:	e123      	b.n	80075da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d002      	beq.n	80073a4 <USBD_StdEPReq+0x6e>
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d016      	beq.n	80073d0 <USBD_StdEPReq+0x9a>
 80073a2:	e02c      	b.n	80073fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00d      	beq.n	80073c6 <USBD_StdEPReq+0x90>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d00a      	beq.n	80073c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f006 fed9 	bl	800e16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f006 fed5 	bl	800e16c <USBD_LL_StallEP>
 80073c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c4:	e020      	b.n	8007408 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc45 	bl	8007c58 <USBD_CtlError>
              break;
 80073ce:	e01b      	b.n	8007408 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	885b      	ldrh	r3, [r3, #2]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10e      	bne.n	80073f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <USBD_StdEPReq+0xc0>
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b80      	cmp	r3, #128	; 0x80
 80073e2:	d008      	beq.n	80073f6 <USBD_StdEPReq+0xc0>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	88db      	ldrh	r3, [r3, #6]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f006 febb 	bl	800e16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fcf9 	bl	8007dee <USBD_CtlSendStatus>

              break;
 80073fc:	e004      	b.n	8007408 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fc29 	bl	8007c58 <USBD_CtlError>
              break;
 8007406:	bf00      	nop
          }
          break;
 8007408:	e0ec      	b.n	80075e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d002      	beq.n	800741c <USBD_StdEPReq+0xe6>
 8007416:	2b03      	cmp	r3, #3
 8007418:	d016      	beq.n	8007448 <USBD_StdEPReq+0x112>
 800741a:	e030      	b.n	800747e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00d      	beq.n	800743e <USBD_StdEPReq+0x108>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d00a      	beq.n	800743e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f006 fe9d 	bl	800e16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f006 fe99 	bl	800e16c <USBD_LL_StallEP>
 800743a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800743c:	e025      	b.n	800748a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc09 	bl	8007c58 <USBD_CtlError>
              break;
 8007446:	e020      	b.n	800748a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11b      	bne.n	8007488 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f006 feba 	bl	800e1d8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fcc2 	bl	8007dee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800747c:	e004      	b.n	8007488 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fbe9 	bl	8007c58 <USBD_CtlError>
              break;
 8007486:	e000      	b.n	800748a <USBD_StdEPReq+0x154>
              break;
 8007488:	bf00      	nop
          }
          break;
 800748a:	e0ab      	b.n	80075e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d002      	beq.n	800749e <USBD_StdEPReq+0x168>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d032      	beq.n	8007502 <USBD_StdEPReq+0x1cc>
 800749c:	e097      	b.n	80075ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <USBD_StdEPReq+0x17e>
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d004      	beq.n	80074b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbd3 	bl	8007c58 <USBD_CtlError>
                break;
 80074b2:	e091      	b.n	80075d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da0b      	bge.n	80074d4 <USBD_StdEPReq+0x19e>
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	3310      	adds	r3, #16
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	e00b      	b.n	80074ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	3304      	adds	r3, #4
 80074ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2202      	movs	r2, #2
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fc1d 	bl	8007d3a <USBD_CtlSendData>
              break;
 8007500:	e06a      	b.n	80075d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007506:	2b00      	cmp	r3, #0
 8007508:	da11      	bge.n	800752e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3324      	adds	r3, #36	; 0x24
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d117      	bne.n	8007554 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb96 	bl	8007c58 <USBD_CtlError>
                  break;
 800752c:	e054      	b.n	80075d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fb83 	bl	8007c58 <USBD_CtlError>
                  break;
 8007552:	e041      	b.n	80075d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007558:	2b00      	cmp	r3, #0
 800755a:	da0b      	bge.n	8007574 <USBD_StdEPReq+0x23e>
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	3310      	adds	r3, #16
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4413      	add	r3, r2
 8007570:	3304      	adds	r3, #4
 8007572:	e00b      	b.n	800758c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <USBD_StdEPReq+0x264>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d103      	bne.n	80075a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	e00e      	b.n	80075c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f006 fe4c 	bl	800e244 <USBD_LL_IsStallEP>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	e002      	b.n	80075c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2202      	movs	r2, #2
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fbb7 	bl	8007d3a <USBD_CtlSendData>
              break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb41 	bl	8007c58 <USBD_CtlError>
              break;
 80075d6:	bf00      	nop
          }
          break;
 80075d8:	e004      	b.n	80075e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fb3b 	bl	8007c58 <USBD_CtlError>
          break;
 80075e2:	bf00      	nop
      }
      break;
 80075e4:	e004      	b.n	80075f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb35 	bl	8007c58 <USBD_CtlError>
      break;
 80075ee:	bf00      	nop
  }

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	2b06      	cmp	r3, #6
 800761e:	f200 8128 	bhi.w	8007872 <USBD_GetDescriptor+0x276>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <USBD_GetDescriptor+0x2c>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007645 	.word	0x08007645
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800769d 	.word	0x0800769d
 8007634:	08007873 	.word	0x08007873
 8007638:	08007873 	.word	0x08007873
 800763c:	08007813 	.word	0x08007813
 8007640:	0800783f 	.word	0x0800783f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
      break;
 800765a:	e112      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	7c1b      	ldrb	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	f107 0208 	add.w	r2, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	2202      	movs	r2, #2
 800767c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800767e:	e100      	b.n	8007882 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	f107 0208 	add.w	r2, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e0f2      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	f200 80ac 	bhi.w	8007800 <USBD_GetDescriptor+0x204>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <USBD_GetDescriptor+0xb4>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076fd 	.word	0x080076fd
 80076b8:	08007731 	.word	0x08007731
 80076bc:	08007765 	.word	0x08007765
 80076c0:	08007799 	.word	0x08007799
 80076c4:	080077cd 	.word	0x080077cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e091      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fab2 	bl	8007c58 <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e089      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e077      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa98 	bl	8007c58 <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e06f      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e05d      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa7e 	bl	8007c58 <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e055      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e043      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa64 	bl	8007c58 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e03b      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e029      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa4a 	bl	8007c58 <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e021      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	f107 0108 	add.w	r1, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ee:	e00f      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa30 	bl	8007c58 <USBD_CtlError>
            err++;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	3301      	adds	r3, #1
 80077fc:	72fb      	strb	r3, [r7, #11]
          break;
 80077fe:	e007      	b.n	8007810 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa28 	bl	8007c58 <USBD_CtlError>
          err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800780e:	bf00      	nop
      }
      break;
 8007810:	e037      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7c1b      	ldrb	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	f107 0208 	add.w	r2, r7, #8
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
 800782a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800782c:	e029      	b.n	8007882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa11 	bl	8007c58 <USBD_CtlError>
        err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	e021      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7c1b      	ldrb	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10d      	bne.n	8007862 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	4610      	mov	r0, r2
 8007854:	4798      	blx	r3
 8007856:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	2207      	movs	r2, #7
 800785e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007860:	e00f      	b.n	8007882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f9f7 	bl	8007c58 <USBD_CtlError>
        err++;
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	3301      	adds	r3, #1
 800786e:	72fb      	strb	r3, [r7, #11]
      break;
 8007870:	e007      	b.n	8007882 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f9ef 	bl	8007c58 <USBD_CtlError>
      err++;
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	3301      	adds	r3, #1
 800787e:	72fb      	strb	r3, [r7, #11]
      break;
 8007880:	bf00      	nop
  }

  if (err != 0U)
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11e      	bne.n	80078c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	88db      	ldrh	r3, [r3, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d016      	beq.n	80078be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00e      	beq.n	80078b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88da      	ldrh	r2, [r3, #6]
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	4293      	cmp	r3, r2
 800789e:	bf28      	it	cs
 80078a0:	4613      	movcs	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	461a      	mov	r2, r3
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa44 	bl	8007d3a <USBD_CtlSendData>
 80078b2:	e009      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9ce 	bl	8007c58 <USBD_CtlError>
 80078bc:	e004      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa95 	bl	8007dee <USBD_CtlSendStatus>
 80078c4:	e000      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    return;
 80078c6:	bf00      	nop
  }
}
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	889b      	ldrh	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d131      	bne.n	8007946 <USBD_SetAddress+0x76>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	88db      	ldrh	r3, [r3, #6]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d12d      	bne.n	8007946 <USBD_SetAddress+0x76>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	2b7f      	cmp	r3, #127	; 0x7f
 80078f0:	d829      	bhi.n	8007946 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d104      	bne.n	8007914 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9a3 	bl	8007c58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007912:	e01d      	b.n	8007950 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7bfa      	ldrb	r2, [r7, #15]
 8007918:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f006 fcbb 	bl	800e29c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa61 	bl	8007dee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	e009      	b.n	8007950 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007944:	e004      	b.n	8007950 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f985 	bl	8007c58 <USBD_CtlError>
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	4b4c      	ldr	r3, [pc, #304]	; (8007aa0 <USBD_SetConfig+0x148>)
 800796e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007970:	4b4b      	ldr	r3, [pc, #300]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d905      	bls.n	8007984 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f96c 	bl	8007c58 <USBD_CtlError>
    return USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	e088      	b.n	8007a96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d002      	beq.n	8007996 <USBD_SetConfig+0x3e>
 8007990:	2b03      	cmp	r3, #3
 8007992:	d025      	beq.n	80079e0 <USBD_SetConfig+0x88>
 8007994:	e071      	b.n	8007a7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007996:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01c      	beq.n	80079d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800799e:	4b40      	ldr	r3, [pc, #256]	; (8007aa0 <USBD_SetConfig+0x148>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079a8:	4b3d      	ldr	r3, [pc, #244]	; (8007aa0 <USBD_SetConfig+0x148>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f948 	bl	8006c44 <USBD_SetClassConfig>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f949 	bl	8007c58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079c6:	e065      	b.n	8007a94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa10 	bl	8007dee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079d6:	e05d      	b.n	8007a94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa08 	bl	8007dee <USBD_CtlSendStatus>
      break;
 80079de:	e059      	b.n	8007a94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079e0:	4b2f      	ldr	r3, [pc, #188]	; (8007aa0 <USBD_SetConfig+0x148>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d112      	bne.n	8007a0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079f0:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <USBD_SetConfig+0x148>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <USBD_SetConfig+0x148>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff f93b 	bl	8006c7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f9f1 	bl	8007dee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a0c:	e042      	b.n	8007a94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a0e:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d02a      	beq.n	8007a72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff f929 	bl	8006c7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff f902 	bl	8006c44 <USBD_SetClassConfig>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f903 	bl	8007c58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff f90e 	bl	8006c7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a68:	e014      	b.n	8007a94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9bf 	bl	8007dee <USBD_CtlSendStatus>
      break;
 8007a70:	e010      	b.n	8007a94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9bb 	bl	8007dee <USBD_CtlSendStatus>
      break;
 8007a78:	e00c      	b.n	8007a94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8eb 	bl	8007c58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <USBD_SetConfig+0x148>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff f8f7 	bl	8006c7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
      break;
 8007a92:	bf00      	nop
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000210 	.word	0x20000210

08007aa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88db      	ldrh	r3, [r3, #6]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d004      	beq.n	8007ac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8cd 	bl	8007c58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007abe:	e023      	b.n	8007b08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	dc02      	bgt.n	8007ad2 <USBD_GetConfig+0x2e>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dc03      	bgt.n	8007ad8 <USBD_GetConfig+0x34>
 8007ad0:	e015      	b.n	8007afe <USBD_GetConfig+0x5a>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d00b      	beq.n	8007aee <USBD_GetConfig+0x4a>
 8007ad6:	e012      	b.n	8007afe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f927 	bl	8007d3a <USBD_CtlSendData>
        break;
 8007aec:	e00c      	b.n	8007b08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f91f 	bl	8007d3a <USBD_CtlSendData>
        break;
 8007afc:	e004      	b.n	8007b08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8a9 	bl	8007c58 <USBD_CtlError>
        break;
 8007b06:	bf00      	nop
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d81e      	bhi.n	8007b66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d004      	beq.n	8007b3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f890 	bl	8007c58 <USBD_CtlError>
        break;
 8007b38:	e01a      	b.n	8007b70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f043 0202 	orr.w	r2, r3, #2
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8eb 	bl	8007d3a <USBD_CtlSendData>
      break;
 8007b64:	e004      	b.n	8007b70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f875 	bl	8007c58 <USBD_CtlError>
      break;
 8007b6e:	bf00      	nop
  }
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	885b      	ldrh	r3, [r3, #2]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d106      	bne.n	8007b98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f92b 	bl	8007dee <USBD_CtlSendStatus>
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d80b      	bhi.n	8007bd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	885b      	ldrh	r3, [r3, #2]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10c      	bne.n	8007bda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f910 	bl	8007dee <USBD_CtlSendStatus>
      }
      break;
 8007bce:	e004      	b.n	8007bda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f840 	bl	8007c58 <USBD_CtlError>
      break;
 8007bd8:	e000      	b.n	8007bdc <USBD_ClrFeature+0x3c>
      break;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	781a      	ldrb	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fabb 	bl	800718a <SWAPBYTE>
 8007c14:	4603      	mov	r3, r0
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff faae 	bl	800718a <SWAPBYTE>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	461a      	mov	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff faa1 	bl	800718a <SWAPBYTE>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	80da      	strh	r2, [r3, #6]
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c62:	2180      	movs	r1, #128	; 0x80
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f006 fa81 	bl	800e16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f006 fa7d 	bl	800e16c <USBD_LL_StallEP>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d036      	beq.n	8007cfe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c94:	6938      	ldr	r0, [r7, #16]
 8007c96:	f000 f836 	bl	8007d06 <USBD_GetLen>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4413      	add	r3, r2
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	7812      	ldrb	r2, [r2, #0]
 8007cb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cca:	e013      	b.n	8007cf4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	7812      	ldrb	r2, [r2, #0]
 8007cd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	613b      	str	r3, [r7, #16]
    idx++;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e7      	bne.n	8007ccc <USBD_GetString+0x52>
 8007cfc:	e000      	b.n	8007d00 <USBD_GetString+0x86>
    return;
 8007cfe:	bf00      	nop
  }
}
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d16:	e005      	b.n	8007d24 <USBD_GetLen+0x1e>
  {
    len++;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f5      	bne.n	8007d18 <USBD_GetLen+0x12>
  }

  return len;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f006 fad1 	bl	800e308 <USBD_LL_Transmit>

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	2100      	movs	r1, #0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f006 fac0 	bl	800e308 <USBD_LL_Transmit>

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2203      	movs	r2, #3
 8007da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f006 fadb 	bl	800e378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f006 faca 	bl	800e378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2204      	movs	r2, #4
 8007dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f006 fa7f 	bl	800e308 <USBD_LL_Transmit>

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e24:	2300      	movs	r3, #0
 8007e26:	2200      	movs	r2, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f006 faa4 	bl	800e378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <__NVIC_SetPriority>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	db0a      	blt.n	8007e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	490c      	ldr	r1, [pc, #48]	; (8007e88 <__NVIC_SetPriority+0x4c>)
 8007e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5a:	0112      	lsls	r2, r2, #4
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	440b      	add	r3, r1
 8007e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e64:	e00a      	b.n	8007e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4908      	ldr	r1, [pc, #32]	; (8007e8c <__NVIC_SetPriority+0x50>)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	3b04      	subs	r3, #4
 8007e74:	0112      	lsls	r2, r2, #4
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	440b      	add	r3, r1
 8007e7a:	761a      	strb	r2, [r3, #24]
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	e000e100 	.word	0xe000e100
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <SysTick_Handler+0x1c>)
 8007e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e98:	f003 f81a 	bl	800aed0 <xTaskGetSchedulerState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d001      	beq.n	8007ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ea2:	f004 f929 	bl	800c0f8 <xPortSysTickHandler>
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	e000e010 	.word	0xe000e010

08007eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	f06f 0004 	mvn.w	r0, #4
 8007eba:	f7ff ffbf 	bl	8007e3c <__NVIC_SetPriority>
#endif
}
 8007ebe:	bf00      	nop
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eca:	f3ef 8305 	mrs	r3, IPSR
 8007ece:	603b      	str	r3, [r7, #0]
  return(result);
 8007ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ed6:	f06f 0305 	mvn.w	r3, #5
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	e00c      	b.n	8007ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <osKernelInitialize+0x44>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d105      	bne.n	8007ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <osKernelInitialize+0x44>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	e002      	b.n	8007ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ef8:	687b      	ldr	r3, [r7, #4]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000214 	.word	0x20000214

08007f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f12:	f3ef 8305 	mrs	r3, IPSR
 8007f16:	603b      	str	r3, [r7, #0]
  return(result);
 8007f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f1e:	f06f 0305 	mvn.w	r3, #5
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	e010      	b.n	8007f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <osKernelStart+0x48>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d109      	bne.n	8007f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f2e:	f7ff ffbf 	bl	8007eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f32:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <osKernelStart+0x48>)
 8007f34:	2202      	movs	r2, #2
 8007f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f38:	f002 fb38 	bl	800a5ac <vTaskStartScheduler>
      stat = osOK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e002      	b.n	8007f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295
 8007f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f48:	687b      	ldr	r3, [r7, #4]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000214 	.word	0x20000214

08007f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08e      	sub	sp, #56	; 0x38
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f68:	f3ef 8305 	mrs	r3, IPSR
 8007f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d17e      	bne.n	8008072 <osThreadNew+0x11a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d07b      	beq.n	8008072 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f7a:	2380      	movs	r3, #128	; 0x80
 8007f7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f7e:	2318      	movs	r3, #24
 8007f80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d045      	beq.n	800801e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <osThreadNew+0x48>
        name = attr->name;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d008      	beq.n	8007fc6 <osThreadNew+0x6e>
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	2b38      	cmp	r3, #56	; 0x38
 8007fb8:	d805      	bhi.n	8007fc6 <osThreadNew+0x6e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <osThreadNew+0x72>
        return (NULL);
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e054      	b.n	8008074 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	089b      	lsrs	r3, r3, #2
 8007fd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <osThreadNew+0xa8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	2bbb      	cmp	r3, #187	; 0xbb
 8007fe8:	d90a      	bls.n	8008000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <osThreadNew+0xa8>
        mem = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e010      	b.n	8008022 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10c      	bne.n	8008022 <osThreadNew+0xca>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d108      	bne.n	8008022 <osThreadNew+0xca>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <osThreadNew+0xca>
          mem = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	e001      	b.n	8008022 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d110      	bne.n	800804a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008030:	9202      	str	r2, [sp, #8]
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f002 f8c7 	bl	800a1d2 <xTaskCreateStatic>
 8008044:	4603      	mov	r3, r0
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	e013      	b.n	8008072 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d110      	bne.n	8008072 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	b29a      	uxth	r2, r3
 8008054:	f107 0310 	add.w	r3, r7, #16
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f002 f912 	bl	800a28c <xTaskCreate>
 8008068:	4603      	mov	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d001      	beq.n	8008072 <osThreadNew+0x11a>
            hTask = NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008072:	693b      	ldr	r3, [r7, #16]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af02      	add	r7, sp, #8
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <osThreadFlagsSet+0x1a>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	da03      	bge.n	800809e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008096:	f06f 0303 	mvn.w	r3, #3
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e035      	b.n	800810a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080a4:	f3ef 8305 	mrs	r3, IPSR
 80080a8:	613b      	str	r3, [r7, #16]
  return(result);
 80080aa:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01f      	beq.n	80080f0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	2201      	movs	r2, #1
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6978      	ldr	r0, [r7, #20]
 80080c2:	f003 f9ad 	bl	800b420 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80080c6:	f107 030c 	add.w	r3, r7, #12
 80080ca:	2200      	movs	r2, #0
 80080cc:	9200      	str	r2, [sp, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	6978      	ldr	r0, [r7, #20]
 80080d4:	f003 f9a4 	bl	800b420 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d015      	beq.n	800810a <osThreadFlagsSet+0x8e>
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <osThreadFlagsSet+0x98>)
 80080e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	e00c      	b.n	800810a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80080f0:	2300      	movs	r3, #0
 80080f2:	2201      	movs	r2, #1
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6978      	ldr	r0, [r7, #20]
 80080f8:	f003 f8d4 	bl	800b2a4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80080fc:	f107 030c 	add.w	r3, r7, #12
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	6978      	ldr	r0, [r7, #20]
 8008106:	f003 f8cd 	bl	800b2a4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800810a:	68fb      	ldr	r3, [r7, #12]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b08c      	sub	sp, #48	; 0x30
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008124:	f3ef 8305 	mrs	r3, IPSR
 8008128:	617b      	str	r3, [r7, #20]
  return(result);
 800812a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008130:	f06f 0305 	mvn.w	r3, #5
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008136:	e06b      	b.n	8008210 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	da03      	bge.n	8008146 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800813e:	f06f 0303 	mvn.w	r3, #3
 8008142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008144:	e064      	b.n	8008210 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
 8008154:	e001      	b.n	800815a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008162:	f002 fb3f 	bl	800a7e4 <xTaskGetTickCount>
 8008166:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008168:	f107 0210 	add.w	r2, r7, #16
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008170:	2000      	movs	r0, #0
 8008172:	f003 f837 	bl	800b1e4 <xTaskNotifyWait>
 8008176:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d137      	bne.n	80081ee <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4013      	ands	r3, r2
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	4313      	orrs	r3, r2
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00c      	beq.n	80081b2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	4013      	ands	r3, r2
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d032      	beq.n	800820a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80081aa:	f06f 0302 	mvn.w	r3, #2
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80081b0:	e02e      	b.n	8008210 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	4013      	ands	r3, r2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d128      	bne.n	800820e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80081c2:	f06f 0302 	mvn.w	r3, #2
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80081c8:	e022      	b.n	8008210 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80081ca:	f002 fb0b 	bl	800a7e4 <xTaskGetTickCount>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	429a      	cmp	r2, r3
 80081dc:	d902      	bls.n	80081e4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
 80081e2:	e00e      	b.n	8008202 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
 80081ec:	e009      	b.n	8008202 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80081f4:	f06f 0302 	mvn.w	r3, #2
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081fa:	e002      	b.n	8008202 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80081fc:	f06f 0301 	mvn.w	r3, #1
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1af      	bne.n	8008168 <osThreadFlagsWait+0x50>
 8008208:	e002      	b.n	8008210 <osThreadFlagsWait+0xf8>
            break;
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <osThreadFlagsWait+0xf8>
            break;
 800820e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008212:	4618      	mov	r0, r3
 8008214:	3730      	adds	r7, #48	; 0x30
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	60bb      	str	r3, [r7, #8]
  return(result);
 8008228:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <osDelay+0x1c>
    stat = osErrorISR;
 800822e:	f06f 0305 	mvn.w	r3, #5
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e007      	b.n	8008246 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f002 f97f 	bl	800a544 <vTaskDelay>
    }
  }

  return (stat);
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	; 0x28
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008260:	f3ef 8305 	mrs	r3, IPSR
 8008264:	613b      	str	r3, [r7, #16]
  return(result);
 8008266:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008268:	2b00      	cmp	r3, #0
 800826a:	d175      	bne.n	8008358 <osSemaphoreNew+0x108>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d072      	beq.n	8008358 <osSemaphoreNew+0x108>
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d86e      	bhi.n	8008358 <osSemaphoreNew+0x108>
    mem = -1;
 800827a:	f04f 33ff 	mov.w	r3, #4294967295
 800827e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d015      	beq.n	80082b2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <osSemaphoreNew+0x4c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b4f      	cmp	r3, #79	; 0x4f
 8008294:	d902      	bls.n	800829c <osSemaphoreNew+0x4c>
        mem = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	61bb      	str	r3, [r7, #24]
 800829a:	e00c      	b.n	80082b6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <osSemaphoreNew+0x66>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <osSemaphoreNew+0x66>
          mem = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e001      	b.n	80082b6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d04c      	beq.n	8008358 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d128      	bne.n	8008316 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10a      	bne.n	80082e0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2203      	movs	r2, #3
 80082d0:	9200      	str	r2, [sp, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	2001      	movs	r0, #1
 80082d8:	f000 fb7c 	bl	80089d4 <xQueueGenericCreateStatic>
 80082dc:	61f8      	str	r0, [r7, #28]
 80082de:	e005      	b.n	80082ec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80082e0:	2203      	movs	r2, #3
 80082e2:	2100      	movs	r1, #0
 80082e4:	2001      	movs	r0, #1
 80082e6:	f000 fbed 	bl	8008ac4 <xQueueGenericCreate>
 80082ea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d022      	beq.n	8008338 <osSemaphoreNew+0xe8>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01f      	beq.n	8008338 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082f8:	2300      	movs	r3, #0
 80082fa:	2200      	movs	r2, #0
 80082fc:	2100      	movs	r1, #0
 80082fe:	69f8      	ldr	r0, [r7, #28]
 8008300:	f000 fca8 	bl	8008c54 <xQueueGenericSend>
 8008304:	4603      	mov	r3, r0
 8008306:	2b01      	cmp	r3, #1
 8008308:	d016      	beq.n	8008338 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800830a:	69f8      	ldr	r0, [r7, #28]
 800830c:	f001 f970 	bl	80095f0 <vQueueDelete>
            hSemaphore = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	e010      	b.n	8008338 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d108      	bne.n	800832e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	461a      	mov	r2, r3
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fc2a 	bl	8008b7e <xQueueCreateCountingSemaphoreStatic>
 800832a:	61f8      	str	r0, [r7, #28]
 800832c:	e004      	b.n	8008338 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fc5b 	bl	8008bec <xQueueCreateCountingSemaphore>
 8008336:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	e001      	b.n	8008350 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008350:	6979      	ldr	r1, [r7, #20]
 8008352:	69f8      	ldr	r0, [r7, #28]
 8008354:	f001 fa98 	bl	8009888 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008358:	69fb      	ldr	r3, [r7, #28]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800837c:	f06f 0303 	mvn.w	r3, #3
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e039      	b.n	80083f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008384:	f3ef 8305 	mrs	r3, IPSR
 8008388:	60fb      	str	r3, [r7, #12]
  return(result);
 800838a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800838c:	2b00      	cmp	r3, #0
 800838e:	d022      	beq.n	80083d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008396:	f06f 0303 	mvn.w	r3, #3
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e02c      	b.n	80083f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	461a      	mov	r2, r3
 80083a8:	2100      	movs	r1, #0
 80083aa:	6938      	ldr	r0, [r7, #16]
 80083ac:	f001 f864 	bl	8009478 <xQueueReceiveFromISR>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d003      	beq.n	80083be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80083b6:	f06f 0302 	mvn.w	r3, #2
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	e01c      	b.n	80083f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d019      	beq.n	80083f8 <osSemaphoreAcquire+0x94>
 80083c4:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <osSemaphoreAcquire+0xa0>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	e010      	b.n	80083f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6938      	ldr	r0, [r7, #16]
 80083da:	f000 ff41 	bl	8009260 <xQueueSemaphoreTake>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d009      	beq.n	80083f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80083ea:	f06f 0301 	mvn.w	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e002      	b.n	80083f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80083f2:	f06f 0302 	mvn.w	r3, #2
 80083f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80083f8:	697b      	ldr	r3, [r7, #20]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800841e:	f06f 0303 	mvn.w	r3, #3
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	e02c      	b.n	8008480 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008426:	f3ef 8305 	mrs	r3, IPSR
 800842a:	60fb      	str	r3, [r7, #12]
  return(result);
 800842c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01a      	beq.n	8008468 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008432:	2300      	movs	r3, #0
 8008434:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008436:	f107 0308 	add.w	r3, r7, #8
 800843a:	4619      	mov	r1, r3
 800843c:	6938      	ldr	r0, [r7, #16]
 800843e:	f000 fda2 	bl	8008f86 <xQueueGiveFromISR>
 8008442:	4603      	mov	r3, r0
 8008444:	2b01      	cmp	r3, #1
 8008446:	d003      	beq.n	8008450 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008448:	f06f 0302 	mvn.w	r3, #2
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e017      	b.n	8008480 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d014      	beq.n	8008480 <osSemaphoreRelease+0x78>
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <osSemaphoreRelease+0x84>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	e00b      	b.n	8008480 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008468:	2300      	movs	r3, #0
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	6938      	ldr	r0, [r7, #16]
 8008470:	f000 fbf0 	bl	8008c54 <xQueueGenericSend>
 8008474:	4603      	mov	r3, r0
 8008476:	2b01      	cmp	r3, #1
 8008478:	d002      	beq.n	8008480 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800847a:	f06f 0302 	mvn.w	r3, #2
 800847e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008480:	697b      	ldr	r3, [r7, #20]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	; 0x28
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a0:	f3ef 8305 	mrs	r3, IPSR
 80084a4:	613b      	str	r3, [r7, #16]
  return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d15f      	bne.n	800856c <osMessageQueueNew+0xdc>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d05c      	beq.n	800856c <osMessageQueueNew+0xdc>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d059      	beq.n	800856c <osMessageQueueNew+0xdc>
    mem = -1;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d029      	beq.n	8008518 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d012      	beq.n	80084f2 <osMessageQueueNew+0x62>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b4f      	cmp	r3, #79	; 0x4f
 80084d2:	d90e      	bls.n	80084f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	695a      	ldr	r2, [r3, #20]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	fb01 f303 	mul.w	r3, r1, r3
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <osMessageQueueNew+0x62>
        mem = 1;
 80084ec:	2301      	movs	r3, #1
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e014      	b.n	800851c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <osMessageQueueNew+0x8c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10c      	bne.n	800851c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <osMessageQueueNew+0x8c>
          mem = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	e001      	b.n	800851c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10b      	bne.n	800853a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2100      	movs	r1, #0
 800852c:	9100      	str	r1, [sp, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fa4f 	bl	80089d4 <xQueueGenericCreateStatic>
 8008536:	61f8      	str	r0, [r7, #28]
 8008538:	e008      	b.n	800854c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008540:	2200      	movs	r2, #0
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fabd 	bl	8008ac4 <xQueueGenericCreate>
 800854a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00c      	beq.n	800856c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e001      	b.n	8008564 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008564:	6979      	ldr	r1, [r7, #20]
 8008566:	69f8      	ldr	r0, [r7, #28]
 8008568:	f001 f98e 	bl	8009888 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800856c:	69fb      	ldr	r3, [r7, #28]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	4613      	mov	r3, r2
 8008586:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800858c:	2300      	movs	r3, #0
 800858e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008590:	f3ef 8305 	mrs	r3, IPSR
 8008594:	617b      	str	r3, [r7, #20]
  return(result);
 8008596:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008598:	2b00      	cmp	r3, #0
 800859a:	d028      	beq.n	80085ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <osMessageQueuePut+0x36>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <osMessageQueuePut+0x36>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80085ae:	f06f 0303 	mvn.w	r3, #3
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e038      	b.n	8008628 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80085ba:	f107 0210 	add.w	r2, r7, #16
 80085be:	2300      	movs	r3, #0
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	69b8      	ldr	r0, [r7, #24]
 80085c4:	f000 fc44 	bl	8008e50 <xQueueGenericSendFromISR>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d003      	beq.n	80085d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80085ce:	f06f 0302 	mvn.w	r3, #2
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	e028      	b.n	8008628 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d025      	beq.n	8008628 <osMessageQueuePut+0xb0>
 80085dc:	4b15      	ldr	r3, [pc, #84]	; (8008634 <osMessageQueuePut+0xbc>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	e01c      	b.n	8008628 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <osMessageQueuePut+0x82>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80085fa:	f06f 0303 	mvn.w	r3, #3
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e012      	b.n	8008628 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008602:	2300      	movs	r3, #0
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	69b8      	ldr	r0, [r7, #24]
 800860a:	f000 fb23 	bl	8008c54 <xQueueGenericSend>
 800860e:	4603      	mov	r3, r0
 8008610:	2b01      	cmp	r3, #1
 8008612:	d009      	beq.n	8008628 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800861a:	f06f 0301 	mvn.w	r3, #1
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e002      	b.n	8008628 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008622:	f06f 0302 	mvn.w	r3, #2
 8008626:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008628:	69fb      	ldr	r3, [r7, #28]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800864e:	f3ef 8305 	mrs	r3, IPSR
 8008652:	617b      	str	r3, [r7, #20]
  return(result);
 8008654:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008656:	2b00      	cmp	r3, #0
 8008658:	d028      	beq.n	80086ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <osMessageQueueGet+0x34>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <osMessageQueueGet+0x34>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800866c:	f06f 0303 	mvn.w	r3, #3
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e037      	b.n	80086e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008678:	f107 0310 	add.w	r3, r7, #16
 800867c:	461a      	mov	r2, r3
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	69b8      	ldr	r0, [r7, #24]
 8008682:	f000 fef9 	bl	8009478 <xQueueReceiveFromISR>
 8008686:	4603      	mov	r3, r0
 8008688:	2b01      	cmp	r3, #1
 800868a:	d003      	beq.n	8008694 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800868c:	f06f 0302 	mvn.w	r3, #2
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	e027      	b.n	80086e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d024      	beq.n	80086e4 <osMessageQueueGet+0xac>
 800869a:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <osMessageQueueGet+0xb8>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	e01b      	b.n	80086e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <osMessageQueueGet+0x80>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80086b8:	f06f 0303 	mvn.w	r3, #3
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	e011      	b.n	80086e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	69b8      	ldr	r0, [r7, #24]
 80086c6:	f000 fceb 	bl	80090a0 <xQueueReceive>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d009      	beq.n	80086e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80086d6:	f06f 0301 	mvn.w	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
 80086dc:	e002      	b.n	80086e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80086de:	f06f 0302 	mvn.w	r3, #2
 80086e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086e4:	69fb      	ldr	r3, [r7, #28]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <osMessageQueueGetCount+0x18>
    count = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	e00e      	b.n	800872a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870c:	f3ef 8305 	mrs	r3, IPSR
 8008710:	60fb      	str	r3, [r7, #12]
  return(result);
 8008712:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008718:	6938      	ldr	r0, [r7, #16]
 800871a:	f000 ff4b 	bl	80095b4 <uxQueueMessagesWaitingFromISR>
 800871e:	6178      	str	r0, [r7, #20]
 8008720:	e003      	b.n	800872a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008722:	6938      	ldr	r0, [r7, #16]
 8008724:	f000 ff28 	bl	8009578 <uxQueueMessagesWaiting>
 8008728:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800872a:	697b      	ldr	r3, [r7, #20]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4a07      	ldr	r2, [pc, #28]	; (8008760 <vApplicationGetIdleTaskMemory+0x2c>)
 8008744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4a06      	ldr	r2, [pc, #24]	; (8008764 <vApplicationGetIdleTaskMemory+0x30>)
 800874a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2280      	movs	r2, #128	; 0x80
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	20000218 	.word	0x20000218
 8008764:	200002d4 	.word	0x200002d4

08008768 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a07      	ldr	r2, [pc, #28]	; (8008794 <vApplicationGetTimerTaskMemory+0x2c>)
 8008778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4a06      	ldr	r2, [pc, #24]	; (8008798 <vApplicationGetTimerTaskMemory+0x30>)
 800877e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008786:	601a      	str	r2, [r3, #0]
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	200004d4 	.word	0x200004d4
 8008798:	20000590 	.word	0x20000590

0800879c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f103 0208 	add.w	r2, r3, #8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f04f 32ff 	mov.w	r2, #4294967295
 80087b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f103 0208 	add.w	r2, r3, #8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f103 0208 	add.w	r2, r3, #8
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d103      	bne.n	800885e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e00c      	b.n	8008878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3308      	adds	r3, #8
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	e002      	b.n	800886c <vListInsert+0x2e>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	429a      	cmp	r2, r3
 8008876:	d2f6      	bcs.n	8008866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6892      	ldr	r2, [r2, #8]
 80088c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6852      	ldr	r2, [r2, #4]
 80088d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d103      	bne.n	80088e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	1e5a      	subs	r2, r3, #1
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800892e:	f003 fb51 	bl	800bfd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	441a      	add	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895e:	3b01      	subs	r3, #1
 8008960:	68f9      	ldr	r1, [r7, #12]
 8008962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	441a      	add	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	22ff      	movs	r2, #255	; 0xff
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	22ff      	movs	r2, #255	; 0xff
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d114      	bne.n	80089ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01a      	beq.n	80089c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3310      	adds	r3, #16
 8008990:	4618      	mov	r0, r3
 8008992:	f002 f8a5 	bl	800aae0 <xTaskRemoveFromEventList>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d012      	beq.n	80089c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <xQueueGenericReset+0xcc>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	e009      	b.n	80089c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3310      	adds	r3, #16
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fef2 	bl	800879c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3324      	adds	r3, #36	; 0x24
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff feed 	bl	800879c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f003 fb37 	bl	800c034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089c6:	2301      	movs	r3, #1
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	; 0x38
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <xQueueGenericCreateStatic+0x52>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <xQueueGenericCreateStatic+0x56>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericCreateStatic+0x58>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	623b      	str	r3, [r7, #32]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <xQueueGenericCreateStatic+0x7e>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <xQueueGenericCreateStatic+0x82>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <xQueueGenericCreateStatic+0x84>
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	61fb      	str	r3, [r7, #28]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a72:	2350      	movs	r3, #80	; 0x50
 8008a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b50      	cmp	r3, #80	; 0x50
 8008a7a:	d00a      	beq.n	8008a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	61bb      	str	r3, [r7, #24]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00d      	beq.n	8008aba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f83f 	bl	8008b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3730      	adds	r7, #48	; 0x30
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xQueueGenericCreate+0x2a>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	613b      	str	r3, [r7, #16]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3350      	adds	r3, #80	; 0x50
 8008afc:	4618      	mov	r0, r3
 8008afe:	f003 fb8b 	bl	800c218 <pvPortMalloc>
 8008b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	3350      	adds	r3, #80	; 0x50
 8008b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b1c:	79fa      	ldrb	r2, [r7, #7]
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4613      	mov	r3, r2
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f805 	bl	8008b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d103      	bne.n	8008b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e002      	b.n	8008b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b66:	2101      	movs	r1, #1
 8008b68:	69b8      	ldr	r0, [r7, #24]
 8008b6a:	f7ff fecb 	bl	8008904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b08a      	sub	sp, #40	; 0x28
 8008b82:	af02      	add	r7, sp, #8
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	61bb      	str	r3, [r7, #24]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d90a      	bls.n	8008bc4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	617b      	str	r3, [r7, #20]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2100      	movs	r1, #0
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff00 	bl	80089d4 <xQueueGenericCreateStatic>
 8008bd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008be2:	69fb      	ldr	r3, [r7, #28]
	}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	613b      	str	r3, [r7, #16]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d90a      	bls.n	8008c30 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	60fb      	str	r3, [r7, #12]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c30:	2202      	movs	r2, #2
 8008c32:	2100      	movs	r1, #0
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ff45 	bl	8008ac4 <xQueueGenericCreate>
 8008c3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c48:	697b      	ldr	r3, [r7, #20]
	}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08e      	sub	sp, #56	; 0x38
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c62:	2300      	movs	r3, #0
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xQueueGenericSend+0x32>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <xQueueGenericSend+0x40>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <xQueueGenericSend+0x44>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <xQueueGenericSend+0x46>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cb0:	bf00      	nop
 8008cb2:	e7fe      	b.n	8008cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d103      	bne.n	8008cc2 <xQueueGenericSend+0x6e>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <xQueueGenericSend+0x72>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e000      	b.n	8008cc8 <xQueueGenericSend+0x74>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	623b      	str	r3, [r7, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ce2:	f002 f8f5 	bl	800aed0 <xTaskGetSchedulerState>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <xQueueGenericSend+0x9e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <xQueueGenericSend+0xa2>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueGenericSend+0xa4>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61fb      	str	r3, [r7, #28]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d12:	f003 f95f 	bl	800bfd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d302      	bcc.n	8008d28 <xQueueGenericSend+0xd4>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d129      	bne.n	8008d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2e:	f000 fc9a 	bl	8009666 <prvCopyDataToQueue>
 8008d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d010      	beq.n	8008d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fecd 	bl	800aae0 <xTaskRemoveFromEventList>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d013      	beq.n	8008d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d4c:	4b3f      	ldr	r3, [pc, #252]	; (8008e4c <xQueueGenericSend+0x1f8>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	e00a      	b.n	8008d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d64:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <xQueueGenericSend+0x1f8>)
 8008d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d74:	f003 f95e 	bl	800c034 <vPortExitCritical>
				return pdPASS;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e063      	b.n	8008e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d103      	bne.n	8008d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d82:	f003 f957 	bl	800c034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	e05c      	b.n	8008e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d90:	f107 0314 	add.w	r3, r7, #20
 8008d94:	4618      	mov	r0, r3
 8008d96:	f001 ff2d 	bl	800abf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d9e:	f003 f949 	bl	800c034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008da2:	f001 fc73 	bl	800a68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008da6:	f003 f915 	bl	800bfd4 <vPortEnterCritical>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db6:	d103      	bne.n	8008dc0 <xQueueGenericSend+0x16c>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d103      	bne.n	8008dd6 <xQueueGenericSend+0x182>
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dd6:	f003 f92d 	bl	800c034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dda:	1d3a      	adds	r2, r7, #4
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 ff1c 	bl	800ac20 <xTaskCheckForTimeOut>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d124      	bne.n	8008e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df0:	f000 fd31 	bl	8009856 <prvIsQueueFull>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d018      	beq.n	8008e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	3310      	adds	r3, #16
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 fe1c 	bl	800aa40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e0a:	f000 fcbc 	bl	8009786 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e0e:	f001 fc4b 	bl	800a6a8 <xTaskResumeAll>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f af7c 	bne.w	8008d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <xQueueGenericSend+0x1f8>)
 8008e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	e772      	b.n	8008d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e2e:	f000 fcaa 	bl	8009786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e32:	f001 fc39 	bl	800a6a8 <xTaskResumeAll>
 8008e36:	e76c      	b.n	8008d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e3a:	f000 fca4 	bl	8009786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e3e:	f001 fc33 	bl	800a6a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3738      	adds	r7, #56	; 0x38
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b090      	sub	sp, #64	; 0x40
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <xQueueGenericSendFromISR+0x3c>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <xQueueGenericSendFromISR+0x40>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <xQueueGenericSendFromISR+0x42>
 8008e90:	2300      	movs	r3, #0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d103      	bne.n	8008eba <xQueueGenericSendFromISR+0x6a>
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <xQueueGenericSendFromISR+0x6e>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <xQueueGenericSendFromISR+0x70>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	623b      	str	r3, [r7, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eda:	f003 f95d 	bl	800c198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ede:	f3ef 8211 	mrs	r2, BASEPRI
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	61fa      	str	r2, [r7, #28]
 8008ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <xQueueGenericSendFromISR+0xbc>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d12f      	bne.n	8008f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f22:	f000 fba0 	bl	8009666 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d112      	bne.n	8008f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d016      	beq.n	8008f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	3324      	adds	r3, #36	; 0x24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fdcf 	bl	800aae0 <xTaskRemoveFromEventList>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00e      	beq.n	8008f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e007      	b.n	8008f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	b25a      	sxtb	r2, r3
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f66:	2301      	movs	r3, #1
 8008f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008f6a:	e001      	b.n	8008f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3740      	adds	r7, #64	; 0x40
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b08e      	sub	sp, #56	; 0x38
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	623b      	str	r3, [r7, #32]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <xQueueGiveFromISR+0x48>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61fb      	str	r3, [r7, #28]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <xQueueGiveFromISR+0x58>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <xQueueGiveFromISR+0x5c>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueGiveFromISR+0x5e>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xQueueGiveFromISR+0x78>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61bb      	str	r3, [r7, #24]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ffe:	f003 f8cb 	bl	800c198 <vPortValidateInterruptPriority>
	__asm volatile
 8009002:	f3ef 8211 	mrs	r2, BASEPRI
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	617a      	str	r2, [r7, #20]
 8009018:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800901a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800902a:	429a      	cmp	r2, r3
 800902c:	d22b      	bcs.n	8009086 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009048:	d112      	bne.n	8009070 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d016      	beq.n	8009080 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	3324      	adds	r3, #36	; 0x24
 8009056:	4618      	mov	r0, r3
 8009058:	f001 fd42 	bl	800aae0 <xTaskRemoveFromEventList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e007      	b.n	8009080 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009074:	3301      	adds	r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	b25a      	sxtb	r2, r3
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009080:	2301      	movs	r3, #1
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	e001      	b.n	800908a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009086:	2300      	movs	r3, #0
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f383 8811 	msr	BASEPRI, r3
}
 8009094:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009098:	4618      	mov	r0, r3
 800909a:	3738      	adds	r7, #56	; 0x38
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08c      	sub	sp, #48	; 0x30
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xQueueReceive+0x30>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	623b      	str	r3, [r7, #32]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d103      	bne.n	80090de <xQueueReceive+0x3e>
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueReceive+0x42>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueReceive+0x44>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueReceive+0x5e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61fb      	str	r3, [r7, #28]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090fe:	f001 fee7 	bl	800aed0 <xTaskGetSchedulerState>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <xQueueReceive+0x6e>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <xQueueReceive+0x72>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <xQueueReceive+0x74>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <xQueueReceive+0x8e>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	61bb      	str	r3, [r7, #24]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800912e:	f002 ff51 	bl	800bfd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01f      	beq.n	800917e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009142:	f000 fafa 	bl	800973a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	1e5a      	subs	r2, r3, #1
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00f      	beq.n	8009176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fcc0 	bl	800aae0 <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009166:	4b3d      	ldr	r3, [pc, #244]	; (800925c <xQueueReceive+0x1bc>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009176:	f002 ff5d 	bl	800c034 <vPortExitCritical>
				return pdPASS;
 800917a:	2301      	movs	r3, #1
 800917c:	e069      	b.n	8009252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009184:	f002 ff56 	bl	800c034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009188:	2300      	movs	r3, #0
 800918a:	e062      	b.n	8009252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009192:	f107 0310 	add.w	r3, r7, #16
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fd2c 	bl	800abf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091a0:	f002 ff48 	bl	800c034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091a4:	f001 fa72 	bl	800a68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091a8:	f002 ff14 	bl	800bfd4 <vPortEnterCritical>
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091b2:	b25b      	sxtb	r3, r3
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d103      	bne.n	80091c2 <xQueueReceive+0x122>
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c8:	b25b      	sxtb	r3, r3
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d103      	bne.n	80091d8 <xQueueReceive+0x138>
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d8:	f002 ff2c 	bl	800c034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091dc:	1d3a      	adds	r2, r7, #4
 80091de:	f107 0310 	add.w	r3, r7, #16
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f001 fd1b 	bl	800ac20 <xTaskCheckForTimeOut>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d123      	bne.n	8009238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f2:	f000 fb1a 	bl	800982a <prvIsQueueEmpty>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d017      	beq.n	800922c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	3324      	adds	r3, #36	; 0x24
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fc1b 	bl	800aa40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800920a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920c:	f000 fabb 	bl	8009786 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009210:	f001 fa4a 	bl	800a6a8 <xTaskResumeAll>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d189      	bne.n	800912e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <xQueueReceive+0x1bc>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	e780      	b.n	800912e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800922c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800922e:	f000 faaa 	bl	8009786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009232:	f001 fa39 	bl	800a6a8 <xTaskResumeAll>
 8009236:	e77a      	b.n	800912e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923a:	f000 faa4 	bl	8009786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800923e:	f001 fa33 	bl	800a6a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009244:	f000 faf1 	bl	800982a <prvIsQueueEmpty>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	f43f af6f 	beq.w	800912e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009252:	4618      	mov	r0, r3
 8009254:	3730      	adds	r7, #48	; 0x30
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08e      	sub	sp, #56	; 0x38
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	623b      	str	r3, [r7, #32]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	61fb      	str	r3, [r7, #28]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b0:	f001 fe0e 	bl	800aed0 <xTaskGetSchedulerState>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <xQueueSemaphoreTake+0x60>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <xQueueSemaphoreTake+0x64>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <xQueueSemaphoreTake+0x66>
 80092c4:	2300      	movs	r3, #0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	61bb      	str	r3, [r7, #24]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092e0:	f002 fe78 	bl	800bfd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d024      	beq.n	800933a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	1e5a      	subs	r2, r3, #1
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009300:	f001 ff5c 	bl	800b1bc <pvTaskIncrementMutexHeldCount>
 8009304:	4602      	mov	r2, r0
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00f      	beq.n	8009332 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	3310      	adds	r3, #16
 8009316:	4618      	mov	r0, r3
 8009318:	f001 fbe2 	bl	800aae0 <xTaskRemoveFromEventList>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009322:	4b54      	ldr	r3, [pc, #336]	; (8009474 <xQueueSemaphoreTake+0x214>)
 8009324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009332:	f002 fe7f 	bl	800c034 <vPortExitCritical>
				return pdPASS;
 8009336:	2301      	movs	r3, #1
 8009338:	e097      	b.n	800946a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d111      	bne.n	8009364 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	617b      	str	r3, [r7, #20]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800935c:	f002 fe6a 	bl	800c034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009360:	2300      	movs	r3, #0
 8009362:	e082      	b.n	800946a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4618      	mov	r0, r3
 8009370:	f001 fc40 	bl	800abf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009374:	2301      	movs	r3, #1
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009378:	f002 fe5c 	bl	800c034 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800937c:	f001 f986 	bl	800a68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009380:	f002 fe28 	bl	800bfd4 <vPortEnterCritical>
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800938a:	b25b      	sxtb	r3, r3
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d103      	bne.n	800939a <xQueueSemaphoreTake+0x13a>
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093a0:	b25b      	sxtb	r3, r3
 80093a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a6:	d103      	bne.n	80093b0 <xQueueSemaphoreTake+0x150>
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093b0:	f002 fe40 	bl	800c034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093b4:	463a      	mov	r2, r7
 80093b6:	f107 030c 	add.w	r3, r7, #12
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 fc2f 	bl	800ac20 <xTaskCheckForTimeOut>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d132      	bne.n	800942e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ca:	f000 fa2e 	bl	800982a <prvIsQueueEmpty>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d026      	beq.n	8009422 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d109      	bne.n	80093f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80093dc:	f002 fdfa 	bl	800bfd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fd91 	bl	800af0c <xTaskPriorityInherit>
 80093ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80093ec:	f002 fe22 	bl	800c034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	3324      	adds	r3, #36	; 0x24
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 fb21 	bl	800aa40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009400:	f000 f9c1 	bl	8009786 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009404:	f001 f950 	bl	800a6a8 <xTaskResumeAll>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	f47f af68 	bne.w	80092e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009410:	4b18      	ldr	r3, [pc, #96]	; (8009474 <xQueueSemaphoreTake+0x214>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	e75e      	b.n	80092e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009424:	f000 f9af 	bl	8009786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009428:	f001 f93e 	bl	800a6a8 <xTaskResumeAll>
 800942c:	e758      	b.n	80092e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800942e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009430:	f000 f9a9 	bl	8009786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009434:	f001 f938 	bl	800a6a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800943a:	f000 f9f6 	bl	800982a <prvIsQueueEmpty>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f43f af4d 	beq.w	80092e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00d      	beq.n	8009468 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800944c:	f002 fdc2 	bl	800bfd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009452:	f000 f8f0 	bl	8009636 <prvGetDisinheritPriorityAfterTimeout>
 8009456:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fe2a 	bl	800b0b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009464:	f002 fde6 	bl	800c034 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800946a:	4618      	mov	r0, r3
 800946c:	3738      	adds	r7, #56	; 0x38
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	; 0x38
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	623b      	str	r3, [r7, #32]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <xQueueReceiveFromISR+0x3a>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <xQueueReceiveFromISR+0x3e>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueReceiveFromISR+0x40>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	61fb      	str	r3, [r7, #28]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094d2:	f002 fe61 	bl	800c198 <vPortValidateInterruptPriority>
	__asm volatile
 80094d6:	f3ef 8211 	mrs	r2, BASEPRI
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	61ba      	str	r2, [r7, #24]
 80094ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d02f      	beq.n	800955e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950c:	f000 f915 	bl	800973a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	1e5a      	subs	r2, r3, #1
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009518:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009520:	d112      	bne.n	8009548 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d016      	beq.n	8009558 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	3310      	adds	r3, #16
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fad6 	bl	800aae0 <xTaskRemoveFromEventList>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	e007      	b.n	8009558 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800954c:	3301      	adds	r3, #1
 800954e:	b2db      	uxtb	r3, r3
 8009550:	b25a      	sxtb	r2, r3
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009558:	2301      	movs	r3, #1
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
 800955c:	e001      	b.n	8009562 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800955e:	2300      	movs	r3, #0
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f383 8811 	msr	BASEPRI, r3
}
 800956c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009570:	4618      	mov	r0, r3
 8009572:	3738      	adds	r7, #56	; 0x38
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	60bb      	str	r3, [r7, #8]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800959c:	f002 fd1a 	bl	800bfd4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80095a6:	f002 fd45 	bl	800c034 <vPortExitCritical>

	return uxReturn;
 80095aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60fb      	str	r3, [r7, #12]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80095e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80095e4:	4618      	mov	r0, r3
 80095e6:	371c      	adds	r7, #28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <vQueueDelete+0x28>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	60bb      	str	r3, [r7, #8]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f95f 	bl	80098dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f002 fec1 	bl	800c3b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e001      	b.n	8009658 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009658:	68fb      	ldr	r3, [r7, #12]
	}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b086      	sub	sp, #24
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10d      	bne.n	80096a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d14d      	bne.n	8009728 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	4618      	mov	r0, r3
 8009692:	f001 fca3 	bl	800afdc <xTaskPriorityDisinherit>
 8009696:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	609a      	str	r2, [r3, #8]
 800969e:	e043      	b.n	8009728 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d119      	bne.n	80096da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6858      	ldr	r0, [r3, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	461a      	mov	r2, r3
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	f005 f95b 	bl	800e96c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	441a      	add	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d32b      	bcc.n	8009728 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	605a      	str	r2, [r3, #4]
 80096d8:	e026      	b.n	8009728 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e2:	461a      	mov	r2, r3
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	f005 f941 	bl	800e96c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	425b      	negs	r3, r3
 80096f4:	441a      	add	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d207      	bcs.n	8009716 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	425b      	negs	r3, r3
 8009710:	441a      	add	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d105      	bne.n	8009728 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	3b01      	subs	r3, #1
 8009726:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009730:	697b      	ldr	r3, [r7, #20]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d018      	beq.n	800977e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	429a      	cmp	r2, r3
 8009764:	d303      	bcc.n	800976e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68d9      	ldr	r1, [r3, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	461a      	mov	r2, r3
 8009778:	6838      	ldr	r0, [r7, #0]
 800977a:	f005 f8f7 	bl	800e96c <memcpy>
	}
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800978e:	f002 fc21 	bl	800bfd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009798:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800979a:	e011      	b.n	80097c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3324      	adds	r3, #36	; 0x24
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 f999 	bl	800aae0 <xTaskRemoveFromEventList>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097b4:	f001 fa96 	bl	800ace4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	dce9      	bgt.n	800979c <prvUnlockQueue+0x16>
 80097c8:	e000      	b.n	80097cc <prvUnlockQueue+0x46>
					break;
 80097ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	22ff      	movs	r2, #255	; 0xff
 80097d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097d4:	f002 fc2e 	bl	800c034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097d8:	f002 fbfc 	bl	800bfd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097e4:	e011      	b.n	800980a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d012      	beq.n	8009814 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3310      	adds	r3, #16
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 f974 	bl	800aae0 <xTaskRemoveFromEventList>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097fe:	f001 fa71 	bl	800ace4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	3b01      	subs	r3, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800980a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dce9      	bgt.n	80097e6 <prvUnlockQueue+0x60>
 8009812:	e000      	b.n	8009816 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009814:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800981e:	f002 fc09 	bl	800c034 <vPortExitCritical>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009832:	f002 fbcf 	bl	800bfd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800983e:	2301      	movs	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	e001      	b.n	8009848 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009848:	f002 fbf4 	bl	800c034 <vPortExitCritical>

	return xReturn;
 800984c:	68fb      	ldr	r3, [r7, #12]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800985e:	f002 fbb9 	bl	800bfd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	429a      	cmp	r2, r3
 800986c:	d102      	bne.n	8009874 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800986e:	2301      	movs	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
 8009872:	e001      	b.n	8009878 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009878:	f002 fbdc 	bl	800c034 <vPortExitCritical>

	return xReturn;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e014      	b.n	80098c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009898:	4a0f      	ldr	r2, [pc, #60]	; (80098d8 <vQueueAddToRegistry+0x50>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098a4:	490c      	ldr	r1, [pc, #48]	; (80098d8 <vQueueAddToRegistry+0x50>)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098ae:	4a0a      	ldr	r2, [pc, #40]	; (80098d8 <vQueueAddToRegistry+0x50>)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	4413      	add	r3, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098ba:	e006      	b.n	80098ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b07      	cmp	r3, #7
 80098c6:	d9e7      	bls.n	8009898 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20000990 	.word	0x20000990

080098dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e016      	b.n	8009918 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80098ea:	4a10      	ldr	r2, [pc, #64]	; (800992c <vQueueUnregisterQueue+0x50>)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	4413      	add	r3, r2
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d10b      	bne.n	8009912 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80098fa:	4a0c      	ldr	r2, [pc, #48]	; (800992c <vQueueUnregisterQueue+0x50>)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2100      	movs	r1, #0
 8009900:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009904:	4a09      	ldr	r2, [pc, #36]	; (800992c <vQueueUnregisterQueue+0x50>)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	4413      	add	r3, r2
 800990c:	2200      	movs	r2, #0
 800990e:	605a      	str	r2, [r3, #4]
				break;
 8009910:	e006      	b.n	8009920 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3301      	adds	r3, #1
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b07      	cmp	r3, #7
 800991c:	d9e5      	bls.n	80098ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800991e:	bf00      	nop
 8009920:	bf00      	nop
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000990 	.word	0x20000990

08009930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009940:	f002 fb48 	bl	800bfd4 <vPortEnterCritical>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800994a:	b25b      	sxtb	r3, r3
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009950:	d103      	bne.n	800995a <vQueueWaitForMessageRestricted+0x2a>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009960:	b25b      	sxtb	r3, r3
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d103      	bne.n	8009970 <vQueueWaitForMessageRestricted+0x40>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009970:	f002 fb60 	bl	800c034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	4618      	mov	r0, r3
 8009986:	f001 f87f 	bl	800aa88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800998a:	6978      	ldr	r0, [r7, #20]
 800998c:	f7ff fefb 	bl	8009786 <prvUnlockQueue>
	}
 8009990:	bf00      	nop
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8009998:	b580      	push	{r7, lr}
 800999a:	b090      	sub	sp, #64	; 0x40
 800999c:	af02      	add	r7, sp, #8
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 80099a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <xStreamBufferGenericCreateStatic+0x2e>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 80099c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d90a      	bls.n	8009a00 <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	623b      	str	r3, [r7, #32]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009a10:	2303      	movs	r3, #3
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e002      	b.n	8009a1e <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d80a      	bhi.n	8009a3a <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	61fb      	str	r3, [r7, #28]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8009a3a:	2324      	movs	r3, #36	; 0x24
 8009a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b24      	cmp	r3, #36	; 0x24
 8009a42:	d00a      	beq.n	8009a5a <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	61bb      	str	r3, [r7, #24]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d015      	beq.n	8009a8c <xStreamBufferGenericCreateStatic+0xf4>
 8009a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d012      	beq.n	8009a8c <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8009a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a74:	f000 fb7a 	bl	800a16c <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	7f1b      	ldrb	r3, [r3, #28]
 8009a7c:	f043 0302 	orr.w	r3, r3, #2
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8009a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
 8009a8a:	e001      	b.n	8009a90 <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8009a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3738      	adds	r7, #56	; 0x38
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b087      	sub	sp, #28
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4413      	add	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d304      	bcc.n	8009af2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b090      	sub	sp, #64	; 0x40
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <xStreamBufferSend+0x36>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <xStreamBufferSend+0x52>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	623b      	str	r3, [r7, #32]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	7f1b      	ldrb	r3, [r3, #28]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	3304      	adds	r3, #4
 8009b62:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d80a      	bhi.n	8009b82 <xStreamBufferSend+0x82>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	61fb      	str	r3, [r7, #28]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d03e      	beq.n	8009c06 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009b88:	f107 0310 	add.w	r3, r7, #16
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 f80b 	bl	800aba8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009b92:	f002 fa1f 	bl	800bfd4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b98:	f7ff ff7f 	bl	8009a9a <xStreamBufferSpacesAvailable>
 8009b9c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8009b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d217      	bcs.n	8009bd6 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f001 fd1e 	bl	800b5e8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <xStreamBufferSend+0xca>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	61bb      	str	r3, [r7, #24]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009bca:	f001 f971 	bl	800aeb0 <xTaskGetCurrentTaskHandle>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	615a      	str	r2, [r3, #20]
 8009bd4:	e002      	b.n	8009bdc <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8009bd6:	f002 fa2d 	bl	800c034 <vPortExitCritical>
					break;
 8009bda:	e014      	b.n	8009c06 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8009bdc:	f002 fa2a 	bl	800c034 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	2000      	movs	r0, #0
 8009be8:	f001 fafc 	bl	800b1e4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	2200      	movs	r2, #0
 8009bf0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	f107 0310 	add.w	r3, r7, #16
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 f810 	bl	800ac20 <xTaskCheckForTimeOut>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0c5      	beq.n	8009b92 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c0e:	f7ff ff44 	bl	8009a9a <xStreamBufferSpacesAvailable>
 8009c12:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c20:	f000 f894 	bl	8009d4c <prvWriteMessageToBuffer>
 8009c24:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d019      	beq.n	8009c60 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c2e:	f000 fa7d 	bl	800a12c <prvBytesInBuffer>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d311      	bcc.n	8009c60 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009c3c:	f000 fd26 	bl	800a68c <vTaskSuspendAll>
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <xStreamBufferSend+0x15c>
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	6918      	ldr	r0, [r3, #16]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2100      	movs	r1, #0
 8009c52:	f001 fb27 	bl	800b2a4 <xTaskGenericNotify>
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	611a      	str	r2, [r3, #16]
 8009c5c:	f000 fd24 	bl	800a6a8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3738      	adds	r7, #56	; 0x38
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b090      	sub	sp, #64	; 0x40
 8009c6e:	af02      	add	r7, sp, #8
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	623b      	str	r3, [r7, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	e7fe      	b.n	8009c9a <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	61fb      	str	r3, [r7, #28]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	7f1b      	ldrb	r3, [r3, #28]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ccc:	f7ff fee5 	bl	8009a9a <xStreamBufferSpacesAvailable>
 8009cd0:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	68b9      	ldr	r1, [r7, #8]
 8009cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cde:	f000 f835 	bl	8009d4c <prvWriteMessageToBuffer>
 8009ce2:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d02b      	beq.n	8009d42 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cec:	f000 fa1e 	bl	800a12c <prvBytesInBuffer>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d323      	bcc.n	8009d42 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8009cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	61ba      	str	r2, [r7, #24]
 8009d10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d12:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <xStreamBufferSendFromISR+0xcc>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	6918      	ldr	r0, [r3, #16]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	2300      	movs	r3, #0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	f001 fb78 	bl	800b420 <xTaskGenericNotifyFromISR>
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	2200      	movs	r2, #0
 8009d34:	611a      	str	r2, [r3, #16]
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f383 8811 	msr	BASEPRI, r3
}
 8009d40:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8009d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3738      	adds	r7, #56	; 0x38
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e01d      	b.n	8009da2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7f1b      	ldrb	r3, [r3, #28]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d108      	bne.n	8009d84 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	bf28      	it	cs
 8009d7e:	4613      	movcs	r3, r2
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	e00e      	b.n	8009da2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d308      	bcc.n	8009d9e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009d90:	1d3b      	adds	r3, r7, #4
 8009d92:	2204      	movs	r2, #4
 8009d94:	4619      	mov	r1, r3
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f8dc 	bl	8009f54 <prvWriteBytesToBuffer>
 8009d9c:	e001      	b.n	8009da2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f8d0 	bl	8009f54 <prvWriteBytesToBuffer>
 8009db4:	6138      	str	r0, [r7, #16]
 8009db6:	e001      	b.n	8009dbc <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8009dbc:	693b      	ldr	r3, [r7, #16]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b08e      	sub	sp, #56	; 0x38
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	607a      	str	r2, [r7, #4]
 8009dd2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <xStreamBufferReceive+0x32>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	61fb      	str	r3, [r7, #28]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <xStreamBufferReceive+0x4e>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	61bb      	str	r3, [r7, #24]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	7f1b      	ldrb	r3, [r3, #28]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009e20:	2304      	movs	r3, #4
 8009e22:	627b      	str	r3, [r7, #36]	; 0x24
 8009e24:	e001      	b.n	8009e2a <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d034      	beq.n	8009e9a <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009e30:	f002 f8d0 	bl	800bfd4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009e34:	6a38      	ldr	r0, [r7, #32]
 8009e36:	f000 f979 	bl	800a12c <prvBytesInBuffer>
 8009e3a:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d816      	bhi.n	8009e72 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009e44:	2000      	movs	r0, #0
 8009e46:	f001 fbcf 	bl	800b5e8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <xStreamBufferReceive+0xa2>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009e68:	f001 f822 	bl	800aeb0 <xTaskGetCurrentTaskHandle>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e72:	f002 f8df 	bl	800c034 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d811      	bhi.n	8009ea2 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2200      	movs	r2, #0
 8009e82:	2100      	movs	r1, #0
 8009e84:	2000      	movs	r0, #0
 8009e86:	f001 f9ad 	bl	800b1e4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009e90:	6a38      	ldr	r0, [r7, #32]
 8009e92:	f000 f94b 	bl	800a12c <prvBytesInBuffer>
 8009e96:	62b8      	str	r0, [r7, #40]	; 0x28
 8009e98:	e003      	b.n	8009ea2 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009e9a:	6a38      	ldr	r0, [r7, #32]
 8009e9c:	f000 f946 	bl	800a12c <prvBytesInBuffer>
 8009ea0:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8009ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d91d      	bls.n	8009ee6 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	6a38      	ldr	r0, [r7, #32]
 8009eb6:	f000 f81b 	bl	8009ef0 <prvReadMessageFromBuffer>
 8009eba:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d011      	beq.n	8009ee6 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8009ec2:	f000 fbe3 	bl	800a68c <vTaskSuspendAll>
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <xStreamBufferReceive+0x11c>
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	6958      	ldr	r0, [r3, #20]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f001 f9e4 	bl	800b2a4 <xTaskGenericNotify>
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	615a      	str	r2, [r3, #20]
 8009ee2:	f000 fbe1 	bl	800a6a8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3730      	adds	r7, #48	; 0x30
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b088      	sub	sp, #32
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d019      	beq.n	8009f38 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8009f0a:	f107 0110 	add.w	r1, r7, #16
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f890 	bl	800a038 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8009f24:	69fa      	ldr	r2, [r7, #28]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d907      	bls.n	8009f3c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	e001      	b.n	8009f3c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f878 	bl	800a038 <prvReadBytesFromBuffer>
 8009f48:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8009f4a:	697b      	ldr	r3, [r7, #20]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	; 0x28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	61fb      	str	r3, [r7, #28]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	bf28      	it	cs
 8009f90:	4613      	movcs	r3, r2
 8009f92:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	441a      	add	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d90a      	bls.n	8009fb8 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	61bb      	str	r3, [r7, #24]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	4413      	add	r3, r2
 8009fc0:	6a3a      	ldr	r2, [r7, #32]
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f004 fcd1 	bl	800e96c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d91c      	bls.n	800a00c <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	1ad2      	subs	r2, r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d90a      	bls.n	8009ff6 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	617b      	str	r3, [r7, #20]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6998      	ldr	r0, [r3, #24]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	18d1      	adds	r1, r2, r3
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	461a      	mov	r2, r3
 800a008:	f004 fcb0 	bl	800e96c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800a00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d304      	bcc.n	800a028 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02c:	605a      	str	r2, [r3, #4]

	return xCount;
 800a02e:	687b      	ldr	r3, [r7, #4]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3728      	adds	r7, #40	; 0x28
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	; 0x28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	bf28      	it	cs
 800a04e:	4613      	movcs	r3, r2
 800a050:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d064      	beq.n	800a122 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	4293      	cmp	r3, r2
 800a06a:	bf28      	it	cs
 800a06c:	4613      	movcs	r3, r2
 800a06e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d90a      	bls.n	800a08e <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	61bb      	str	r3, [r7, #24]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800a08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	441a      	add	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d90a      	bls.n	800a0b2 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	617b      	str	r3, [r7, #20]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	4413      	add	r3, r2
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	68b8      	ldr	r0, [r7, #8]
 800a0c0:	f004 fc54 	bl	800e96c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800a0c4:	6a3a      	ldr	r2, [r7, #32]
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d919      	bls.n	800a100 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800a0cc:	6a3a      	ldr	r2, [r7, #32]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	613b      	str	r3, [r7, #16]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	18d0      	adds	r0, r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6999      	ldr	r1, [r3, #24]
 800a0f4:	6a3a      	ldr	r2, [r7, #32]
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f004 fc36 	bl	800e96c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800a100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	4413      	add	r3, r2
 800a106:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10e:	429a      	cmp	r2, r3
 800a110:	d304      	bcc.n	800a11c <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a120:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a122:	6a3b      	ldr	r3, [r7, #32]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3728      	adds	r7, #40	; 0x28
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	429a      	cmp	r2, r3
 800a152:	d304      	bcc.n	800a15e <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a15e:	68fb      	ldr	r3, [r7, #12]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800a17a:	2355      	movs	r3, #85	; 0x55
 800a17c:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6979      	ldr	r1, [r7, #20]
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f004 fc00 	bl	800e988 <memset>
 800a188:	4602      	mov	r2, r0
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00a      	beq.n	800a1a6 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800a1a6:	2224      	movs	r2, #36	; 0x24
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f004 fbec 	bl	800e988 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a1c8:	771a      	strb	r2, [r3, #28]
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b08e      	sub	sp, #56	; 0x38
 800a1d6:	af04      	add	r7, sp, #16
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	623b      	str	r3, [r7, #32]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <xTaskCreateStatic+0x46>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	61fb      	str	r3, [r7, #28]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a218:	23bc      	movs	r3, #188	; 0xbc
 800a21a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2bbc      	cmp	r3, #188	; 0xbc
 800a220:	d00a      	beq.n	800a238 <xTaskCreateStatic+0x66>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	61bb      	str	r3, [r7, #24]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a238:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01e      	beq.n	800a27e <xTaskCreateStatic+0xac>
 800a240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a242:	2b00      	cmp	r3, #0
 800a244:	d01b      	beq.n	800a27e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	2202      	movs	r2, #2
 800a254:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a258:	2300      	movs	r3, #0
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	9302      	str	r3, [sp, #8]
 800a260:	f107 0314 	add.w	r3, r7, #20
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 f851 	bl	800a318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a278:	f000 f8f4 	bl	800a464 <prvAddNewTaskToReadyList>
 800a27c:	e001      	b.n	800a282 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a282:	697b      	ldr	r3, [r7, #20]
	}
 800a284:	4618      	mov	r0, r3
 800a286:	3728      	adds	r7, #40	; 0x28
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08c      	sub	sp, #48	; 0x30
 800a290:	af04      	add	r7, sp, #16
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	4613      	mov	r3, r2
 800a29a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 ffb9 	bl	800c218 <pvPortMalloc>
 800a2a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00e      	beq.n	800a2cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2ae:	20bc      	movs	r0, #188	; 0xbc
 800a2b0:	f001 ffb2 	bl	800c218 <pvPortMalloc>
 800a2b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
 800a2c2:	e005      	b.n	800a2d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f002 f873 	bl	800c3b0 <vPortFree>
 800a2ca:	e001      	b.n	800a2d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d017      	beq.n	800a306 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2de:	88fa      	ldrh	r2, [r7, #6]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9303      	str	r3, [sp, #12]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f80f 	bl	800a318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2fa:	69f8      	ldr	r0, [r7, #28]
 800a2fc:	f000 f8b2 	bl	800a464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a300:	2301      	movs	r3, #1
 800a302:	61bb      	str	r3, [r7, #24]
 800a304:	e002      	b.n	800a30c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a306:	f04f 33ff 	mov.w	r3, #4294967295
 800a30a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a30c:	69bb      	ldr	r3, [r7, #24]
	}
 800a30e:	4618      	mov	r0, r3
 800a310:	3720      	adds	r7, #32
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	461a      	mov	r2, r3
 800a330:	21a5      	movs	r1, #165	; 0xa5
 800a332:	f004 fb29 	bl	800e988 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a340:	3b01      	subs	r3, #1
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	617b      	str	r3, [r7, #20]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d01f      	beq.n	800a3b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a376:	2300      	movs	r3, #0
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	e012      	b.n	800a3a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	7819      	ldrb	r1, [r3, #0]
 800a384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	3334      	adds	r3, #52	; 0x34
 800a38c:	460a      	mov	r2, r1
 800a38e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	61fb      	str	r3, [r7, #28]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	2b0f      	cmp	r3, #15
 800a3a6:	d9e9      	bls.n	800a37c <prvInitialiseNewTask+0x64>
 800a3a8:	e000      	b.n	800a3ac <prvInitialiseNewTask+0x94>
			{
				break;
 800a3aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3b4:	e003      	b.n	800a3be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	2b37      	cmp	r3, #55	; 0x37
 800a3c2:	d901      	bls.n	800a3c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3c4:	2337      	movs	r3, #55	; 0x37
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	3304      	adds	r3, #4
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe f9fc 	bl	80087dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	3318      	adds	r3, #24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fe f9f7 	bl	80087dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	2200      	movs	r2, #0
 800a408:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	3354      	adds	r3, #84	; 0x54
 800a418:	2260      	movs	r2, #96	; 0x60
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f004 fab3 	bl	800e988 <memset>
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <prvInitialiseNewTask+0x140>)
 800a426:	659a      	str	r2, [r3, #88]	; 0x58
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <prvInitialiseNewTask+0x144>)
 800a42c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	4a0b      	ldr	r2, [pc, #44]	; (800a460 <prvInitialiseNewTask+0x148>)
 800a432:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	68f9      	ldr	r1, [r7, #12]
 800a438:	69b8      	ldr	r0, [r7, #24]
 800a43a:	f001 fc9d 	bl	800bd78 <pxPortInitialiseStack>
 800a43e:	4602      	mov	r2, r0
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a450:	bf00      	nop
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	0800f6e8 	.word	0x0800f6e8
 800a45c:	0800f708 	.word	0x0800f708
 800a460:	0800f6c8 	.word	0x0800f6c8

0800a464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a46c:	f001 fdb2 	bl	800bfd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a470:	4b2d      	ldr	r3, [pc, #180]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	4a2c      	ldr	r2, [pc, #176]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a47a:	4b2c      	ldr	r3, [pc, #176]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a488:	4b27      	ldr	r3, [pc, #156]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d110      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a490:	f000 fc4c 	bl	800ad2c <prvInitialiseTaskLists>
 800a494:	e00d      	b.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a496:	4b26      	ldr	r3, [pc, #152]	; (800a530 <prvAddNewTaskToReadyList+0xcc>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a49e:	4b23      	ldr	r3, [pc, #140]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d802      	bhi.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4ac:	4a1f      	ldr	r2, [pc, #124]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4b2:	4b20      	ldr	r3, [pc, #128]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4a1e      	ldr	r2, [pc, #120]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4bc:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c8:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <prvAddNewTaskToReadyList+0xd4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d903      	bls.n	800a4d8 <prvAddNewTaskToReadyList+0x74>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	4a18      	ldr	r2, [pc, #96]	; (800a538 <prvAddNewTaskToReadyList+0xd4>)
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4a15      	ldr	r2, [pc, #84]	; (800a53c <prvAddNewTaskToReadyList+0xd8>)
 800a4e6:	441a      	add	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe f981 	bl	80087f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4f4:	f001 fd9e 	bl	800c034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <prvAddNewTaskToReadyList+0xcc>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00e      	beq.n	800a51e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d207      	bcs.n	800a51e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a50e:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <prvAddNewTaskToReadyList+0xdc>)
 800a510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000ea4 	.word	0x20000ea4
 800a52c:	200009d0 	.word	0x200009d0
 800a530:	20000eb0 	.word	0x20000eb0
 800a534:	20000ec0 	.word	0x20000ec0
 800a538:	20000eac 	.word	0x20000eac
 800a53c:	200009d4 	.word	0x200009d4
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d017      	beq.n	800a586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <vTaskDelay+0x60>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <vTaskDelay+0x30>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60bb      	str	r3, [r7, #8]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a574:	f000 f88a 	bl	800a68c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a578:	2100      	movs	r1, #0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 f85a 	bl	800b634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a580:	f000 f892 	bl	800a6a8 <xTaskResumeAll>
 800a584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d107      	bne.n	800a59c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <vTaskDelay+0x64>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000ecc 	.word	0x20000ecc
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08a      	sub	sp, #40	; 0x28
 800a5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5ba:	463a      	mov	r2, r7
 800a5bc:	1d39      	adds	r1, r7, #4
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe f8b6 	bl	8008734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	9202      	str	r2, [sp, #8]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	460a      	mov	r2, r1
 800a5da:	4924      	ldr	r1, [pc, #144]	; (800a66c <vTaskStartScheduler+0xc0>)
 800a5dc:	4824      	ldr	r0, [pc, #144]	; (800a670 <vTaskStartScheduler+0xc4>)
 800a5de:	f7ff fdf8 	bl	800a1d2 <xTaskCreateStatic>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4a23      	ldr	r2, [pc, #140]	; (800a674 <vTaskStartScheduler+0xc8>)
 800a5e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5e8:	4b22      	ldr	r3, [pc, #136]	; (800a674 <vTaskStartScheduler+0xc8>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e001      	b.n	800a5fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d102      	bne.n	800a606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a600:	f001 f86c 	bl	800b6dc <xTimerCreateTimerTask>
 800a604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d11b      	bne.n	800a644 <vTaskStartScheduler+0x98>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	613b      	str	r3, [r7, #16]
}
 800a61e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a620:	4b15      	ldr	r3, [pc, #84]	; (800a678 <vTaskStartScheduler+0xcc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3354      	adds	r3, #84	; 0x54
 800a626:	4a15      	ldr	r2, [pc, #84]	; (800a67c <vTaskStartScheduler+0xd0>)
 800a628:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <vTaskStartScheduler+0xd4>)
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a632:	4b14      	ldr	r3, [pc, #80]	; (800a684 <vTaskStartScheduler+0xd8>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a638:	4b13      	ldr	r3, [pc, #76]	; (800a688 <vTaskStartScheduler+0xdc>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a63e:	f001 fc27 	bl	800be90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a642:	e00e      	b.n	800a662 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d10a      	bne.n	800a662 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <vTaskStartScheduler+0xb4>
}
 800a662:	bf00      	nop
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	0800f374 	.word	0x0800f374
 800a670:	0800acfd 	.word	0x0800acfd
 800a674:	20000ec8 	.word	0x20000ec8
 800a678:	200009d0 	.word	0x200009d0
 800a67c:	2000018c 	.word	0x2000018c
 800a680:	20000ec4 	.word	0x20000ec4
 800a684:	20000eb0 	.word	0x20000eb0
 800a688:	20000ea8 	.word	0x20000ea8

0800a68c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a690:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <vTaskSuspendAll+0x18>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	4a03      	ldr	r2, [pc, #12]	; (800a6a4 <vTaskSuspendAll+0x18>)
 800a698:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a69a:	bf00      	nop
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20000ecc 	.word	0x20000ecc

0800a6a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6b6:	4b42      	ldr	r3, [pc, #264]	; (800a7c0 <xTaskResumeAll+0x118>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	603b      	str	r3, [r7, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6d4:	f001 fc7e 	bl	800bfd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6d8:	4b39      	ldr	r3, [pc, #228]	; (800a7c0 <xTaskResumeAll+0x118>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	4a38      	ldr	r2, [pc, #224]	; (800a7c0 <xTaskResumeAll+0x118>)
 800a6e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6e2:	4b37      	ldr	r3, [pc, #220]	; (800a7c0 <xTaskResumeAll+0x118>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d162      	bne.n	800a7b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6ea:	4b36      	ldr	r3, [pc, #216]	; (800a7c4 <xTaskResumeAll+0x11c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d05e      	beq.n	800a7b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f2:	e02f      	b.n	800a754 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f4:	4b34      	ldr	r3, [pc, #208]	; (800a7c8 <xTaskResumeAll+0x120>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3318      	adds	r3, #24
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe f8d5 	bl	80088b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3304      	adds	r3, #4
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe f8d0 	bl	80088b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4b2d      	ldr	r3, [pc, #180]	; (800a7cc <xTaskResumeAll+0x124>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d903      	bls.n	800a724 <xTaskResumeAll+0x7c>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	4a2a      	ldr	r2, [pc, #168]	; (800a7cc <xTaskResumeAll+0x124>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a27      	ldr	r2, [pc, #156]	; (800a7d0 <xTaskResumeAll+0x128>)
 800a732:	441a      	add	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe f85b 	bl	80087f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a744:	4b23      	ldr	r3, [pc, #140]	; (800a7d4 <xTaskResumeAll+0x12c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d302      	bcc.n	800a754 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a74e:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <xTaskResumeAll+0x130>)
 800a750:	2201      	movs	r2, #1
 800a752:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a754:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <xTaskResumeAll+0x120>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1cb      	bne.n	800a6f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a762:	f000 fb85 	bl	800ae70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a766:	4b1d      	ldr	r3, [pc, #116]	; (800a7dc <xTaskResumeAll+0x134>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d010      	beq.n	800a794 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a772:	f000 f847 	bl	800a804 <xTaskIncrementTick>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a77c:	4b16      	ldr	r3, [pc, #88]	; (800a7d8 <xTaskResumeAll+0x130>)
 800a77e:	2201      	movs	r2, #1
 800a780:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3b01      	subs	r3, #1
 800a786:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1f1      	bne.n	800a772 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <xTaskResumeAll+0x134>)
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a794:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <xTaskResumeAll+0x130>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d009      	beq.n	800a7b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7a0:	4b0f      	ldr	r3, [pc, #60]	; (800a7e0 <xTaskResumeAll+0x138>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7b0:	f001 fc40 	bl	800c034 <vPortExitCritical>

	return xAlreadyYielded;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000ecc 	.word	0x20000ecc
 800a7c4:	20000ea4 	.word	0x20000ea4
 800a7c8:	20000e64 	.word	0x20000e64
 800a7cc:	20000eac 	.word	0x20000eac
 800a7d0:	200009d4 	.word	0x200009d4
 800a7d4:	200009d0 	.word	0x200009d0
 800a7d8:	20000eb8 	.word	0x20000eb8
 800a7dc:	20000eb4 	.word	0x20000eb4
 800a7e0:	e000ed04 	.word	0xe000ed04

0800a7e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <xTaskGetTickCount+0x1c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7f0:	687b      	ldr	r3, [r7, #4]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	20000ea8 	.word	0x20000ea8

0800a804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a80e:	4b4f      	ldr	r3, [pc, #316]	; (800a94c <xTaskIncrementTick+0x148>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 808f 	bne.w	800a936 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a818:	4b4d      	ldr	r3, [pc, #308]	; (800a950 <xTaskIncrementTick+0x14c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3301      	adds	r3, #1
 800a81e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a820:	4a4b      	ldr	r2, [pc, #300]	; (800a950 <xTaskIncrementTick+0x14c>)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d120      	bne.n	800a86e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a82c:	4b49      	ldr	r3, [pc, #292]	; (800a954 <xTaskIncrementTick+0x150>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <xTaskIncrementTick+0x48>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	603b      	str	r3, [r7, #0]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xTaskIncrementTick+0x46>
 800a84c:	4b41      	ldr	r3, [pc, #260]	; (800a954 <xTaskIncrementTick+0x150>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	4b41      	ldr	r3, [pc, #260]	; (800a958 <xTaskIncrementTick+0x154>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a3f      	ldr	r2, [pc, #252]	; (800a954 <xTaskIncrementTick+0x150>)
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	4a3f      	ldr	r2, [pc, #252]	; (800a958 <xTaskIncrementTick+0x154>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	4b3e      	ldr	r3, [pc, #248]	; (800a95c <xTaskIncrementTick+0x158>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3301      	adds	r3, #1
 800a866:	4a3d      	ldr	r2, [pc, #244]	; (800a95c <xTaskIncrementTick+0x158>)
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	f000 fb01 	bl	800ae70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a86e:	4b3c      	ldr	r3, [pc, #240]	; (800a960 <xTaskIncrementTick+0x15c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	d349      	bcc.n	800a90c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a878:	4b36      	ldr	r3, [pc, #216]	; (800a954 <xTaskIncrementTick+0x150>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d104      	bne.n	800a88c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a882:	4b37      	ldr	r3, [pc, #220]	; (800a960 <xTaskIncrementTick+0x15c>)
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	601a      	str	r2, [r3, #0]
					break;
 800a88a:	e03f      	b.n	800a90c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88c:	4b31      	ldr	r3, [pc, #196]	; (800a954 <xTaskIncrementTick+0x150>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d203      	bcs.n	800a8ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8a4:	4a2e      	ldr	r2, [pc, #184]	; (800a960 <xTaskIncrementTick+0x15c>)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8aa:	e02f      	b.n	800a90c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fd fffd 	bl	80088b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	3318      	adds	r3, #24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd fff4 	bl	80088b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8cc:	4b25      	ldr	r3, [pc, #148]	; (800a964 <xTaskIncrementTick+0x160>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <xTaskIncrementTick+0xd8>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	4a22      	ldr	r2, [pc, #136]	; (800a964 <xTaskIncrementTick+0x160>)
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4a1f      	ldr	r2, [pc, #124]	; (800a968 <xTaskIncrementTick+0x164>)
 800a8ea:	441a      	add	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f7fd ff7f 	bl	80087f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <xTaskIncrementTick+0x168>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	429a      	cmp	r2, r3
 800a904:	d3b8      	bcc.n	800a878 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a906:	2301      	movs	r3, #1
 800a908:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a90a:	e7b5      	b.n	800a878 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a90c:	4b17      	ldr	r3, [pc, #92]	; (800a96c <xTaskIncrementTick+0x168>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a912:	4915      	ldr	r1, [pc, #84]	; (800a968 <xTaskIncrementTick+0x164>)
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d901      	bls.n	800a928 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a924:	2301      	movs	r3, #1
 800a926:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a928:	4b11      	ldr	r3, [pc, #68]	; (800a970 <xTaskIncrementTick+0x16c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d007      	beq.n	800a940 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e004      	b.n	800a940 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a936:	4b0f      	ldr	r3, [pc, #60]	; (800a974 <xTaskIncrementTick+0x170>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	4a0d      	ldr	r2, [pc, #52]	; (800a974 <xTaskIncrementTick+0x170>)
 800a93e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a940:	697b      	ldr	r3, [r7, #20]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000ecc 	.word	0x20000ecc
 800a950:	20000ea8 	.word	0x20000ea8
 800a954:	20000e5c 	.word	0x20000e5c
 800a958:	20000e60 	.word	0x20000e60
 800a95c:	20000ebc 	.word	0x20000ebc
 800a960:	20000ec4 	.word	0x20000ec4
 800a964:	20000eac 	.word	0x20000eac
 800a968:	200009d4 	.word	0x200009d4
 800a96c:	200009d0 	.word	0x200009d0
 800a970:	20000eb8 	.word	0x20000eb8
 800a974:	20000eb4 	.word	0x20000eb4

0800a978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a97e:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <vTaskSwitchContext+0xb0>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a986:	4b29      	ldr	r3, [pc, #164]	; (800aa2c <vTaskSwitchContext+0xb4>)
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a98c:	e046      	b.n	800aa1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a98e:	4b27      	ldr	r3, [pc, #156]	; (800aa2c <vTaskSwitchContext+0xb4>)
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	4b26      	ldr	r3, [pc, #152]	; (800aa30 <vTaskSwitchContext+0xb8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	e010      	b.n	800a9be <vTaskSwitchContext+0x46>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <vTaskSwitchContext+0x3e>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	491d      	ldr	r1, [pc, #116]	; (800aa34 <vTaskSwitchContext+0xbc>)
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0e4      	beq.n	800a99c <vTaskSwitchContext+0x24>
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <vTaskSwitchContext+0xbc>)
 800a9de:	4413      	add	r3, r2
 800a9e0:	60bb      	str	r3, [r7, #8]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	605a      	str	r2, [r3, #4]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d104      	bne.n	800aa02 <vTaskSwitchContext+0x8a>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	4a0b      	ldr	r2, [pc, #44]	; (800aa38 <vTaskSwitchContext+0xc0>)
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <vTaskSwitchContext+0xb8>)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <vTaskSwitchContext+0xc0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3354      	adds	r3, #84	; 0x54
 800aa18:	4a08      	ldr	r2, [pc, #32]	; (800aa3c <vTaskSwitchContext+0xc4>)
 800aa1a:	6013      	str	r3, [r2, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	20000ecc 	.word	0x20000ecc
 800aa2c:	20000eb8 	.word	0x20000eb8
 800aa30:	20000eac 	.word	0x20000eac
 800aa34:	200009d4 	.word	0x200009d4
 800aa38:	200009d0 	.word	0x200009d0
 800aa3c:	2000018c 	.word	0x2000018c

0800aa40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	60fb      	str	r3, [r7, #12]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa66:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <vTaskPlaceOnEventList+0x44>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3318      	adds	r3, #24
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fd fee5 	bl	800883e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa74:	2101      	movs	r1, #1
 800aa76:	6838      	ldr	r0, [r7, #0]
 800aa78:	f000 fddc 	bl	800b634 <prvAddCurrentTaskToDelayedList>
}
 800aa7c:	bf00      	nop
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	200009d0 	.word	0x200009d0

0800aa88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	617b      	str	r3, [r7, #20]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <vTaskPlaceOnEventListRestricted+0x54>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3318      	adds	r3, #24
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7fd fe9c 	bl	80087f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	f000 fdb1 	bl	800b634 <prvAddCurrentTaskToDelayedList>
	}
 800aad2:	bf00      	nop
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200009d0 	.word	0x200009d0

0800aae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	e7fe      	b.n	800ab0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	3318      	adds	r3, #24
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd fecd 	bl	80088b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab16:	4b1e      	ldr	r3, [pc, #120]	; (800ab90 <xTaskRemoveFromEventList+0xb0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d11d      	bne.n	800ab5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fd fec4 	bl	80088b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4b19      	ldr	r3, [pc, #100]	; (800ab94 <xTaskRemoveFromEventList+0xb4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d903      	bls.n	800ab3c <xTaskRemoveFromEventList+0x5c>
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	4a16      	ldr	r2, [pc, #88]	; (800ab94 <xTaskRemoveFromEventList+0xb4>)
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4a13      	ldr	r2, [pc, #76]	; (800ab98 <xTaskRemoveFromEventList+0xb8>)
 800ab4a:	441a      	add	r2, r3
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7fd fe4f 	bl	80087f6 <vListInsertEnd>
 800ab58:	e005      	b.n	800ab66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	3318      	adds	r3, #24
 800ab5e:	4619      	mov	r1, r3
 800ab60:	480e      	ldr	r0, [pc, #56]	; (800ab9c <xTaskRemoveFromEventList+0xbc>)
 800ab62:	f7fd fe48 	bl	80087f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <xTaskRemoveFromEventList+0xc0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d905      	bls.n	800ab80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <xTaskRemoveFromEventList+0xc4>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e001      	b.n	800ab84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab84:	697b      	ldr	r3, [r7, #20]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000ecc 	.word	0x20000ecc
 800ab94:	20000eac 	.word	0x20000eac
 800ab98:	200009d4 	.word	0x200009d4
 800ab9c:	20000e64 	.word	0x20000e64
 800aba0:	200009d0 	.word	0x200009d0
 800aba4:	20000eb8 	.word	0x20000eb8

0800aba8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60fb      	str	r3, [r7, #12]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800abcc:	f001 fa02 	bl	800bfd4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <vTaskSetTimeOutState+0x44>)
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <vTaskSetTimeOutState+0x48>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800abe0:	f001 fa28 	bl	800c034 <vPortExitCritical>
}
 800abe4:	bf00      	nop
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20000ebc 	.word	0x20000ebc
 800abf0:	20000ea8 	.word	0x20000ea8

0800abf4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <vTaskInternalSetTimeOutState+0x24>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <vTaskInternalSetTimeOutState+0x28>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	605a      	str	r2, [r3, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	20000ebc 	.word	0x20000ebc
 800ac1c:	20000ea8 	.word	0x20000ea8

0800ac20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	613b      	str	r3, [r7, #16]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	60fb      	str	r3, [r7, #12]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac62:	f001 f9b7 	bl	800bfd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac66:	4b1d      	ldr	r3, [pc, #116]	; (800acdc <xTaskCheckForTimeOut+0xbc>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	69ba      	ldr	r2, [r7, #24]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d102      	bne.n	800ac86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61fb      	str	r3, [r7, #28]
 800ac84:	e023      	b.n	800acce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <xTaskCheckForTimeOut+0xc0>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d007      	beq.n	800aca2 <xTaskCheckForTimeOut+0x82>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d302      	bcc.n	800aca2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	e015      	b.n	800acce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d20b      	bcs.n	800acc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	1ad2      	subs	r2, r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff ff9b 	bl	800abf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acbe:	2300      	movs	r3, #0
 800acc0:	61fb      	str	r3, [r7, #28]
 800acc2:	e004      	b.n	800acce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800acca:	2301      	movs	r3, #1
 800accc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acce:	f001 f9b1 	bl	800c034 <vPortExitCritical>

	return xReturn;
 800acd2:	69fb      	ldr	r3, [r7, #28]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3720      	adds	r7, #32
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20000ea8 	.word	0x20000ea8
 800ace0:	20000ebc 	.word	0x20000ebc

0800ace4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ace8:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <vTaskMissedYield+0x14>)
 800acea:	2201      	movs	r2, #1
 800acec:	601a      	str	r2, [r3, #0]
}
 800acee:	bf00      	nop
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	20000eb8 	.word	0x20000eb8

0800acfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad04:	f000 f852 	bl	800adac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <prvIdleTask+0x28>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d9f9      	bls.n	800ad04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <prvIdleTask+0x2c>)
 800ad12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad20:	e7f0      	b.n	800ad04 <prvIdleTask+0x8>
 800ad22:	bf00      	nop
 800ad24:	200009d4 	.word	0x200009d4
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad32:	2300      	movs	r3, #0
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	e00c      	b.n	800ad52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a12      	ldr	r2, [pc, #72]	; (800ad8c <prvInitialiseTaskLists+0x60>)
 800ad44:	4413      	add	r3, r2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fd fd28 	bl	800879c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	607b      	str	r3, [r7, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b37      	cmp	r3, #55	; 0x37
 800ad56:	d9ef      	bls.n	800ad38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad58:	480d      	ldr	r0, [pc, #52]	; (800ad90 <prvInitialiseTaskLists+0x64>)
 800ad5a:	f7fd fd1f 	bl	800879c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad5e:	480d      	ldr	r0, [pc, #52]	; (800ad94 <prvInitialiseTaskLists+0x68>)
 800ad60:	f7fd fd1c 	bl	800879c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad64:	480c      	ldr	r0, [pc, #48]	; (800ad98 <prvInitialiseTaskLists+0x6c>)
 800ad66:	f7fd fd19 	bl	800879c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad6a:	480c      	ldr	r0, [pc, #48]	; (800ad9c <prvInitialiseTaskLists+0x70>)
 800ad6c:	f7fd fd16 	bl	800879c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad70:	480b      	ldr	r0, [pc, #44]	; (800ada0 <prvInitialiseTaskLists+0x74>)
 800ad72:	f7fd fd13 	bl	800879c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad76:	4b0b      	ldr	r3, [pc, #44]	; (800ada4 <prvInitialiseTaskLists+0x78>)
 800ad78:	4a05      	ldr	r2, [pc, #20]	; (800ad90 <prvInitialiseTaskLists+0x64>)
 800ad7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <prvInitialiseTaskLists+0x7c>)
 800ad7e:	4a05      	ldr	r2, [pc, #20]	; (800ad94 <prvInitialiseTaskLists+0x68>)
 800ad80:	601a      	str	r2, [r3, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200009d4 	.word	0x200009d4
 800ad90:	20000e34 	.word	0x20000e34
 800ad94:	20000e48 	.word	0x20000e48
 800ad98:	20000e64 	.word	0x20000e64
 800ad9c:	20000e78 	.word	0x20000e78
 800ada0:	20000e90 	.word	0x20000e90
 800ada4:	20000e5c 	.word	0x20000e5c
 800ada8:	20000e60 	.word	0x20000e60

0800adac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adb2:	e019      	b.n	800ade8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adb4:	f001 f90e 	bl	800bfd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb8:	4b10      	ldr	r3, [pc, #64]	; (800adfc <prvCheckTasksWaitingTermination+0x50>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3304      	adds	r3, #4
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fd fd73 	bl	80088b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800adca:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <prvCheckTasksWaitingTermination+0x54>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3b01      	subs	r3, #1
 800add0:	4a0b      	ldr	r2, [pc, #44]	; (800ae00 <prvCheckTasksWaitingTermination+0x54>)
 800add2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800add4:	4b0b      	ldr	r3, [pc, #44]	; (800ae04 <prvCheckTasksWaitingTermination+0x58>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3b01      	subs	r3, #1
 800adda:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <prvCheckTasksWaitingTermination+0x58>)
 800addc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800adde:	f001 f929 	bl	800c034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f810 	bl	800ae08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ade8:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <prvCheckTasksWaitingTermination+0x58>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e1      	bne.n	800adb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20000e78 	.word	0x20000e78
 800ae00:	20000ea4 	.word	0x20000ea4
 800ae04:	20000e8c 	.word	0x20000e8c

0800ae08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3354      	adds	r3, #84	; 0x54
 800ae14:	4618      	mov	r0, r3
 800ae16:	f003 fe61 	bl	800eadc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d108      	bne.n	800ae36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fac1 	bl	800c3b0 <vPortFree>
				vPortFree( pxTCB );
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f001 fabe 	bl	800c3b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae34:	e018      	b.n	800ae68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d103      	bne.n	800ae48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 fab5 	bl	800c3b0 <vPortFree>
	}
 800ae46:	e00f      	b.n	800ae68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d00a      	beq.n	800ae68 <prvDeleteTCB+0x60>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60fb      	str	r3, [r7, #12]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <prvDeleteTCB+0x5e>
	}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae76:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <prvResetNextTaskUnblockTime+0x38>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d104      	bne.n	800ae8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <prvResetNextTaskUnblockTime+0x3c>)
 800ae82:	f04f 32ff 	mov.w	r2, #4294967295
 800ae86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae88:	e008      	b.n	800ae9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <prvResetNextTaskUnblockTime+0x38>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4a04      	ldr	r2, [pc, #16]	; (800aeac <prvResetNextTaskUnblockTime+0x3c>)
 800ae9a:	6013      	str	r3, [r2, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000e5c 	.word	0x20000e5c
 800aeac:	20000ec4 	.word	0x20000ec4

0800aeb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <xTaskGetCurrentTaskHandle+0x1c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aebc:	687b      	ldr	r3, [r7, #4]
	}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200009d0 	.word	0x200009d0

0800aed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <xTaskGetSchedulerState+0x34>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d102      	bne.n	800aee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aede:	2301      	movs	r3, #1
 800aee0:	607b      	str	r3, [r7, #4]
 800aee2:	e008      	b.n	800aef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aee4:	4b08      	ldr	r3, [pc, #32]	; (800af08 <xTaskGetSchedulerState+0x38>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aeec:	2302      	movs	r3, #2
 800aeee:	607b      	str	r3, [r7, #4]
 800aef0:	e001      	b.n	800aef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aef2:	2300      	movs	r3, #0
 800aef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aef6:	687b      	ldr	r3, [r7, #4]
	}
 800aef8:	4618      	mov	r0, r3
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	20000eb0 	.word	0x20000eb0
 800af08:	20000ecc 	.word	0x20000ecc

0800af0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d051      	beq.n	800afc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	4b2a      	ldr	r3, [pc, #168]	; (800afd0 <xTaskPriorityInherit+0xc4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d241      	bcs.n	800afb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	db06      	blt.n	800af46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af38:	4b25      	ldr	r3, [pc, #148]	; (800afd0 <xTaskPriorityInherit+0xc4>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6959      	ldr	r1, [r3, #20]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <xTaskPriorityInherit+0xc8>)
 800af58:	4413      	add	r3, r2
 800af5a:	4299      	cmp	r1, r3
 800af5c:	d122      	bne.n	800afa4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	3304      	adds	r3, #4
 800af62:	4618      	mov	r0, r3
 800af64:	f7fd fca4 	bl	80088b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af68:	4b19      	ldr	r3, [pc, #100]	; (800afd0 <xTaskPriorityInherit+0xc4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <xTaskPriorityInherit+0xcc>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d903      	bls.n	800af86 <xTaskPriorityInherit+0x7a>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <xTaskPriorityInherit+0xcc>)
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <xTaskPriorityInherit+0xc8>)
 800af94:	441a      	add	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3304      	adds	r3, #4
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fd fc2a 	bl	80087f6 <vListInsertEnd>
 800afa2:	e004      	b.n	800afae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <xTaskPriorityInherit+0xc4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afae:	2301      	movs	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e008      	b.n	800afc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <xTaskPriorityInherit+0xc4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d201      	bcs.n	800afc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afc2:	2301      	movs	r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afc6:	68fb      	ldr	r3, [r7, #12]
	}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	200009d0 	.word	0x200009d0
 800afd4:	200009d4 	.word	0x200009d4
 800afd8:	20000eac 	.word	0x20000eac

0800afdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d056      	beq.n	800b0a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aff2:	4b2e      	ldr	r3, [pc, #184]	; (800b0ac <xTaskPriorityDisinherit+0xd0>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d00a      	beq.n	800b012 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	60fb      	str	r3, [r7, #12]
}
 800b00e:	bf00      	nop
 800b010:	e7fe      	b.n	800b010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	60bb      	str	r3, [r7, #8]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b034:	1e5a      	subs	r2, r3, #1
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b042:	429a      	cmp	r2, r3
 800b044:	d02c      	beq.n	800b0a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d128      	bne.n	800b0a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	3304      	adds	r3, #4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd fc2c 	bl	80088b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <xTaskPriorityDisinherit+0xd4>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	429a      	cmp	r2, r3
 800b076:	d903      	bls.n	800b080 <xTaskPriorityDisinherit+0xa4>
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	4a0c      	ldr	r2, [pc, #48]	; (800b0b0 <xTaskPriorityDisinherit+0xd4>)
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4a09      	ldr	r2, [pc, #36]	; (800b0b4 <xTaskPriorityDisinherit+0xd8>)
 800b08e:	441a      	add	r2, r3
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	3304      	adds	r3, #4
 800b094:	4619      	mov	r1, r3
 800b096:	4610      	mov	r0, r2
 800b098:	f7fd fbad 	bl	80087f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0a0:	697b      	ldr	r3, [r7, #20]
	}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	200009d0 	.word	0x200009d0
 800b0b0:	20000eac 	.word	0x20000eac
 800b0b4:	200009d4 	.word	0x200009d4

0800b0b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d06a      	beq.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	60fb      	str	r3, [r7, #12]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d902      	bls.n	800b0fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	61fb      	str	r3, [r7, #28]
 800b0fc:	e002      	b.n	800b104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b102:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d04b      	beq.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	429a      	cmp	r2, r3
 800b116:	d146      	bne.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b118:	4b25      	ldr	r3, [pc, #148]	; (800b1b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d10a      	bne.n	800b138 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	60bb      	str	r3, [r7, #8]
}
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	69fa      	ldr	r2, [r7, #28]
 800b142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	db04      	blt.n	800b156 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	6959      	ldr	r1, [r3, #20]
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4a13      	ldr	r2, [pc, #76]	; (800b1b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b166:	4413      	add	r3, r2
 800b168:	4299      	cmp	r1, r3
 800b16a:	d11c      	bne.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	3304      	adds	r3, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f7fd fb9d 	bl	80088b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d903      	bls.n	800b18a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	4a0c      	ldr	r2, [pc, #48]	; (800b1b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18e:	4613      	mov	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4a07      	ldr	r2, [pc, #28]	; (800b1b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b198:	441a      	add	r2, r3
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fd fb28 	bl	80087f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	200009d0 	.word	0x200009d0
 800b1b4:	200009d4 	.word	0x200009d4
 800b1b8:	20000eac 	.word	0x20000eac

0800b1bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b1bc:	b480      	push	{r7}
 800b1be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1ce:	3201      	adds	r2, #1
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b1d2:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
	}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	200009d0 	.word	0x200009d0

0800b1e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b1f2:	f000 feef 	bl	800bfd4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b1f6:	4b29      	ldr	r3, [pc, #164]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	d01c      	beq.n	800b23e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b204:	4b25      	ldr	r3, [pc, #148]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	43d2      	mvns	r2, r2
 800b210:	400a      	ands	r2, r1
 800b212:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00b      	beq.n	800b23e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b226:	2101      	movs	r1, #1
 800b228:	6838      	ldr	r0, [r7, #0]
 800b22a:	f000 fa03 	bl	800b634 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b22e:	4b1c      	ldr	r3, [pc, #112]	; (800b2a0 <xTaskNotifyWait+0xbc>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b23e:	f000 fef9 	bl	800c034 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b242:	f000 fec7 	bl	800bfd4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b24c:	4b13      	ldr	r3, [pc, #76]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b258:	4b10      	ldr	r3, [pc, #64]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d002      	beq.n	800b26c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e00a      	b.n	800b282 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b26c:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	43d2      	mvns	r2, r2
 800b278:	400a      	ands	r2, r1
 800b27a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800b27e:	2301      	movs	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <xTaskNotifyWait+0xb8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b28c:	f000 fed2 	bl	800c034 <vPortExitCritical>

		return xReturn;
 800b290:	697b      	ldr	r3, [r7, #20]
	}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200009d0 	.word	0x200009d0
 800b2a0:	e000ed04 	.word	0xe000ed04

0800b2a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <xTaskGenericNotify+0x30>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	61bb      	str	r3, [r7, #24]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b2d8:	f000 fe7c 	bl	800bfd4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d004      	beq.n	800b2ec <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b2f2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d82d      	bhi.n	800b35e <xTaskGenericNotify+0xba>
 800b302:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <xTaskGenericNotify+0x64>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b381 	.word	0x0800b381
 800b30c:	0800b31d 	.word	0x0800b31d
 800b310:	0800b32f 	.word	0x0800b32f
 800b314:	0800b33f 	.word	0x0800b33f
 800b318:	0800b349 	.word	0x0800b349
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	431a      	orrs	r2, r3
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b32c:	e02b      	b.n	800b386 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b33c:	e023      	b.n	800b386 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b346:	e01e      	b.n	800b386 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b348:	7ffb      	ldrb	r3, [r7, #31]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d004      	beq.n	800b358 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b356:	e016      	b.n	800b386 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b358:	2300      	movs	r3, #0
 800b35a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b35c:	e013      	b.n	800b386 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b368:	d00c      	beq.n	800b384 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	617b      	str	r3, [r7, #20]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <xTaskGenericNotify+0xda>
					break;
 800b380:	bf00      	nop
 800b382:	e000      	b.n	800b386 <xTaskGenericNotify+0xe2>

					break;
 800b384:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b386:	7ffb      	ldrb	r3, [r7, #31]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d13a      	bne.n	800b402 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	3304      	adds	r3, #4
 800b390:	4618      	mov	r0, r3
 800b392:	f7fd fa8d 	bl	80088b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39a:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <xTaskGenericNotify+0x16c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d903      	bls.n	800b3aa <xTaskGenericNotify+0x106>
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	4a1a      	ldr	r2, [pc, #104]	; (800b410 <xTaskGenericNotify+0x16c>)
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4a17      	ldr	r2, [pc, #92]	; (800b414 <xTaskGenericNotify+0x170>)
 800b3b8:	441a      	add	r2, r3
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7fd fa18 	bl	80087f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <xTaskGenericNotify+0x140>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	613b      	str	r3, [r7, #16]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <xTaskGenericNotify+0x174>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d907      	bls.n	800b402 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <xTaskGenericNotify+0x178>)
 800b3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b402:	f000 fe17 	bl	800c034 <vPortExitCritical>

		return xReturn;
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b408:	4618      	mov	r0, r3
 800b40a:	3728      	adds	r7, #40	; 0x28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20000eac 	.word	0x20000eac
 800b414:	200009d4 	.word	0x200009d4
 800b418:	200009d0 	.word	0x200009d0
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08e      	sub	sp, #56	; 0x38
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b430:	2301      	movs	r3, #1
 800b432:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10a      	bne.n	800b450 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b450:	f000 fea2 	bl	800c198 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b458:	f3ef 8211 	mrs	r2, BASEPRI
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	623a      	str	r2, [r7, #32]
 800b46e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b470:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	2202      	movs	r2, #2
 800b492:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d82f      	bhi.n	800b4fc <xTaskGenericNotifyFromISR+0xdc>
 800b49c:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <xTaskGenericNotifyFromISR+0x84>)
 800b49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a2:	bf00      	nop
 800b4a4:	0800b51f 	.word	0x0800b51f
 800b4a8:	0800b4b9 	.word	0x0800b4b9
 800b4ac:	0800b4cb 	.word	0x0800b4cb
 800b4b0:	0800b4db 	.word	0x0800b4db
 800b4b4:	0800b4e5 	.word	0x0800b4e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b4c8:	e02c      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b4d8:	e024      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b4e2:	e01f      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b4e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d004      	beq.n	800b4f6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b4f4:	e016      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b4fa:	e013      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b506:	d00c      	beq.n	800b522 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	61bb      	str	r3, [r7, #24]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b51e:	bf00      	nop
 800b520:	e000      	b.n	800b524 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b522:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d146      	bne.n	800b5ba <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	617b      	str	r3, [r7, #20]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b54a:	4b21      	ldr	r3, [pc, #132]	; (800b5d0 <xTaskGenericNotifyFromISR+0x1b0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d11d      	bne.n	800b58e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	3304      	adds	r3, #4
 800b556:	4618      	mov	r0, r3
 800b558:	f7fd f9aa 	bl	80088b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <xTaskGenericNotifyFromISR+0x1b4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	d903      	bls.n	800b570 <xTaskGenericNotifyFromISR+0x150>
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	4a19      	ldr	r2, [pc, #100]	; (800b5d4 <xTaskGenericNotifyFromISR+0x1b4>)
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4a16      	ldr	r2, [pc, #88]	; (800b5d8 <xTaskGenericNotifyFromISR+0x1b8>)
 800b57e:	441a      	add	r2, r3
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	3304      	adds	r3, #4
 800b584:	4619      	mov	r1, r3
 800b586:	4610      	mov	r0, r2
 800b588:	f7fd f935 	bl	80087f6 <vListInsertEnd>
 800b58c:	e005      	b.n	800b59a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	3318      	adds	r3, #24
 800b592:	4619      	mov	r1, r3
 800b594:	4811      	ldr	r0, [pc, #68]	; (800b5dc <xTaskGenericNotifyFromISR+0x1bc>)
 800b596:	f7fd f92e 	bl	80087f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <xTaskGenericNotifyFromISR+0x1c0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d908      	bls.n	800b5ba <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <xTaskGenericNotifyFromISR+0x1c4>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f383 8811 	msr	BASEPRI, r3
}
 800b5c4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3738      	adds	r7, #56	; 0x38
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	20000ecc 	.word	0x20000ecc
 800b5d4:	20000eac 	.word	0x20000eac
 800b5d8:	200009d4 	.word	0x200009d4
 800b5dc:	20000e64 	.word	0x20000e64
 800b5e0:	200009d0 	.word	0x200009d0
 800b5e4:	20000eb8 	.word	0x20000eb8

0800b5e8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d102      	bne.n	800b5fc <xTaskNotifyStateClear+0x14>
 800b5f6:	4b0e      	ldr	r3, [pc, #56]	; (800b630 <xTaskNotifyStateClear+0x48>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	e000      	b.n	800b5fe <xTaskNotifyStateClear+0x16>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b600:	f000 fce8 	bl	800bfd4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d106      	bne.n	800b61e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800b618:	2301      	movs	r3, #1
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	e001      	b.n	800b622 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b622:	f000 fd07 	bl	800c034 <vPortExitCritical>

		return xReturn;
 800b626:	68fb      	ldr	r3, [r7, #12]
	}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200009d0 	.word	0x200009d0

0800b634 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b63e:	4b21      	ldr	r3, [pc, #132]	; (800b6c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b644:	4b20      	ldr	r3, [pc, #128]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3304      	adds	r3, #4
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fd f930 	bl	80088b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b656:	d10a      	bne.n	800b66e <prvAddCurrentTaskToDelayedList+0x3a>
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d007      	beq.n	800b66e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b65e:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3304      	adds	r3, #4
 800b664:	4619      	mov	r1, r3
 800b666:	4819      	ldr	r0, [pc, #100]	; (800b6cc <prvAddCurrentTaskToDelayedList+0x98>)
 800b668:	f7fd f8c5 	bl	80087f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b66c:	e026      	b.n	800b6bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	429a      	cmp	r2, r3
 800b684:	d209      	bcs.n	800b69a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3304      	adds	r3, #4
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7fd f8d3 	bl	800883e <vListInsert>
}
 800b698:	e010      	b.n	800b6bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b69a:	4b0e      	ldr	r3, [pc, #56]	; (800b6d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	f7fd f8c9 	bl	800883e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d202      	bcs.n	800b6bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6b6:	4a08      	ldr	r2, [pc, #32]	; (800b6d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6013      	str	r3, [r2, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20000ea8 	.word	0x20000ea8
 800b6c8:	200009d0 	.word	0x200009d0
 800b6cc:	20000e90 	.word	0x20000e90
 800b6d0:	20000e60 	.word	0x20000e60
 800b6d4:	20000e5c 	.word	0x20000e5c
 800b6d8:	20000ec4 	.word	0x20000ec4

0800b6dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08a      	sub	sp, #40	; 0x28
 800b6e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6e6:	f000 fb07 	bl	800bcf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <xTimerCreateTimerTask+0x80>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d021      	beq.n	800b736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6fa:	1d3a      	adds	r2, r7, #4
 800b6fc:	f107 0108 	add.w	r1, r7, #8
 800b700:	f107 030c 	add.w	r3, r7, #12
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd f82f 	bl	8008768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	9202      	str	r2, [sp, #8]
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	2302      	movs	r3, #2
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	2300      	movs	r3, #0
 800b71a:	460a      	mov	r2, r1
 800b71c:	4910      	ldr	r1, [pc, #64]	; (800b760 <xTimerCreateTimerTask+0x84>)
 800b71e:	4811      	ldr	r0, [pc, #68]	; (800b764 <xTimerCreateTimerTask+0x88>)
 800b720:	f7fe fd57 	bl	800a1d2 <xTaskCreateStatic>
 800b724:	4603      	mov	r3, r0
 800b726:	4a10      	ldr	r2, [pc, #64]	; (800b768 <xTimerCreateTimerTask+0x8c>)
 800b728:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b72a:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <xTimerCreateTimerTask+0x8c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b732:	2301      	movs	r3, #1
 800b734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10a      	bne.n	800b752 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	613b      	str	r3, [r7, #16]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b752:	697b      	ldr	r3, [r7, #20]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000f00 	.word	0x20000f00
 800b760:	0800f37c 	.word	0x0800f37c
 800b764:	0800b8a1 	.word	0x0800b8a1
 800b768:	20000f04 	.word	0x20000f04

0800b76c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	; 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10a      	bne.n	800b79a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	623b      	str	r3, [r7, #32]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b79a:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <xTimerGenericCommand+0x98>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d02a      	beq.n	800b7f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b05      	cmp	r3, #5
 800b7b2:	dc18      	bgt.n	800b7e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7b4:	f7ff fb8c 	bl	800aed0 <xTaskGetSchedulerState>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d109      	bne.n	800b7d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7be:	4b11      	ldr	r3, [pc, #68]	; (800b804 <xTimerGenericCommand+0x98>)
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	f107 0110 	add.w	r1, r7, #16
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ca:	f7fd fa43 	bl	8008c54 <xQueueGenericSend>
 800b7ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b7d0:	e012      	b.n	800b7f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <xTimerGenericCommand+0x98>)
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	f107 0110 	add.w	r1, r7, #16
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f7fd fa39 	bl	8008c54 <xQueueGenericSend>
 800b7e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b7e4:	e008      	b.n	800b7f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <xTimerGenericCommand+0x98>)
 800b7e8:	6818      	ldr	r0, [r3, #0]
 800b7ea:	f107 0110 	add.w	r1, r7, #16
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	f7fd fb2d 	bl	8008e50 <xQueueGenericSendFromISR>
 800b7f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3728      	adds	r7, #40	; 0x28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20000f00 	.word	0x20000f00

0800b808 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af02      	add	r7, sp, #8
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b812:	4b22      	ldr	r3, [pc, #136]	; (800b89c <prvProcessExpiredTimer+0x94>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	3304      	adds	r3, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd f845 	bl	80088b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b82c:	f003 0304 	and.w	r3, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	d022      	beq.n	800b87a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	699a      	ldr	r2, [r3, #24]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	18d1      	adds	r1, r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	6978      	ldr	r0, [r7, #20]
 800b842:	f000 f8d1 	bl	800b9e8 <prvInsertTimerInActiveList>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01f      	beq.n	800b88c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b84c:	2300      	movs	r3, #0
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	2300      	movs	r3, #0
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	2100      	movs	r1, #0
 800b856:	6978      	ldr	r0, [r7, #20]
 800b858:	f7ff ff88 	bl	800b76c <xTimerGenericCommand>
 800b85c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d113      	bne.n	800b88c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	60fb      	str	r3, [r7, #12]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	b2da      	uxtb	r2, r3
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	6a1b      	ldr	r3, [r3, #32]
 800b890:	6978      	ldr	r0, [r7, #20]
 800b892:	4798      	blx	r3
}
 800b894:	bf00      	nop
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000ef8 	.word	0x20000ef8

0800b8a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f857 	bl	800b960 <prvGetNextExpireTime>
 800b8b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f803 	bl	800b8c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8be:	f000 f8d5 	bl	800ba6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8c2:	e7f1      	b.n	800b8a8 <prvTimerTask+0x8>

0800b8c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8ce:	f7fe fedd 	bl	800a68c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8d2:	f107 0308 	add.w	r3, r7, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 f866 	bl	800b9a8 <prvSampleTimeNow>
 800b8dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d130      	bne.n	800b946 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <prvProcessTimerOrBlockTask+0x3c>
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d806      	bhi.n	800b900 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8f2:	f7fe fed9 	bl	800a6a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8f6:	68f9      	ldr	r1, [r7, #12]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff ff85 	bl	800b808 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8fe:	e024      	b.n	800b94a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d008      	beq.n	800b918 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b906:	4b13      	ldr	r3, [pc, #76]	; (800b954 <prvProcessTimerOrBlockTask+0x90>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <prvProcessTimerOrBlockTask+0x50>
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <prvProcessTimerOrBlockTask+0x52>
 800b914:	2300      	movs	r3, #0
 800b916:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b918:	4b0f      	ldr	r3, [pc, #60]	; (800b958 <prvProcessTimerOrBlockTask+0x94>)
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4619      	mov	r1, r3
 800b926:	f7fe f803 	bl	8009930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b92a:	f7fe febd 	bl	800a6a8 <xTaskResumeAll>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b934:	4b09      	ldr	r3, [pc, #36]	; (800b95c <prvProcessTimerOrBlockTask+0x98>)
 800b936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	f3bf 8f6f 	isb	sy
}
 800b944:	e001      	b.n	800b94a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b946:	f7fe feaf 	bl	800a6a8 <xTaskResumeAll>
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20000efc 	.word	0x20000efc
 800b958:	20000f00 	.word	0x20000f00
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b968:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <prvGetNextExpireTime+0x44>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <prvGetNextExpireTime+0x16>
 800b972:	2201      	movs	r2, #1
 800b974:	e000      	b.n	800b978 <prvGetNextExpireTime+0x18>
 800b976:	2200      	movs	r2, #0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d105      	bne.n	800b990 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b984:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <prvGetNextExpireTime+0x44>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	e001      	b.n	800b994 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b994:	68fb      	ldr	r3, [r7, #12]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20000ef8 	.word	0x20000ef8

0800b9a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9b0:	f7fe ff18 	bl	800a7e4 <xTaskGetTickCount>
 800b9b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	; (800b9e4 <prvSampleTimeNow+0x3c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d205      	bcs.n	800b9cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9c0:	f000 f936 	bl	800bc30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e002      	b.n	800b9d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9d2:	4a04      	ldr	r2, [pc, #16]	; (800b9e4 <prvSampleTimeNow+0x3c>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000f08 	.word	0x20000f08

0800b9e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d812      	bhi.n	800ba34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	1ad2      	subs	r2, r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d302      	bcc.n	800ba22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	e01b      	b.n	800ba5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba22:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <prvInsertTimerInActiveList+0x7c>)
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f7fc ff06 	bl	800883e <vListInsert>
 800ba32:	e012      	b.n	800ba5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d206      	bcs.n	800ba4a <prvInsertTimerInActiveList+0x62>
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d302      	bcc.n	800ba4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba44:	2301      	movs	r3, #1
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	e007      	b.n	800ba5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <prvInsertTimerInActiveList+0x80>)
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7fc fef2 	bl	800883e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba5a:	697b      	ldr	r3, [r7, #20]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20000efc 	.word	0x20000efc
 800ba68:	20000ef8 	.word	0x20000ef8

0800ba6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08e      	sub	sp, #56	; 0x38
 800ba70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba72:	e0ca      	b.n	800bc0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	da18      	bge.n	800baac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba7a:	1d3b      	adds	r3, r7, #4
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	61fb      	str	r3, [r7, #28]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa2:	6850      	ldr	r0, [r2, #4]
 800baa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa6:	6892      	ldr	r2, [r2, #8]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f2c0 80aa 	blt.w	800bc08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	3304      	adds	r3, #4
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fc fef3 	bl	80088b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baca:	463b      	mov	r3, r7
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff ff6b 	bl	800b9a8 <prvSampleTimeNow>
 800bad2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b09      	cmp	r3, #9
 800bad8:	f200 8097 	bhi.w	800bc0a <prvProcessReceivedCommands+0x19e>
 800badc:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <prvProcessReceivedCommands+0x78>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800bb0d 	.word	0x0800bb0d
 800bae8:	0800bb0d 	.word	0x0800bb0d
 800baec:	0800bb0d 	.word	0x0800bb0d
 800baf0:	0800bb81 	.word	0x0800bb81
 800baf4:	0800bb95 	.word	0x0800bb95
 800baf8:	0800bbdf 	.word	0x0800bbdf
 800bafc:	0800bb0d 	.word	0x0800bb0d
 800bb00:	0800bb0d 	.word	0x0800bb0d
 800bb04:	0800bb81 	.word	0x0800bb81
 800bb08:	0800bb95 	.word	0x0800bb95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb12:	f043 0301 	orr.w	r3, r3, #1
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	18d1      	adds	r1, r2, r3
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb2c:	f7ff ff5c 	bl	800b9e8 <prvInsertTimerInActiveList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d069      	beq.n	800bc0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb44:	f003 0304 	and.w	r3, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d05e      	beq.n	800bc0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	441a      	add	r2, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb5e:	f7ff fe05 	bl	800b76c <xTimerGenericCommand>
 800bb62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d14f      	bne.n	800bc0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	61bb      	str	r3, [r7, #24]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb86:	f023 0301 	bic.w	r3, r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb92:	e03a      	b.n	800bc0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9a:	f043 0301 	orr.w	r3, r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	617b      	str	r3, [r7, #20]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	699a      	ldr	r2, [r3, #24]
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	18d1      	adds	r1, r2, r3
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd8:	f7ff ff06 	bl	800b9e8 <prvInsertTimerInActiveList>
					break;
 800bbdc:	e015      	b.n	800bc0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bbec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbee:	f000 fbdf 	bl	800c3b0 <vPortFree>
 800bbf2:	e00a      	b.n	800bc0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbfa:	f023 0301 	bic.w	r3, r3, #1
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc06:	e000      	b.n	800bc0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc0a:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <prvProcessReceivedCommands+0x1c0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	1d39      	adds	r1, r7, #4
 800bc10:	2200      	movs	r2, #0
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fd fa44 	bl	80090a0 <xQueueReceive>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f47f af2a 	bne.w	800ba74 <prvProcessReceivedCommands+0x8>
	}
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	3730      	adds	r7, #48	; 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000f00 	.word	0x20000f00

0800bc30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc36:	e048      	b.n	800bcca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc38:	4b2d      	ldr	r3, [pc, #180]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc42:	4b2b      	ldr	r3, [pc, #172]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fc fe2d 	bl	80088b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d02e      	beq.n	800bcca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	4413      	add	r3, r2
 800bc74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d90e      	bls.n	800bc9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc8a:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	3304      	adds	r3, #4
 800bc92:	4619      	mov	r1, r3
 800bc94:	4610      	mov	r0, r2
 800bc96:	f7fc fdd2 	bl	800883e <vListInsert>
 800bc9a:	e016      	b.n	800bcca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	2300      	movs	r3, #0
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	2100      	movs	r1, #0
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fd60 	bl	800b76c <xTimerGenericCommand>
 800bcac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	603b      	str	r3, [r7, #0]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1b1      	bne.n	800bc38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <prvSwitchTimerLists+0xc4>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bce0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bce2:	4a04      	ldr	r2, [pc, #16]	; (800bcf4 <prvSwitchTimerLists+0xc4>)
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	6013      	str	r3, [r2, #0]
}
 800bce8:	bf00      	nop
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000ef8 	.word	0x20000ef8
 800bcf4:	20000efc 	.word	0x20000efc

0800bcf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcfe:	f000 f969 	bl	800bfd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d120      	bne.n	800bd4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd0a:	4814      	ldr	r0, [pc, #80]	; (800bd5c <prvCheckForValidListAndQueue+0x64>)
 800bd0c:	f7fc fd46 	bl	800879c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd10:	4813      	ldr	r0, [pc, #76]	; (800bd60 <prvCheckForValidListAndQueue+0x68>)
 800bd12:	f7fc fd43 	bl	800879c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd16:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <prvCheckForValidListAndQueue+0x6c>)
 800bd18:	4a10      	ldr	r2, [pc, #64]	; (800bd5c <prvCheckForValidListAndQueue+0x64>)
 800bd1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd1c:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <prvCheckForValidListAndQueue+0x70>)
 800bd1e:	4a10      	ldr	r2, [pc, #64]	; (800bd60 <prvCheckForValidListAndQueue+0x68>)
 800bd20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd22:	2300      	movs	r3, #0
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	4b11      	ldr	r3, [pc, #68]	; (800bd6c <prvCheckForValidListAndQueue+0x74>)
 800bd28:	4a11      	ldr	r2, [pc, #68]	; (800bd70 <prvCheckForValidListAndQueue+0x78>)
 800bd2a:	2110      	movs	r1, #16
 800bd2c:	200a      	movs	r0, #10
 800bd2e:	f7fc fe51 	bl	80089d4 <xQueueGenericCreateStatic>
 800bd32:	4603      	mov	r3, r0
 800bd34:	4a08      	ldr	r2, [pc, #32]	; (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd38:	4b07      	ldr	r3, [pc, #28]	; (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd40:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	490b      	ldr	r1, [pc, #44]	; (800bd74 <prvCheckForValidListAndQueue+0x7c>)
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd fd9e 	bl	8009888 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd4c:	f000 f972 	bl	800c034 <vPortExitCritical>
}
 800bd50:	bf00      	nop
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000f00 	.word	0x20000f00
 800bd5c:	20000ed0 	.word	0x20000ed0
 800bd60:	20000ee4 	.word	0x20000ee4
 800bd64:	20000ef8 	.word	0x20000ef8
 800bd68:	20000efc 	.word	0x20000efc
 800bd6c:	20000fac 	.word	0x20000fac
 800bd70:	20000f0c 	.word	0x20000f0c
 800bd74:	0800f384 	.word	0x0800f384

0800bd78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3b04      	subs	r3, #4
 800bd88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3b04      	subs	r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f023 0201 	bic.w	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bda8:	4a0c      	ldr	r2, [pc, #48]	; (800bddc <pxPortInitialiseStack+0x64>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3b14      	subs	r3, #20
 800bdb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f06f 0202 	mvn.w	r2, #2
 800bdc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3b20      	subs	r3, #32
 800bdcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	0800bde1 	.word	0x0800bde1

0800bde0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <prvTaskExitError+0x54>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d00a      	beq.n	800be0a <prvTaskExitError+0x2a>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <prvTaskExitError+0x28>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	60bb      	str	r3, [r7, #8]
}
 800be1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be1e:	bf00      	nop
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0fc      	beq.n	800be20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be26:	bf00      	nop
 800be28:	bf00      	nop
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	20000118 	.word	0x20000118
	...

0800be40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be40:	4b07      	ldr	r3, [pc, #28]	; (800be60 <pxCurrentTCBConst2>)
 800be42:	6819      	ldr	r1, [r3, #0]
 800be44:	6808      	ldr	r0, [r1, #0]
 800be46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	f380 8809 	msr	PSP, r0
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f04f 0000 	mov.w	r0, #0
 800be56:	f380 8811 	msr	BASEPRI, r0
 800be5a:	4770      	bx	lr
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst2>:
 800be60:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be68:	4808      	ldr	r0, [pc, #32]	; (800be8c <prvPortStartFirstTask+0x24>)
 800be6a:	6800      	ldr	r0, [r0, #0]
 800be6c:	6800      	ldr	r0, [r0, #0]
 800be6e:	f380 8808 	msr	MSP, r0
 800be72:	f04f 0000 	mov.w	r0, #0
 800be76:	f380 8814 	msr	CONTROL, r0
 800be7a:	b662      	cpsie	i
 800be7c:	b661      	cpsie	f
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	df00      	svc	0
 800be88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be8a:	bf00      	nop
 800be8c:	e000ed08 	.word	0xe000ed08

0800be90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be96:	4b46      	ldr	r3, [pc, #280]	; (800bfb0 <xPortStartScheduler+0x120>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a46      	ldr	r2, [pc, #280]	; (800bfb4 <xPortStartScheduler+0x124>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d10a      	bne.n	800beb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	613b      	str	r3, [r7, #16]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800beb6:	4b3e      	ldr	r3, [pc, #248]	; (800bfb0 <xPortStartScheduler+0x120>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a3f      	ldr	r2, [pc, #252]	; (800bfb8 <xPortStartScheduler+0x128>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d10a      	bne.n	800bed6 <xPortStartScheduler+0x46>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	60fb      	str	r3, [r7, #12]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bed6:	4b39      	ldr	r3, [pc, #228]	; (800bfbc <xPortStartScheduler+0x12c>)
 800bed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	22ff      	movs	r2, #255	; 0xff
 800bee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	b2db      	uxtb	r3, r3
 800beee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	4b31      	ldr	r3, [pc, #196]	; (800bfc0 <xPortStartScheduler+0x130>)
 800befc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800befe:	4b31      	ldr	r3, [pc, #196]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf00:	2207      	movs	r2, #7
 800bf02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf04:	e009      	b.n	800bf1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf06:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	4a2d      	ldr	r2, [pc, #180]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf1a:	78fb      	ldrb	r3, [r7, #3]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf22:	2b80      	cmp	r3, #128	; 0x80
 800bf24:	d0ef      	beq.n	800bf06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf26:	4b27      	ldr	r3, [pc, #156]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f1c3 0307 	rsb	r3, r3, #7
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d00a      	beq.n	800bf48 <xPortStartScheduler+0xb8>
	__asm volatile
 800bf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	60bb      	str	r3, [r7, #8]
}
 800bf44:	bf00      	nop
 800bf46:	e7fe      	b.n	800bf46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf48:	4b1e      	ldr	r3, [pc, #120]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	4a1d      	ldr	r2, [pc, #116]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf52:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf5a:	4a1a      	ldr	r2, [pc, #104]	; (800bfc4 <xPortStartScheduler+0x134>)
 800bf5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf66:	4b18      	ldr	r3, [pc, #96]	; (800bfc8 <xPortStartScheduler+0x138>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a17      	ldr	r2, [pc, #92]	; (800bfc8 <xPortStartScheduler+0x138>)
 800bf6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf72:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <xPortStartScheduler+0x138>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a14      	ldr	r2, [pc, #80]	; (800bfc8 <xPortStartScheduler+0x138>)
 800bf78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf7e:	f000 f8dd 	bl	800c13c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <xPortStartScheduler+0x13c>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf88:	f000 f8fc 	bl	800c184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf8c:	4b10      	ldr	r3, [pc, #64]	; (800bfd0 <xPortStartScheduler+0x140>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a0f      	ldr	r2, [pc, #60]	; (800bfd0 <xPortStartScheduler+0x140>)
 800bf92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf98:	f7ff ff66 	bl	800be68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf9c:	f7fe fcec 	bl	800a978 <vTaskSwitchContext>
	prvTaskExitError();
 800bfa0:	f7ff ff1e 	bl	800bde0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	e000ed00 	.word	0xe000ed00
 800bfb4:	410fc271 	.word	0x410fc271
 800bfb8:	410fc270 	.word	0x410fc270
 800bfbc:	e000e400 	.word	0xe000e400
 800bfc0:	20000ffc 	.word	0x20000ffc
 800bfc4:	20001000 	.word	0x20001000
 800bfc8:	e000ed20 	.word	0xe000ed20
 800bfcc:	20000118 	.word	0x20000118
 800bfd0:	e000ef34 	.word	0xe000ef34

0800bfd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	607b      	str	r3, [r7, #4]
}
 800bfec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bfee:	4b0f      	ldr	r3, [pc, #60]	; (800c02c <vPortEnterCritical+0x58>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	4a0d      	ldr	r2, [pc, #52]	; (800c02c <vPortEnterCritical+0x58>)
 800bff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bff8:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <vPortEnterCritical+0x58>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d10f      	bne.n	800c020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c000:	4b0b      	ldr	r3, [pc, #44]	; (800c030 <vPortEnterCritical+0x5c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <vPortEnterCritical+0x4c>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	603b      	str	r3, [r7, #0]
}
 800c01c:	bf00      	nop
 800c01e:	e7fe      	b.n	800c01e <vPortEnterCritical+0x4a>
	}
}
 800c020:	bf00      	nop
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	20000118 	.word	0x20000118
 800c030:	e000ed04 	.word	0xe000ed04

0800c034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c03a:	4b12      	ldr	r3, [pc, #72]	; (800c084 <vPortExitCritical+0x50>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10a      	bne.n	800c058 <vPortExitCritical+0x24>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	607b      	str	r3, [r7, #4]
}
 800c054:	bf00      	nop
 800c056:	e7fe      	b.n	800c056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <vPortExitCritical+0x50>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	4a09      	ldr	r2, [pc, #36]	; (800c084 <vPortExitCritical+0x50>)
 800c060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c062:	4b08      	ldr	r3, [pc, #32]	; (800c084 <vPortExitCritical+0x50>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d105      	bne.n	800c076 <vPortExitCritical+0x42>
 800c06a:	2300      	movs	r3, #0
 800c06c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	f383 8811 	msr	BASEPRI, r3
}
 800c074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20000118 	.word	0x20000118
	...

0800c090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c090:	f3ef 8009 	mrs	r0, PSP
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <pxCurrentTCBConst>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	f01e 0f10 	tst.w	lr, #16
 800c0a0:	bf08      	it	eq
 800c0a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	6010      	str	r0, [r2, #0]
 800c0ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0b4:	f380 8811 	msr	BASEPRI, r0
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f7fe fc5a 	bl	800a978 <vTaskSwitchContext>
 800c0c4:	f04f 0000 	mov.w	r0, #0
 800c0c8:	f380 8811 	msr	BASEPRI, r0
 800c0cc:	bc09      	pop	{r0, r3}
 800c0ce:	6819      	ldr	r1, [r3, #0]
 800c0d0:	6808      	ldr	r0, [r1, #0]
 800c0d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d6:	f01e 0f10 	tst.w	lr, #16
 800c0da:	bf08      	it	eq
 800c0dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0e0:	f380 8809 	msr	PSP, r0
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w

0800c0f0 <pxCurrentTCBConst>:
 800c0f0:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop

0800c0f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	607b      	str	r3, [r7, #4]
}
 800c110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c112:	f7fe fb77 	bl	800a804 <xTaskIncrementTick>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <xPortSysTickHandler+0x40>)
 800c11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	2300      	movs	r3, #0
 800c126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	f383 8811 	msr	BASEPRI, r3
}
 800c12e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c140:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c146:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <vPortSetupTimerInterrupt+0x38>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <vPortSetupTimerInterrupt+0x3c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <vPortSetupTimerInterrupt+0x40>)
 800c152:	fba2 2303 	umull	r2, r3, r2, r3
 800c156:	099b      	lsrs	r3, r3, #6
 800c158:	4a09      	ldr	r2, [pc, #36]	; (800c180 <vPortSetupTimerInterrupt+0x44>)
 800c15a:	3b01      	subs	r3, #1
 800c15c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c15e:	4b04      	ldr	r3, [pc, #16]	; (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c160:	2207      	movs	r2, #7
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	e000e010 	.word	0xe000e010
 800c174:	e000e018 	.word	0xe000e018
 800c178:	2000011c 	.word	0x2000011c
 800c17c:	10624dd3 	.word	0x10624dd3
 800c180:	e000e014 	.word	0xe000e014

0800c184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c194 <vPortEnableVFP+0x10>
 800c188:	6801      	ldr	r1, [r0, #0]
 800c18a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c18e:	6001      	str	r1, [r0, #0]
 800c190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c192:	bf00      	nop
 800c194:	e000ed88 	.word	0xe000ed88

0800c198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c19e:	f3ef 8305 	mrs	r3, IPSR
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	d914      	bls.n	800c1d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1aa:	4a17      	ldr	r2, [pc, #92]	; (800c208 <vPortValidateInterruptPriority+0x70>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1b4:	4b15      	ldr	r3, [pc, #84]	; (800c20c <vPortValidateInterruptPriority+0x74>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	7afa      	ldrb	r2, [r7, #11]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d20a      	bcs.n	800c1d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	607b      	str	r3, [r7, #4]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1d4:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <vPortValidateInterruptPriority+0x78>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c1dc:	4b0d      	ldr	r3, [pc, #52]	; (800c214 <vPortValidateInterruptPriority+0x7c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d90a      	bls.n	800c1fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	603b      	str	r3, [r7, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <vPortValidateInterruptPriority+0x60>
	}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	e000e3f0 	.word	0xe000e3f0
 800c20c:	20000ffc 	.word	0x20000ffc
 800c210:	e000ed0c 	.word	0xe000ed0c
 800c214:	20001000 	.word	0x20001000

0800c218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	; 0x28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c220:	2300      	movs	r3, #0
 800c222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c224:	f7fe fa32 	bl	800a68c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c228:	4b5b      	ldr	r3, [pc, #364]	; (800c398 <pvPortMalloc+0x180>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c230:	f000 f920 	bl	800c474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c234:	4b59      	ldr	r3, [pc, #356]	; (800c39c <pvPortMalloc+0x184>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4013      	ands	r3, r2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 8093 	bne.w	800c368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d01d      	beq.n	800c284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c248:	2208      	movs	r2, #8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	2b00      	cmp	r3, #0
 800c258:	d014      	beq.n	800c284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f023 0307 	bic.w	r3, r3, #7
 800c260:	3308      	adds	r3, #8
 800c262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00a      	beq.n	800c284 <pvPortMalloc+0x6c>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	617b      	str	r3, [r7, #20]
}
 800c280:	bf00      	nop
 800c282:	e7fe      	b.n	800c282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d06e      	beq.n	800c368 <pvPortMalloc+0x150>
 800c28a:	4b45      	ldr	r3, [pc, #276]	; (800c3a0 <pvPortMalloc+0x188>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	429a      	cmp	r2, r3
 800c292:	d869      	bhi.n	800c368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c294:	4b43      	ldr	r3, [pc, #268]	; (800c3a4 <pvPortMalloc+0x18c>)
 800c296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c298:	4b42      	ldr	r3, [pc, #264]	; (800c3a4 <pvPortMalloc+0x18c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c29e:	e004      	b.n	800c2aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d903      	bls.n	800c2bc <pvPortMalloc+0xa4>
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f1      	bne.n	800c2a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2bc:	4b36      	ldr	r3, [pc, #216]	; (800c398 <pvPortMalloc+0x180>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d050      	beq.n	800c368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2208      	movs	r2, #8
 800c2cc:	4413      	add	r3, r2
 800c2ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	6a3b      	ldr	r3, [r7, #32]
 800c2d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	2308      	movs	r3, #8
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d91f      	bls.n	800c328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00a      	beq.n	800c310 <pvPortMalloc+0xf8>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	613b      	str	r3, [r7, #16]
}
 800c30c:	bf00      	nop
 800c30e:	e7fe      	b.n	800c30e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	1ad2      	subs	r2, r2, r3
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c322:	69b8      	ldr	r0, [r7, #24]
 800c324:	f000 f908 	bl	800c538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c328:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <pvPortMalloc+0x188>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	4a1b      	ldr	r2, [pc, #108]	; (800c3a0 <pvPortMalloc+0x188>)
 800c334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c336:	4b1a      	ldr	r3, [pc, #104]	; (800c3a0 <pvPortMalloc+0x188>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b1b      	ldr	r3, [pc, #108]	; (800c3a8 <pvPortMalloc+0x190>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d203      	bcs.n	800c34a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c342:	4b17      	ldr	r3, [pc, #92]	; (800c3a0 <pvPortMalloc+0x188>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a18      	ldr	r2, [pc, #96]	; (800c3a8 <pvPortMalloc+0x190>)
 800c348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	4b13      	ldr	r3, [pc, #76]	; (800c39c <pvPortMalloc+0x184>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	431a      	orrs	r2, r3
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c35e:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <pvPortMalloc+0x194>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3301      	adds	r3, #1
 800c364:	4a11      	ldr	r2, [pc, #68]	; (800c3ac <pvPortMalloc+0x194>)
 800c366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c368:	f7fe f99e 	bl	800a6a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <pvPortMalloc+0x174>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	60fb      	str	r3, [r7, #12]
}
 800c388:	bf00      	nop
 800c38a:	e7fe      	b.n	800c38a <pvPortMalloc+0x172>
	return pvReturn;
 800c38c:	69fb      	ldr	r3, [r7, #28]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3728      	adds	r7, #40	; 0x28
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001bc4 	.word	0x20001bc4
 800c39c:	20001bd8 	.word	0x20001bd8
 800c3a0:	20001bc8 	.word	0x20001bc8
 800c3a4:	20001bbc 	.word	0x20001bbc
 800c3a8:	20001bcc 	.word	0x20001bcc
 800c3ac:	20001bd0 	.word	0x20001bd0

0800c3b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d04d      	beq.n	800c45e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3c2:	2308      	movs	r3, #8
 800c3c4:	425b      	negs	r3, r3
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	4b24      	ldr	r3, [pc, #144]	; (800c468 <vPortFree+0xb8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <vPortFree+0x44>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60fb      	str	r3, [r7, #12]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00a      	beq.n	800c412 <vPortFree+0x62>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	60bb      	str	r3, [r7, #8]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	4b14      	ldr	r3, [pc, #80]	; (800c468 <vPortFree+0xb8>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d01e      	beq.n	800c45e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d11a      	bne.n	800c45e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	4b0e      	ldr	r3, [pc, #56]	; (800c468 <vPortFree+0xb8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	43db      	mvns	r3, r3
 800c432:	401a      	ands	r2, r3
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c438:	f7fe f928 	bl	800a68c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	4b0a      	ldr	r3, [pc, #40]	; (800c46c <vPortFree+0xbc>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4413      	add	r3, r2
 800c446:	4a09      	ldr	r2, [pc, #36]	; (800c46c <vPortFree+0xbc>)
 800c448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c44a:	6938      	ldr	r0, [r7, #16]
 800c44c:	f000 f874 	bl	800c538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c450:	4b07      	ldr	r3, [pc, #28]	; (800c470 <vPortFree+0xc0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3301      	adds	r3, #1
 800c456:	4a06      	ldr	r2, [pc, #24]	; (800c470 <vPortFree+0xc0>)
 800c458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c45a:	f7fe f925 	bl	800a6a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c45e:	bf00      	nop
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20001bd8 	.word	0x20001bd8
 800c46c:	20001bc8 	.word	0x20001bc8
 800c470:	20001bd4 	.word	0x20001bd4

0800c474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c47a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c47e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c480:	4b27      	ldr	r3, [pc, #156]	; (800c520 <prvHeapInit+0xac>)
 800c482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 0307 	and.w	r3, r3, #7
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00c      	beq.n	800c4a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0307 	bic.w	r3, r3, #7
 800c49a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	4a1f      	ldr	r2, [pc, #124]	; (800c520 <prvHeapInit+0xac>)
 800c4a4:	4413      	add	r3, r2
 800c4a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4ac:	4a1d      	ldr	r2, [pc, #116]	; (800c524 <prvHeapInit+0xb0>)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4b2:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <prvHeapInit+0xb0>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	4413      	add	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 0307 	bic.w	r3, r3, #7
 800c4ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a15      	ldr	r2, [pc, #84]	; (800c528 <prvHeapInit+0xb4>)
 800c4d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4d6:	4b14      	ldr	r3, [pc, #80]	; (800c528 <prvHeapInit+0xb4>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4de:	4b12      	ldr	r3, [pc, #72]	; (800c528 <prvHeapInit+0xb4>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	1ad2      	subs	r2, r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <prvHeapInit+0xb4>)
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4a0a      	ldr	r2, [pc, #40]	; (800c52c <prvHeapInit+0xb8>)
 800c502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	4a09      	ldr	r2, [pc, #36]	; (800c530 <prvHeapInit+0xbc>)
 800c50a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c50c:	4b09      	ldr	r3, [pc, #36]	; (800c534 <prvHeapInit+0xc0>)
 800c50e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c512:	601a      	str	r2, [r3, #0]
}
 800c514:	bf00      	nop
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	20001004 	.word	0x20001004
 800c524:	20001bbc 	.word	0x20001bbc
 800c528:	20001bc4 	.word	0x20001bc4
 800c52c:	20001bcc 	.word	0x20001bcc
 800c530:	20001bc8 	.word	0x20001bc8
 800c534:	20001bd8 	.word	0x20001bd8

0800c538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c540:	4b28      	ldr	r3, [pc, #160]	; (800c5e4 <prvInsertBlockIntoFreeList+0xac>)
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e002      	b.n	800c54c <prvInsertBlockIntoFreeList+0x14>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d8f7      	bhi.n	800c546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	4413      	add	r3, r2
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	429a      	cmp	r2, r3
 800c566:	d108      	bne.n	800c57a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	441a      	add	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	441a      	add	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d118      	bne.n	800c5c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d00d      	beq.n	800c5b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	441a      	add	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e008      	b.n	800c5c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	e003      	b.n	800c5c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d002      	beq.n	800c5d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20001bbc 	.word	0x20001bbc
 800c5e8:	20001bc4 	.word	0x20001bc4

0800c5ec <encodeMorse>:
 */

#include <string.h>
#include <stdio.h>

void encodeMorse(uint8_t character, uint8_t *morseCode) {
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]

    switch (character) {
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	3b20      	subs	r3, #32
 800c5fc:	2b3a      	cmp	r3, #58	; 0x3a
 800c5fe:	f200 8157 	bhi.w	800c8b0 <encodeMorse+0x2c4>
 800c602:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <encodeMorse+0x1c>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c8a5 	.word	0x0800c8a5
 800c60c:	0800c8b1 	.word	0x0800c8b1
 800c610:	0800c8b1 	.word	0x0800c8b1
 800c614:	0800c8b1 	.word	0x0800c8b1
 800c618:	0800c8b1 	.word	0x0800c8b1
 800c61c:	0800c8b1 	.word	0x0800c8b1
 800c620:	0800c8b1 	.word	0x0800c8b1
 800c624:	0800c8b1 	.word	0x0800c8b1
 800c628:	0800c8b1 	.word	0x0800c8b1
 800c62c:	0800c8b1 	.word	0x0800c8b1
 800c630:	0800c8b1 	.word	0x0800c8b1
 800c634:	0800c8b1 	.word	0x0800c8b1
 800c638:	0800c8b1 	.word	0x0800c8b1
 800c63c:	0800c8b1 	.word	0x0800c8b1
 800c640:	0800c8b1 	.word	0x0800c8b1
 800c644:	0800c8b1 	.word	0x0800c8b1
 800c648:	0800c82d 	.word	0x0800c82d
 800c64c:	0800c839 	.word	0x0800c839
 800c650:	0800c845 	.word	0x0800c845
 800c654:	0800c851 	.word	0x0800c851
 800c658:	0800c85d 	.word	0x0800c85d
 800c65c:	0800c869 	.word	0x0800c869
 800c660:	0800c875 	.word	0x0800c875
 800c664:	0800c881 	.word	0x0800c881
 800c668:	0800c88d 	.word	0x0800c88d
 800c66c:	0800c899 	.word	0x0800c899
 800c670:	0800c8b1 	.word	0x0800c8b1
 800c674:	0800c8b1 	.word	0x0800c8b1
 800c678:	0800c8b1 	.word	0x0800c8b1
 800c67c:	0800c8b1 	.word	0x0800c8b1
 800c680:	0800c8b1 	.word	0x0800c8b1
 800c684:	0800c8b1 	.word	0x0800c8b1
 800c688:	0800c8b1 	.word	0x0800c8b1
 800c68c:	0800c6f5 	.word	0x0800c6f5
 800c690:	0800c701 	.word	0x0800c701
 800c694:	0800c70d 	.word	0x0800c70d
 800c698:	0800c719 	.word	0x0800c719
 800c69c:	0800c725 	.word	0x0800c725
 800c6a0:	0800c731 	.word	0x0800c731
 800c6a4:	0800c73d 	.word	0x0800c73d
 800c6a8:	0800c749 	.word	0x0800c749
 800c6ac:	0800c755 	.word	0x0800c755
 800c6b0:	0800c761 	.word	0x0800c761
 800c6b4:	0800c76d 	.word	0x0800c76d
 800c6b8:	0800c779 	.word	0x0800c779
 800c6bc:	0800c785 	.word	0x0800c785
 800c6c0:	0800c791 	.word	0x0800c791
 800c6c4:	0800c79d 	.word	0x0800c79d
 800c6c8:	0800c7a9 	.word	0x0800c7a9
 800c6cc:	0800c7b5 	.word	0x0800c7b5
 800c6d0:	0800c7c1 	.word	0x0800c7c1
 800c6d4:	0800c7cd 	.word	0x0800c7cd
 800c6d8:	0800c7d9 	.word	0x0800c7d9
 800c6dc:	0800c7e5 	.word	0x0800c7e5
 800c6e0:	0800c7f1 	.word	0x0800c7f1
 800c6e4:	0800c7fd 	.word	0x0800c7fd
 800c6e8:	0800c809 	.word	0x0800c809
 800c6ec:	0800c815 	.word	0x0800c815
 800c6f0:	0800c821 	.word	0x0800c821
        case 'A':
            memcpy(morseCode, ".-", 2);
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	4973      	ldr	r1, [pc, #460]	; (800c8c4 <encodeMorse+0x2d8>)
 800c6f8:	6838      	ldr	r0, [r7, #0]
 800c6fa:	f002 f937 	bl	800e96c <memcpy>
            break;
 800c6fe:	e0dd      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'B':
            memcpy(morseCode, "-...", 4);
 800c700:	2204      	movs	r2, #4
 800c702:	4971      	ldr	r1, [pc, #452]	; (800c8c8 <encodeMorse+0x2dc>)
 800c704:	6838      	ldr	r0, [r7, #0]
 800c706:	f002 f931 	bl	800e96c <memcpy>
            break;
 800c70a:	e0d7      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'C':
            memcpy(morseCode, "-.-.", 4);
 800c70c:	2204      	movs	r2, #4
 800c70e:	496f      	ldr	r1, [pc, #444]	; (800c8cc <encodeMorse+0x2e0>)
 800c710:	6838      	ldr	r0, [r7, #0]
 800c712:	f002 f92b 	bl	800e96c <memcpy>
            break;
 800c716:	e0d1      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'D':
            memcpy(morseCode, "-..", 3);
 800c718:	2203      	movs	r2, #3
 800c71a:	496d      	ldr	r1, [pc, #436]	; (800c8d0 <encodeMorse+0x2e4>)
 800c71c:	6838      	ldr	r0, [r7, #0]
 800c71e:	f002 f925 	bl	800e96c <memcpy>
            break;
 800c722:	e0cb      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'E':
            memcpy(morseCode, ".", 1);
 800c724:	2201      	movs	r2, #1
 800c726:	496b      	ldr	r1, [pc, #428]	; (800c8d4 <encodeMorse+0x2e8>)
 800c728:	6838      	ldr	r0, [r7, #0]
 800c72a:	f002 f91f 	bl	800e96c <memcpy>
            break;
 800c72e:	e0c5      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'F':
            memcpy(morseCode, "..-.", 4);
 800c730:	2204      	movs	r2, #4
 800c732:	4969      	ldr	r1, [pc, #420]	; (800c8d8 <encodeMorse+0x2ec>)
 800c734:	6838      	ldr	r0, [r7, #0]
 800c736:	f002 f919 	bl	800e96c <memcpy>
            break;
 800c73a:	e0bf      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'G':
            memcpy(morseCode, "--.", 3);
 800c73c:	2203      	movs	r2, #3
 800c73e:	4967      	ldr	r1, [pc, #412]	; (800c8dc <encodeMorse+0x2f0>)
 800c740:	6838      	ldr	r0, [r7, #0]
 800c742:	f002 f913 	bl	800e96c <memcpy>
            break;
 800c746:	e0b9      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'H':
            memcpy(morseCode, "....", 4);
 800c748:	2204      	movs	r2, #4
 800c74a:	4965      	ldr	r1, [pc, #404]	; (800c8e0 <encodeMorse+0x2f4>)
 800c74c:	6838      	ldr	r0, [r7, #0]
 800c74e:	f002 f90d 	bl	800e96c <memcpy>
            break;
 800c752:	e0b3      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'I':
            memcpy(morseCode, "..", 2);
 800c754:	2202      	movs	r2, #2
 800c756:	4963      	ldr	r1, [pc, #396]	; (800c8e4 <encodeMorse+0x2f8>)
 800c758:	6838      	ldr	r0, [r7, #0]
 800c75a:	f002 f907 	bl	800e96c <memcpy>
            break;
 800c75e:	e0ad      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'J':
            memcpy(morseCode, ".---", 4);
 800c760:	2204      	movs	r2, #4
 800c762:	4961      	ldr	r1, [pc, #388]	; (800c8e8 <encodeMorse+0x2fc>)
 800c764:	6838      	ldr	r0, [r7, #0]
 800c766:	f002 f901 	bl	800e96c <memcpy>
            break;
 800c76a:	e0a7      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'K':
            memcpy(morseCode, "-.-", 3);
 800c76c:	2203      	movs	r2, #3
 800c76e:	495f      	ldr	r1, [pc, #380]	; (800c8ec <encodeMorse+0x300>)
 800c770:	6838      	ldr	r0, [r7, #0]
 800c772:	f002 f8fb 	bl	800e96c <memcpy>
            break;
 800c776:	e0a1      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'L':
            memcpy(morseCode, ".-..", 4);
 800c778:	2204      	movs	r2, #4
 800c77a:	495d      	ldr	r1, [pc, #372]	; (800c8f0 <encodeMorse+0x304>)
 800c77c:	6838      	ldr	r0, [r7, #0]
 800c77e:	f002 f8f5 	bl	800e96c <memcpy>
            break;
 800c782:	e09b      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'M':
            memcpy(morseCode, "--", 2);
 800c784:	2202      	movs	r2, #2
 800c786:	495b      	ldr	r1, [pc, #364]	; (800c8f4 <encodeMorse+0x308>)
 800c788:	6838      	ldr	r0, [r7, #0]
 800c78a:	f002 f8ef 	bl	800e96c <memcpy>
            break;
 800c78e:	e095      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'N':
            memcpy(morseCode, "-.", 2);
 800c790:	2202      	movs	r2, #2
 800c792:	4959      	ldr	r1, [pc, #356]	; (800c8f8 <encodeMorse+0x30c>)
 800c794:	6838      	ldr	r0, [r7, #0]
 800c796:	f002 f8e9 	bl	800e96c <memcpy>
            break;
 800c79a:	e08f      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'O':
            memcpy(morseCode, "---", 3);
 800c79c:	2203      	movs	r2, #3
 800c79e:	4957      	ldr	r1, [pc, #348]	; (800c8fc <encodeMorse+0x310>)
 800c7a0:	6838      	ldr	r0, [r7, #0]
 800c7a2:	f002 f8e3 	bl	800e96c <memcpy>
            break;
 800c7a6:	e089      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'P':
            memcpy(morseCode, ".--.", 4);
 800c7a8:	2204      	movs	r2, #4
 800c7aa:	4955      	ldr	r1, [pc, #340]	; (800c900 <encodeMorse+0x314>)
 800c7ac:	6838      	ldr	r0, [r7, #0]
 800c7ae:	f002 f8dd 	bl	800e96c <memcpy>
            break;
 800c7b2:	e083      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'Q':
            memcpy(morseCode, "--.-", 4);
 800c7b4:	2204      	movs	r2, #4
 800c7b6:	4953      	ldr	r1, [pc, #332]	; (800c904 <encodeMorse+0x318>)
 800c7b8:	6838      	ldr	r0, [r7, #0]
 800c7ba:	f002 f8d7 	bl	800e96c <memcpy>
            break;
 800c7be:	e07d      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'R':
            memcpy(morseCode, ".-.", 3);
 800c7c0:	2203      	movs	r2, #3
 800c7c2:	4951      	ldr	r1, [pc, #324]	; (800c908 <encodeMorse+0x31c>)
 800c7c4:	6838      	ldr	r0, [r7, #0]
 800c7c6:	f002 f8d1 	bl	800e96c <memcpy>
            break;
 800c7ca:	e077      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'S':
            memcpy(morseCode, "...", 3);
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	494f      	ldr	r1, [pc, #316]	; (800c90c <encodeMorse+0x320>)
 800c7d0:	6838      	ldr	r0, [r7, #0]
 800c7d2:	f002 f8cb 	bl	800e96c <memcpy>
            break;
 800c7d6:	e071      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'T':
            memcpy(morseCode, "-", 1);
 800c7d8:	2201      	movs	r2, #1
 800c7da:	494d      	ldr	r1, [pc, #308]	; (800c910 <encodeMorse+0x324>)
 800c7dc:	6838      	ldr	r0, [r7, #0]
 800c7de:	f002 f8c5 	bl	800e96c <memcpy>
            break;
 800c7e2:	e06b      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'U':
            memcpy(morseCode, "..-", 3);
 800c7e4:	2203      	movs	r2, #3
 800c7e6:	494b      	ldr	r1, [pc, #300]	; (800c914 <encodeMorse+0x328>)
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f002 f8bf 	bl	800e96c <memcpy>
            break;
 800c7ee:	e065      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'V':
            memcpy(morseCode, "...-", 4);
 800c7f0:	2204      	movs	r2, #4
 800c7f2:	4949      	ldr	r1, [pc, #292]	; (800c918 <encodeMorse+0x32c>)
 800c7f4:	6838      	ldr	r0, [r7, #0]
 800c7f6:	f002 f8b9 	bl	800e96c <memcpy>
            break;
 800c7fa:	e05f      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'W':
            memcpy(morseCode, ".--", 3);
 800c7fc:	2203      	movs	r2, #3
 800c7fe:	4947      	ldr	r1, [pc, #284]	; (800c91c <encodeMorse+0x330>)
 800c800:	6838      	ldr	r0, [r7, #0]
 800c802:	f002 f8b3 	bl	800e96c <memcpy>
            break;
 800c806:	e059      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'X':
            memcpy(morseCode, "-..-", 4);
 800c808:	2204      	movs	r2, #4
 800c80a:	4945      	ldr	r1, [pc, #276]	; (800c920 <encodeMorse+0x334>)
 800c80c:	6838      	ldr	r0, [r7, #0]
 800c80e:	f002 f8ad 	bl	800e96c <memcpy>
            break;
 800c812:	e053      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'Y':
            memcpy(morseCode, "-.--", 4);
 800c814:	2204      	movs	r2, #4
 800c816:	4943      	ldr	r1, [pc, #268]	; (800c924 <encodeMorse+0x338>)
 800c818:	6838      	ldr	r0, [r7, #0]
 800c81a:	f002 f8a7 	bl	800e96c <memcpy>
            break;
 800c81e:	e04d      	b.n	800c8bc <encodeMorse+0x2d0>
        case 'Z':
            memcpy(morseCode, "--..", 4);
 800c820:	2204      	movs	r2, #4
 800c822:	4941      	ldr	r1, [pc, #260]	; (800c928 <encodeMorse+0x33c>)
 800c824:	6838      	ldr	r0, [r7, #0]
 800c826:	f002 f8a1 	bl	800e96c <memcpy>
            break;
 800c82a:	e047      	b.n	800c8bc <encodeMorse+0x2d0>
        case '0':
            memcpy(morseCode, "-----", 5);
 800c82c:	2205      	movs	r2, #5
 800c82e:	493f      	ldr	r1, [pc, #252]	; (800c92c <encodeMorse+0x340>)
 800c830:	6838      	ldr	r0, [r7, #0]
 800c832:	f002 f89b 	bl	800e96c <memcpy>
            break;
 800c836:	e041      	b.n	800c8bc <encodeMorse+0x2d0>
        case '1':
            memcpy(morseCode, ".----", 5);
 800c838:	2205      	movs	r2, #5
 800c83a:	493d      	ldr	r1, [pc, #244]	; (800c930 <encodeMorse+0x344>)
 800c83c:	6838      	ldr	r0, [r7, #0]
 800c83e:	f002 f895 	bl	800e96c <memcpy>
            break;
 800c842:	e03b      	b.n	800c8bc <encodeMorse+0x2d0>
        case '2':
            memcpy(morseCode, "..---", 5);
 800c844:	2205      	movs	r2, #5
 800c846:	493b      	ldr	r1, [pc, #236]	; (800c934 <encodeMorse+0x348>)
 800c848:	6838      	ldr	r0, [r7, #0]
 800c84a:	f002 f88f 	bl	800e96c <memcpy>
            break;
 800c84e:	e035      	b.n	800c8bc <encodeMorse+0x2d0>
        case '3':
            memcpy(morseCode, "...--", 5);
 800c850:	2205      	movs	r2, #5
 800c852:	4939      	ldr	r1, [pc, #228]	; (800c938 <encodeMorse+0x34c>)
 800c854:	6838      	ldr	r0, [r7, #0]
 800c856:	f002 f889 	bl	800e96c <memcpy>
            break;
 800c85a:	e02f      	b.n	800c8bc <encodeMorse+0x2d0>
        case '4':
            memcpy(morseCode, "....-", 5);
 800c85c:	2205      	movs	r2, #5
 800c85e:	4937      	ldr	r1, [pc, #220]	; (800c93c <encodeMorse+0x350>)
 800c860:	6838      	ldr	r0, [r7, #0]
 800c862:	f002 f883 	bl	800e96c <memcpy>
            break;
 800c866:	e029      	b.n	800c8bc <encodeMorse+0x2d0>
        case '5':
            memcpy(morseCode, ".....", 5);
 800c868:	2205      	movs	r2, #5
 800c86a:	4935      	ldr	r1, [pc, #212]	; (800c940 <encodeMorse+0x354>)
 800c86c:	6838      	ldr	r0, [r7, #0]
 800c86e:	f002 f87d 	bl	800e96c <memcpy>
            break;
 800c872:	e023      	b.n	800c8bc <encodeMorse+0x2d0>
        case '6':
            memcpy(morseCode, "-....", 5);
 800c874:	2205      	movs	r2, #5
 800c876:	4933      	ldr	r1, [pc, #204]	; (800c944 <encodeMorse+0x358>)
 800c878:	6838      	ldr	r0, [r7, #0]
 800c87a:	f002 f877 	bl	800e96c <memcpy>
            break;
 800c87e:	e01d      	b.n	800c8bc <encodeMorse+0x2d0>
        case '7':
            memcpy(morseCode, "--...", 5);
 800c880:	2205      	movs	r2, #5
 800c882:	4931      	ldr	r1, [pc, #196]	; (800c948 <encodeMorse+0x35c>)
 800c884:	6838      	ldr	r0, [r7, #0]
 800c886:	f002 f871 	bl	800e96c <memcpy>
            break;
 800c88a:	e017      	b.n	800c8bc <encodeMorse+0x2d0>
        case '8':
            memcpy(morseCode, "---..", 5);
 800c88c:	2205      	movs	r2, #5
 800c88e:	492f      	ldr	r1, [pc, #188]	; (800c94c <encodeMorse+0x360>)
 800c890:	6838      	ldr	r0, [r7, #0]
 800c892:	f002 f86b 	bl	800e96c <memcpy>
            break;
 800c896:	e011      	b.n	800c8bc <encodeMorse+0x2d0>
        case '9':
            memcpy(morseCode, "----.", 5);
 800c898:	2205      	movs	r2, #5
 800c89a:	492d      	ldr	r1, [pc, #180]	; (800c950 <encodeMorse+0x364>)
 800c89c:	6838      	ldr	r0, [r7, #0]
 800c89e:	f002 f865 	bl	800e96c <memcpy>
            break;
 800c8a2:	e00b      	b.n	800c8bc <encodeMorse+0x2d0>
        case ' ':
        	memcpy(morseCode, "*", 1);
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	492b      	ldr	r1, [pc, #172]	; (800c954 <encodeMorse+0x368>)
 800c8a8:	6838      	ldr	r0, [r7, #0]
 800c8aa:	f002 f85f 	bl	800e96c <memcpy>
        	break;
 800c8ae:	e005      	b.n	800c8bc <encodeMorse+0x2d0>
        default:
            // Carattere non supportato, gestire di conseguenza
            memset(morseCode, 0, 1);  // Azzera il buffer
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	6838      	ldr	r0, [r7, #0]
 800c8b6:	f002 f867 	bl	800e988 <memset>
    }
}
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	0800f38c 	.word	0x0800f38c
 800c8c8:	0800f390 	.word	0x0800f390
 800c8cc:	0800f398 	.word	0x0800f398
 800c8d0:	0800f3a0 	.word	0x0800f3a0
 800c8d4:	0800f3a4 	.word	0x0800f3a4
 800c8d8:	0800f3a8 	.word	0x0800f3a8
 800c8dc:	0800f3b0 	.word	0x0800f3b0
 800c8e0:	0800f3b4 	.word	0x0800f3b4
 800c8e4:	0800f3bc 	.word	0x0800f3bc
 800c8e8:	0800f3c0 	.word	0x0800f3c0
 800c8ec:	0800f3c8 	.word	0x0800f3c8
 800c8f0:	0800f3cc 	.word	0x0800f3cc
 800c8f4:	0800f3d4 	.word	0x0800f3d4
 800c8f8:	0800f3d8 	.word	0x0800f3d8
 800c8fc:	0800f3dc 	.word	0x0800f3dc
 800c900:	0800f3e0 	.word	0x0800f3e0
 800c904:	0800f3e8 	.word	0x0800f3e8
 800c908:	0800f3f0 	.word	0x0800f3f0
 800c90c:	0800f3f4 	.word	0x0800f3f4
 800c910:	0800f3f8 	.word	0x0800f3f8
 800c914:	0800f3fc 	.word	0x0800f3fc
 800c918:	0800f400 	.word	0x0800f400
 800c91c:	0800f408 	.word	0x0800f408
 800c920:	0800f40c 	.word	0x0800f40c
 800c924:	0800f414 	.word	0x0800f414
 800c928:	0800f41c 	.word	0x0800f41c
 800c92c:	0800f424 	.word	0x0800f424
 800c930:	0800f42c 	.word	0x0800f42c
 800c934:	0800f434 	.word	0x0800f434
 800c938:	0800f43c 	.word	0x0800f43c
 800c93c:	0800f444 	.word	0x0800f444
 800c940:	0800f44c 	.word	0x0800f44c
 800c944:	0800f454 	.word	0x0800f454
 800c948:	0800f45c 	.word	0x0800f45c
 800c94c:	0800f464 	.word	0x0800f464
 800c950:	0800f46c 	.word	0x0800f46c
 800c954:	0800f474 	.word	0x0800f474

0800c958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c95c:	f7f3 fca0 	bl	80002a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c960:	f000 f868 	bl	800ca34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800c964:	f000 f8b9 	bl	800cada <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c968:	f000 fab0 	bl	800cecc <MX_GPIO_Init>
  MX_DAC1_Init();
 800c96c:	f000 f9ea 	bl	800cd44 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800c970:	f000 fa5c 	bl	800ce2c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800c974:	f000 fa82 	bl	800ce7c <MX_OPAMP2_Init>
  MX_ADC1_Init();
 800c978:	f000 f8dc 	bl	800cb34 <MX_ADC1_Init>
  MX_ADC3_Init();
 800c97c:	f000 f952 	bl	800cc24 <MX_ADC3_Init>
  MX_COMP1_Init();
 800c980:	f000 f9b4 	bl	800ccec <MX_COMP1_Init>
  MX_LCD_Init();
 800c984:	f000 fa1a 	bl	800cdbc <MX_LCD_Init>
  /* USER CODE BEGIN 2 */
  //usbserialInit();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800c988:	f7fb fa9c 	bl	8007ec4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of mySem */
  mySemHandle = osSemaphoreNew(1, 1, &mySem_attributes);
 800c98c:	4a19      	ldr	r2, [pc, #100]	; (800c9f4 <main+0x9c>)
 800c98e:	2101      	movs	r1, #1
 800c990:	2001      	movs	r0, #1
 800c992:	f7fb fc5d 	bl	8008250 <osSemaphoreNew>
 800c996:	4603      	mov	r3, r0
 800c998:	4a17      	ldr	r2, [pc, #92]	; (800c9f8 <main+0xa0>)
 800c99a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue */
  myQueueHandle = osMessageQueueNew (64, sizeof(uint8_t), &myQueue_attributes);
 800c99c:	4a17      	ldr	r2, [pc, #92]	; (800c9fc <main+0xa4>)
 800c99e:	2101      	movs	r1, #1
 800c9a0:	2040      	movs	r0, #64	; 0x40
 800c9a2:	f7fb fd75 	bl	8008490 <osMessageQueueNew>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <main+0xa8>)
 800c9aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800c9ac:	4a15      	ldr	r2, [pc, #84]	; (800ca04 <main+0xac>)
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4815      	ldr	r0, [pc, #84]	; (800ca08 <main+0xb0>)
 800c9b2:	f7fb fad1 	bl	8007f58 <osThreadNew>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	4a14      	ldr	r2, [pc, #80]	; (800ca0c <main+0xb4>)
 800c9ba:	6013      	str	r3, [r2, #0]

  /* creation of usbTxTask */
  usbTxTaskHandle = osThreadNew(StartUsbTxTask, NULL, &usbTxTask_attributes);
 800c9bc:	4a14      	ldr	r2, [pc, #80]	; (800ca10 <main+0xb8>)
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4814      	ldr	r0, [pc, #80]	; (800ca14 <main+0xbc>)
 800c9c2:	f7fb fac9 	bl	8007f58 <osThreadNew>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	4a13      	ldr	r2, [pc, #76]	; (800ca18 <main+0xc0>)
 800c9ca:	6013      	str	r3, [r2, #0]

  /* creation of producerTask */
  producerTaskHandle = osThreadNew(StartproducerTask, NULL, &producerTask_attributes);
 800c9cc:	4a13      	ldr	r2, [pc, #76]	; (800ca1c <main+0xc4>)
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	4813      	ldr	r0, [pc, #76]	; (800ca20 <main+0xc8>)
 800c9d2:	f7fb fac1 	bl	8007f58 <osThreadNew>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	4a12      	ldr	r2, [pc, #72]	; (800ca24 <main+0xcc>)
 800c9da:	6013      	str	r3, [r2, #0]

  /* creation of consumerTask */
  consumerTaskHandle = osThreadNew(StartconsumerTask, NULL, &consumerTask_attributes);
 800c9dc:	4a12      	ldr	r2, [pc, #72]	; (800ca28 <main+0xd0>)
 800c9de:	2100      	movs	r1, #0
 800c9e0:	4812      	ldr	r0, [pc, #72]	; (800ca2c <main+0xd4>)
 800c9e2:	f7fb fab9 	bl	8007f58 <osThreadNew>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	4a11      	ldr	r2, [pc, #68]	; (800ca30 <main+0xd8>)
 800c9ea:	6013      	str	r3, [r2, #0]
 /* osSemaphoreRelease(mySemHandle);
  vTaskStartScheduler();*/
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800c9ec:	f7fb fa8e 	bl	8007f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c9f0:	e7fe      	b.n	800c9f0 <main+0x98>
 800c9f2:	bf00      	nop
 800c9f4:	0800f670 	.word	0x0800f670
 800c9f8:	20003f1c 	.word	0x20003f1c
 800c9fc:	0800f658 	.word	0x0800f658
 800ca00:	20003f18 	.word	0x20003f18
 800ca04:	0800f5c8 	.word	0x0800f5c8
 800ca08:	0800d0c9 	.word	0x0800d0c9
 800ca0c:	20001d90 	.word	0x20001d90
 800ca10:	0800f5ec 	.word	0x0800f5ec
 800ca14:	0800e865 	.word	0x0800e865
 800ca18:	20002e50 	.word	0x20002e50
 800ca1c:	0800f610 	.word	0x0800f610
 800ca20:	0800d0dd 	.word	0x0800d0dd
 800ca24:	20003f10 	.word	0x20003f10
 800ca28:	0800f634 	.word	0x0800f634
 800ca2c:	0800d205 	.word	0x0800d205
 800ca30:	20003f14 	.word	0x20003f14

0800ca34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b096      	sub	sp, #88	; 0x58
 800ca38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ca3a:	f107 0314 	add.w	r3, r7, #20
 800ca3e:	2244      	movs	r2, #68	; 0x44
 800ca40:	2100      	movs	r1, #0
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 ffa0 	bl	800e988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ca48:	463b      	mov	r3, r7
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	605a      	str	r2, [r3, #4]
 800ca50:	609a      	str	r2, [r3, #8]
 800ca52:	60da      	str	r2, [r3, #12]
 800ca54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800ca56:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ca5a:	f7f6 fc91 	bl	8003380 <HAL_PWREx_ControlVoltageScaling>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800ca64:	f000 fc78 	bl	800d358 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800ca68:	2325      	movs	r3, #37	; 0x25
 800ca6a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ca6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ca70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_BYPASS;
 800ca72:	2305      	movs	r3, #5
 800ca74:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800ca76:	2301      	movs	r3, #1
 800ca78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ca82:	2301      	movs	r3, #1
 800ca84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800ca86:	2310      	movs	r3, #16
 800ca88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800ca8e:	2302      	movs	r3, #2
 800ca90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800ca92:	2302      	movs	r3, #2
 800ca94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ca96:	f107 0314 	add.w	r3, r7, #20
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f6 fcd6 	bl	800344c <HAL_RCC_OscConfig>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <SystemClock_Config+0x76>
  {
    Error_Handler();
 800caa6:	f000 fc57 	bl	800d358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800caaa:	230f      	movs	r3, #15
 800caac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800caae:	2303      	movs	r3, #3
 800cab0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800caba:	2300      	movs	r3, #0
 800cabc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800cabe:	463b      	mov	r3, r7
 800cac0:	2104      	movs	r1, #4
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7f7 f8e8 	bl	8003c98 <HAL_RCC_ClockConfig>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800cace:	f000 fc43 	bl	800d358 <Error_Handler>
  }
}
 800cad2:	bf00      	nop
 800cad4:	3758      	adds	r7, #88	; 0x58
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b0a4      	sub	sp, #144	; 0x90
 800cade:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cae0:	1d3b      	adds	r3, r7, #4
 800cae2:	228c      	movs	r2, #140	; 0x8c
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f001 ff4e 	bl	800e988 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800caec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800caf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800caf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800cafa:	2303      	movs	r3, #3
 800cafc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 800cb02:	2320      	movs	r3, #32
 800cb04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800cb06:	2302      	movs	r3, #2
 800cb08:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800cb0a:	2304      	movs	r3, #4
 800cb0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800cb0e:	2304      	movs	r3, #4
 800cb10:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800cb12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb16:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cb18:	1d3b      	adds	r3, r7, #4
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f7 fade 	bl	80040dc <HAL_RCCEx_PeriphCLKConfig>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800cb26:	f000 fc17 	bl	800d358 <Error_Handler>
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	3790      	adds	r7, #144	; 0x90
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08a      	sub	sp, #40	; 0x28
 800cb38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800cb3a:	f107 031c 	add.w	r3, r7, #28
 800cb3e:	2200      	movs	r2, #0
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	605a      	str	r2, [r3, #4]
 800cb44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800cb46:	1d3b      	adds	r3, r7, #4
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	605a      	str	r2, [r3, #4]
 800cb4e:	609a      	str	r2, [r3, #8]
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	611a      	str	r2, [r3, #16]
 800cb54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800cb56:	4b30      	ldr	r3, [pc, #192]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb58:	4a30      	ldr	r2, [pc, #192]	; (800cc1c <MX_ADC1_Init+0xe8>)
 800cb5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800cb5c:	4b2e      	ldr	r3, [pc, #184]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cb62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cb64:	4b2c      	ldr	r3, [pc, #176]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cb6a:	4b2b      	ldr	r3, [pc, #172]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800cb70:	4b29      	ldr	r3, [pc, #164]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cb76:	4b28      	ldr	r3, [pc, #160]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb78:	2204      	movs	r2, #4
 800cb7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800cb7c:	4b26      	ldr	r3, [pc, #152]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800cb82:	4b25      	ldr	r3, [pc, #148]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800cb88:	4b23      	ldr	r3, [pc, #140]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cb8e:	4b22      	ldr	r3, [pc, #136]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cb96:	4b20      	ldr	r3, [pc, #128]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cb9c:	4b1e      	ldr	r3, [pc, #120]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cba2:	4b1d      	ldr	r3, [pc, #116]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800cbaa:	4b1b      	ldr	r3, [pc, #108]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800cbb0:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cbb8:	4817      	ldr	r0, [pc, #92]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cbba:	f7f3 fdb9 	bl	8000730 <HAL_ADC_Init>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800cbc4:	f000 fbc8 	bl	800d358 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800cbcc:	f107 031c 	add.w	r3, r7, #28
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4811      	ldr	r0, [pc, #68]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cbd4:	f7f4 fb38 	bl	8001248 <HAL_ADCEx_MultiModeConfigChannel>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800cbde:	f000 fbbb 	bl	800d358 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <MX_ADC1_Init+0xec>)
 800cbe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cbe6:	2306      	movs	r3, #6
 800cbe8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800cbee:	237f      	movs	r3, #127	; 0x7f
 800cbf0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800cbf2:	2304      	movs	r3, #4
 800cbf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cbfa:	1d3b      	adds	r3, r7, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4806      	ldr	r0, [pc, #24]	; (800cc18 <MX_ADC1_Init+0xe4>)
 800cc00:	f7f3 fef0 	bl	80009e4 <HAL_ADC_ConfigChannel>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800cc0a:	f000 fba5 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cc0e:	bf00      	nop
 800cc10:	3728      	adds	r7, #40	; 0x28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20001bdc 	.word	0x20001bdc
 800cc1c:	50040000 	.word	0x50040000
 800cc20:	04300002 	.word	0x04300002

0800cc24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	605a      	str	r2, [r3, #4]
 800cc32:	609a      	str	r2, [r3, #8]
 800cc34:	60da      	str	r2, [r3, #12]
 800cc36:	611a      	str	r2, [r3, #16]
 800cc38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800cc3a:	4b29      	ldr	r3, [pc, #164]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc3c:	4a29      	ldr	r2, [pc, #164]	; (800cce4 <MX_ADC3_Init+0xc0>)
 800cc3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800cc40:	4b27      	ldr	r3, [pc, #156]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cc46:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800cc48:	4b25      	ldr	r3, [pc, #148]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cc4e:	4b24      	ldr	r3, [pc, #144]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800cc54:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cc5a:	4b21      	ldr	r3, [pc, #132]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc5c:	2204      	movs	r2, #4
 800cc5e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800cc60:	4b1f      	ldr	r3, [pc, #124]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800cc66:	4b1e      	ldr	r3, [pc, #120]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800cc6c:	4b1c      	ldr	r3, [pc, #112]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800cc72:	4b1b      	ldr	r3, [pc, #108]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cc7a:	4b19      	ldr	r3, [pc, #100]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cc80:	4b17      	ldr	r3, [pc, #92]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800cc86:	4b16      	ldr	r3, [pc, #88]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800cc8e:	4b14      	ldr	r3, [pc, #80]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800cc94:	4b12      	ldr	r3, [pc, #72]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800cc9c:	4810      	ldr	r0, [pc, #64]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800cc9e:	f7f3 fd47 	bl	8000730 <HAL_ADC_Init>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800cca8:	f000 fb56 	bl	800d358 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ccac:	4b0e      	ldr	r3, [pc, #56]	; (800cce8 <MX_ADC3_Init+0xc4>)
 800ccae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ccb8:	237f      	movs	r3, #127	; 0x7f
 800ccba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ccbc:	2304      	movs	r3, #4
 800ccbe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ccc4:	463b      	mov	r3, r7
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4805      	ldr	r0, [pc, #20]	; (800cce0 <MX_ADC3_Init+0xbc>)
 800ccca:	f7f3 fe8b 	bl	80009e4 <HAL_ADC_ConfigChannel>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800ccd4:	f000 fb40 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800ccd8:	bf00      	nop
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20001c44 	.word	0x20001c44
 800cce4:	50040200 	.word	0x50040200
 800cce8:	3ac04000 	.word	0x3ac04000

0800ccec <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800ccf0:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <MX_COMP1_Init+0x50>)
 800ccf2:	4a13      	ldr	r2, [pc, #76]	; (800cd40 <MX_COMP1_Init+0x54>)
 800ccf4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800ccf6:	4b11      	ldr	r3, [pc, #68]	; (800cd3c <MX_COMP1_Init+0x50>)
 800ccf8:	2270      	movs	r2, #112	; 0x70
 800ccfa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800ccfc:	4b0f      	ldr	r3, [pc, #60]	; (800cd3c <MX_COMP1_Init+0x50>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800cd02:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800cd08:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800cd14:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800cd1a:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800cd20:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800cd26:	4805      	ldr	r0, [pc, #20]	; (800cd3c <MX_COMP1_Init+0x50>)
 800cd28:	f7f4 fbe6 	bl	80014f8 <HAL_COMP_Init>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 800cd32:	f000 fb11 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800cd36:	bf00      	nop
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20001cac 	.word	0x20001cac
 800cd40:	40010200 	.word	0x40010200

0800cd44 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	; 0x28
 800cd48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800cd4a:	1d3b      	adds	r3, r7, #4
 800cd4c:	2224      	movs	r2, #36	; 0x24
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f001 fe19 	bl	800e988 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800cd56:	4b17      	ldr	r3, [pc, #92]	; (800cdb4 <MX_DAC1_Init+0x70>)
 800cd58:	4a17      	ldr	r2, [pc, #92]	; (800cdb8 <MX_DAC1_Init+0x74>)
 800cd5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800cd5c:	4815      	ldr	r0, [pc, #84]	; (800cdb4 <MX_DAC1_Init+0x70>)
 800cd5e:	f7f4 fd9f 	bl	80018a0 <HAL_DAC_Init>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800cd68:	f000 faf6 	bl	800d358 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800cd80:	1d3b      	adds	r3, r7, #4
 800cd82:	2200      	movs	r2, #0
 800cd84:	4619      	mov	r1, r3
 800cd86:	480b      	ldr	r0, [pc, #44]	; (800cdb4 <MX_DAC1_Init+0x70>)
 800cd88:	f7f4 fdac 	bl	80018e4 <HAL_DAC_ConfigChannel>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800cd92:	f000 fae1 	bl	800d358 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800cd96:	1d3b      	adds	r3, r7, #4
 800cd98:	2210      	movs	r2, #16
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4805      	ldr	r0, [pc, #20]	; (800cdb4 <MX_DAC1_Init+0x70>)
 800cd9e:	f7f4 fda1 	bl	80018e4 <HAL_DAC_ConfigChannel>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800cda8:	f000 fad6 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800cdac:	bf00      	nop
 800cdae:	3728      	adds	r7, #40	; 0x28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20001cd8 	.word	0x20001cd8
 800cdb8:	40007400 	.word	0x40007400

0800cdbc <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 800cdc0:	4b18      	ldr	r3, [pc, #96]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdc2:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <MX_LCD_Init+0x6c>)
 800cdc4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800cdc6:	4b17      	ldr	r3, [pc, #92]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800cdcc:	4b15      	ldr	r3, [pc, #84]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800cdd2:	4b14      	ldr	r3, [pc, #80]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdd4:	220c      	movs	r2, #12
 800cdd6:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800cdd8:	4b12      	ldr	r3, [pc, #72]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdda:	2200      	movs	r2, #0
 800cddc:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800cdde:	4b11      	ldr	r3, [pc, #68]	; (800ce24 <MX_LCD_Init+0x68>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800cde4:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <MX_LCD_Init+0x68>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800cdea:	4b0e      	ldr	r3, [pc, #56]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <MX_LCD_Init+0x68>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800ce02:	4b08      	ldr	r3, [pc, #32]	; (800ce24 <MX_LCD_Init+0x68>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800ce08:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <MX_LCD_Init+0x68>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800ce0e:	4805      	ldr	r0, [pc, #20]	; (800ce24 <MX_LCD_Init+0x68>)
 800ce10:	f7f5 f850 	bl	8001eb4 <HAL_LCD_Init>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800ce1a:	f000 fa9d 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800ce1e:	bf00      	nop
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20001cec 	.word	0x20001cec
 800ce28:	40002400 	.word	0x40002400

0800ce2c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800ce30:	4b10      	ldr	r3, [pc, #64]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce32:	4a11      	ldr	r2, [pc, #68]	; (800ce78 <MX_OPAMP1_Init+0x4c>)
 800ce34:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 800ce36:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800ce3c:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce3e:	2208      	movs	r2, #8
 800ce40:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800ce42:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800ce48:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2;
 800ce4e:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 800ce54:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800ce5a:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800ce60:	4804      	ldr	r0, [pc, #16]	; (800ce74 <MX_OPAMP1_Init+0x48>)
 800ce62:	f7f5 f909 	bl	8002078 <HAL_OPAMP_Init>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 800ce6c:	f000 fa74 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800ce70:	bf00      	nop
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	20001d28 	.word	0x20001d28
 800ce78:	40007800 	.word	0x40007800

0800ce7c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800ce80:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ce82:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <MX_OPAMP2_Init+0x4c>)
 800ce84:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 800ce86:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ce8e:	2208      	movs	r2, #8
 800ce90:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800ce92:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 800ce9e:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 800cea4:	4b07      	ldr	r3, [pc, #28]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800ceaa:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800ceb0:	4804      	ldr	r0, [pc, #16]	; (800cec4 <MX_OPAMP2_Init+0x48>)
 800ceb2:	f7f5 f8e1 	bl	8002078 <HAL_OPAMP_Init>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 800cebc:	f000 fa4c 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800cec0:	bf00      	nop
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20001d5c 	.word	0x20001d5c
 800cec8:	40007810 	.word	0x40007810

0800cecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08c      	sub	sp, #48	; 0x30
 800ced0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ced2:	f107 031c 	add.w	r3, r7, #28
 800ced6:	2200      	movs	r2, #0
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	605a      	str	r2, [r3, #4]
 800cedc:	609a      	str	r2, [r3, #8]
 800cede:	60da      	str	r2, [r3, #12]
 800cee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cee2:	4b73      	ldr	r3, [pc, #460]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee6:	4a72      	ldr	r2, [pc, #456]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cee8:	f043 0310 	orr.w	r3, r3, #16
 800ceec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ceee:	4b70      	ldr	r3, [pc, #448]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cef2:	f003 0310 	and.w	r3, r3, #16
 800cef6:	61bb      	str	r3, [r7, #24]
 800cef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cefa:	4b6d      	ldr	r3, [pc, #436]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cefe:	4a6c      	ldr	r2, [pc, #432]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf00:	f043 0304 	orr.w	r3, r3, #4
 800cf04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf06:	4b6a      	ldr	r3, [pc, #424]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf12:	4b67      	ldr	r3, [pc, #412]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf16:	4a66      	ldr	r2, [pc, #408]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf1e:	4b64      	ldr	r3, [pc, #400]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf26:	613b      	str	r3, [r7, #16]
 800cf28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf2a:	4b61      	ldr	r3, [pc, #388]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf2e:	4a60      	ldr	r2, [pc, #384]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf30:	f043 0301 	orr.w	r3, r3, #1
 800cf34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf36:	4b5e      	ldr	r3, [pc, #376]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf42:	4b5b      	ldr	r3, [pc, #364]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf46:	4a5a      	ldr	r2, [pc, #360]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf48:	f043 0302 	orr.w	r3, r3, #2
 800cf4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf4e:	4b58      	ldr	r3, [pc, #352]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	60bb      	str	r3, [r7, #8]
 800cf58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf5a:	4b55      	ldr	r3, [pc, #340]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf5e:	4a54      	ldr	r2, [pc, #336]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf60:	f043 0308 	orr.w	r3, r3, #8
 800cf64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf66:	4b52      	ldr	r3, [pc, #328]	; (800d0b0 <MX_GPIO_Init+0x1e4>)
 800cf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf6a:	f003 0308 	and.w	r3, r3, #8
 800cf6e:	607b      	str	r3, [r7, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800cf72:	2200      	movs	r2, #0
 800cf74:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800cf78:	484e      	ldr	r0, [pc, #312]	; (800d0b4 <MX_GPIO_Init+0x1e8>)
 800cf7a:	f7f4 ff5f 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IO2_Pin IO3_Pin IO4_Pin IO5_Pin
                           IO6_Pin IO7_Pin IO8_Pin IO9_Pin
                           IO10_Pin IO11_Pin IO12_Pin IO13_Pin
                           IO14_Pin IO0_Pin IO1_Pin */
  GPIO_InitStruct.Pin = IO2_Pin|IO3_Pin|IO4_Pin|IO5_Pin
 800cf7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800cf82:	61fb      	str	r3, [r7, #28]
                          |IO6_Pin|IO7_Pin|IO8_Pin|IO9_Pin
                          |IO10_Pin|IO11_Pin|IO12_Pin|IO13_Pin
                          |IO14_Pin|IO0_Pin|IO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf84:	2300      	movs	r3, #0
 800cf86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cf8c:	f107 031c 	add.w	r3, r7, #28
 800cf90:	4619      	mov	r1, r3
 800cf92:	4849      	ldr	r0, [pc, #292]	; (800d0b8 <MX_GPIO_Init+0x1ec>)
 800cf94:	f7f4 fdc0 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED0_Pin|LED1_Pin|LED2_Pin;
 800cf98:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfaa:	f107 031c 	add.w	r3, r7, #28
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4840      	ldr	r0, [pc, #256]	; (800d0b4 <MX_GPIO_Init+0x1e8>)
 800cfb2:	f7f4 fdb1 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cfb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfc4:	f107 031c 	add.w	r3, r7, #28
 800cfc8:	4619      	mov	r1, r3
 800cfca:	483a      	ldr	r0, [pc, #232]	; (800d0b4 <MX_GPIO_Init+0x1e8>)
 800cfcc:	f7f4 fda4 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800cfd0:	230a      	movs	r3, #10
 800cfd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cfdc:	f107 031c 	add.w	r3, r7, #28
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4836      	ldr	r0, [pc, #216]	; (800d0bc <MX_GPIO_Init+0x1f0>)
 800cfe4:	f7f4 fd98 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cfec:	2303      	movs	r3, #3
 800cfee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cff4:	f107 031c 	add.w	r3, r7, #28
 800cff8:	4619      	mov	r1, r3
 800cffa:	4831      	ldr	r0, [pc, #196]	; (800d0c0 <MX_GPIO_Init+0x1f4>)
 800cffc:	f7f4 fd8c 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO15_Pin */
  GPIO_InitStruct.Pin = IO15_Pin;
 800d000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d006:	2300      	movs	r3, #0
 800d008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d00a:	2301      	movs	r3, #1
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IO15_GPIO_Port, &GPIO_InitStruct);
 800d00e:	f107 031c 	add.w	r3, r7, #28
 800d012:	4619      	mov	r1, r3
 800d014:	4828      	ldr	r0, [pc, #160]	; (800d0b8 <MX_GPIO_Init+0x1ec>)
 800d016:	f7f4 fd7f 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW6_Pin SW1_Pin SW2_Pin SW3_Pin
                           SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW6_Pin|SW1_Pin|SW2_Pin|SW3_Pin
 800d01a:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 800d01e:	61fb      	str	r3, [r7, #28]
                          |SW4_Pin|SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d020:	2300      	movs	r3, #0
 800d022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d024:	2302      	movs	r3, #2
 800d026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d028:	f107 031c 	add.w	r3, r7, #28
 800d02c:	4619      	mov	r1, r3
 800d02e:	4824      	ldr	r0, [pc, #144]	; (800d0c0 <MX_GPIO_Init+0x1f4>)
 800d030:	f7f4 fd72 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW7_Pin SW0_Pin */
  GPIO_InitStruct.Pin = SW7_Pin|SW0_Pin;
 800d034:	f640 0308 	movw	r3, #2056	; 0x808
 800d038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d03a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800d03e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d040:	2300      	movs	r3, #0
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d044:	f107 031c 	add.w	r3, r7, #28
 800d048:	4619      	mov	r1, r3
 800d04a:	481d      	ldr	r0, [pc, #116]	; (800d0c0 <MX_GPIO_Init+0x1f4>)
 800d04c:	f7f4 fd64 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO24_Pin IO25_Pin IO26_Pin IO27_Pin
                           IO28_Pin IO29_Pin IO30_Pin IO31_Pin
                           IO16_Pin IO17_Pin IO18_Pin IO19_Pin
                           IO20_Pin IO21_Pin IO22_Pin IO23_Pin */
  GPIO_InitStruct.Pin = IO24_Pin|IO25_Pin|IO26_Pin|IO27_Pin
 800d050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d054:	61fb      	str	r3, [r7, #28]
                          |IO28_Pin|IO29_Pin|IO30_Pin|IO31_Pin
                          |IO16_Pin|IO17_Pin|IO18_Pin|IO19_Pin
                          |IO20_Pin|IO21_Pin|IO22_Pin|IO23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d056:	2300      	movs	r3, #0
 800d058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d05e:	f107 031c 	add.w	r3, r7, #28
 800d062:	4619      	mov	r1, r3
 800d064:	4817      	ldr	r0, [pc, #92]	; (800d0c4 <MX_GPIO_Init+0x1f8>)
 800d066:	f7f4 fd57 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d06e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d070:	2303      	movs	r3, #3
 800d072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d074:	2300      	movs	r3, #0
 800d076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d078:	f107 031c 	add.w	r3, r7, #28
 800d07c:	4619      	mov	r1, r3
 800d07e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d082:	f7f4 fd49 	bl	8001b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800d086:	2200      	movs	r2, #0
 800d088:	2105      	movs	r1, #5
 800d08a:	2009      	movs	r0, #9
 800d08c:	f7f4 fbde 	bl	800184c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800d090:	2009      	movs	r0, #9
 800d092:	f7f4 fbf7 	bl	8001884 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800d096:	2200      	movs	r2, #0
 800d098:	2105      	movs	r1, #5
 800d09a:	2028      	movs	r0, #40	; 0x28
 800d09c:	f7f4 fbd6 	bl	800184c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d0a0:	2028      	movs	r0, #40	; 0x28
 800d0a2:	f7f4 fbef 	bl	8001884 <HAL_NVIC_EnableIRQ>

}
 800d0a6:	bf00      	nop
 800d0a8:	3730      	adds	r7, #48	; 0x30
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	40021000 	.word	0x40021000
 800d0b4:	48000800 	.word	0x48000800
 800d0b8:	48001000 	.word	0x48001000
 800d0bc:	48001c00 	.word	0x48001c00
 800d0c0:	48000400 	.word	0x48000400
 800d0c4:	48000c00 	.word	0x48000c00

0800d0c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800d0d0:	f000 fcc2 	bl	800da58 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 osDelay(1);
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	f7fb f8a0 	bl	800821a <osDelay>
 800d0da:	e7fb      	b.n	800d0d4 <StartDefaultTask+0xc>

0800d0dc <StartproducerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartproducerTask */
void StartproducerTask(void *argument)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartproducerTask */
	  MX_USB_DEVICE_Init();
 800d0e4:	f000 fcb8 	bl	800da58 <MX_USB_DEVICE_Init>
	  usbserialInit();
 800d0e8:	f001 fac0 	bl	800e66c <usbserialInit>

      /* utilizzo dei caratteri speciali per la gestione degli spazi tra ch e tra parole*/
	  uint8_t spaceCh = 0x21; // spazio tra caratteri "!"
 800d0ec:	2321      	movs	r3, #33	; 0x21
 800d0ee:	75bb      	strb	r3, [r7, #22]
	  uint8_t spaceStr = 0x23; // spazio tra parole "#"
 800d0f0:	2323      	movs	r3, #35	; 0x23
 800d0f2:	757b      	strb	r3, [r7, #21]
	  //uint8_t endl = 0x0D; // "\r"

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(mySemHandle, osWaitForever) == osOK) { // acquisizione del semaforo
 800d0f4:	4b3e      	ldr	r3, [pc, #248]	; (800d1f0 <StartproducerTask+0x114>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f04f 31ff 	mov.w	r1, #4294967295
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fb f931 	bl	8008364 <osSemaphoreAcquire>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d16d      	bne.n	800d1e4 <StartproducerTask+0x108>

	     usbserialPrint("Task produttore ATTIVATO.\n\r");
 800d108:	483a      	ldr	r0, [pc, #232]	; (800d1f4 <StartproducerTask+0x118>)
 800d10a:	f001 fb5d 	bl	800e7c8 <usbserialPrint>
	     usbserialPrint("Inserisci il dato da codificare:\n\r");
 800d10e:	483a      	ldr	r0, [pc, #232]	; (800d1f8 <StartproducerTask+0x11c>)
 800d110:	f001 fb5a 	bl	800e7c8 <usbserialPrint>

	     for( int i = 0; i < 10; i++ ) { // leggo fino a 10 caratteri
 800d114:	2300      	movs	r3, #0
 800d116:	61fb      	str	r3, [r7, #28]
 800d118:	e059      	b.n	800d1ce <StartproducerTask+0xf2>
	     		    uint8_t ch = usbserialReadChar(); // vado a leggere i caratteri da tastiera
 800d11a:	f001 fb65 	bl	800e7e8 <usbserialReadChar>
 800d11e:	4603      	mov	r3, r0
 800d120:	75fb      	strb	r3, [r7, #23]
	     			uint8_t morseCode[10]; // inizializzo un vettore dove metto la codifica, dentro il for così con memset lo posso resettare
	     		    if (ch == '\r'){
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	2b0d      	cmp	r3, #13
 800d126:	d102      	bne.n	800d12e <StartproducerTask+0x52>
	     		    	//osMessageQueuePut(myQueueHandle, &endl, 0, 0);
	     		    	i = 10; // se ho premuto invio esco dal for perchè non ho inserito più caratteri
 800d128:	230a      	movs	r3, #10
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	e04c      	b.n	800d1c8 <StartproducerTask+0xec>
	     		    }
	     		    else{
	     		       encodeMorse(ch, morseCode); // richiamo la funzione encodeMorse --> vedi Src/codificaMorse.c
 800d12e:	f107 0208 	add.w	r2, r7, #8
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	4611      	mov	r1, r2
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff fa58 	bl	800c5ec <encodeMorse>

	     		       for (int c = 0; c<sizeof(morseCode); c++){ // itero mettendo in coda ogni "." o "-"
 800d13c:	2300      	movs	r3, #0
 800d13e:	61bb      	str	r3, [r7, #24]
 800d140:	e02d      	b.n	800d19e <StartproducerTask+0xc2>

	     		    	     if ((morseCode[c] == 0x2E) || (morseCode[c] == 0x2D)){ // "."; "-";
 800d142:	f107 0208 	add.w	r2, r7, #8
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	4413      	add	r3, r2
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b2e      	cmp	r3, #46	; 0x2e
 800d14e:	d006      	beq.n	800d15e <StartproducerTask+0x82>
 800d150:	f107 0208 	add.w	r2, r7, #8
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	4413      	add	r3, r2
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b2d      	cmp	r3, #45	; 0x2d
 800d15c:	d10a      	bne.n	800d174 <StartproducerTask+0x98>
	     		    	         osMessageQueuePut(myQueueHandle, &morseCode[c], 0, 0);// metto il dato in coda
 800d15e:	4b27      	ldr	r3, [pc, #156]	; (800d1fc <StartproducerTask+0x120>)
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f107 0208 	add.w	r2, r7, #8
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	18d1      	adds	r1, r2, r3
 800d16a:	2300      	movs	r3, #0
 800d16c:	2200      	movs	r2, #0
 800d16e:	f7fb fa03 	bl	8008578 <osMessageQueuePut>
 800d172:	e011      	b.n	800d198 <StartproducerTask+0xbc>
	     		    	     }

	     		    	     else if(morseCode[c] == 0x2A){ // ho messo uno spazio, nella nostra codifica " " == "*"
 800d174:	f107 0208 	add.w	r2, r7, #8
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	4413      	add	r3, r2
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b2a      	cmp	r3, #42	; 0x2a
 800d180:	d108      	bne.n	800d194 <StartproducerTask+0xb8>
	     		    	    	osMessageQueuePut(myQueueHandle, &spaceStr, 0, 0);// metto il dato in coda
 800d182:	4b1e      	ldr	r3, [pc, #120]	; (800d1fc <StartproducerTask+0x120>)
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	f107 0115 	add.w	r1, r7, #21
 800d18a:	2300      	movs	r3, #0
 800d18c:	2200      	movs	r2, #0
 800d18e:	f7fb f9f3 	bl	8008578 <osMessageQueuePut>
 800d192:	e001      	b.n	800d198 <StartproducerTask+0xbc>
	     		    	     }

	     		    	     else {
	     		    	    	 c = sizeof(morseCode); // esco dal for perchè ho finito di codificare la lettera
 800d194:	230a      	movs	r3, #10
 800d196:	61bb      	str	r3, [r7, #24]
	     		       for (int c = 0; c<sizeof(morseCode); c++){ // itero mettendo in coda ogni "." o "-"
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	3301      	adds	r3, #1
 800d19c:	61bb      	str	r3, [r7, #24]
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	2b09      	cmp	r3, #9
 800d1a2:	d9ce      	bls.n	800d142 <StartproducerTask+0x66>
	     		    	   }
	     		       	   }

	     		       if (morseCode[0] != 0x2A){ // faccio un check se il primo valore di morseCode == "*" (cioè uno spazio) così evito di mettere ulteriori spazi
 800d1a4:	7a3b      	ldrb	r3, [r7, #8]
 800d1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a8:	d007      	beq.n	800d1ba <StartproducerTask+0xde>
	     		    	   osMessageQueuePut(myQueueHandle, &spaceCh, 0, 0);// fine codifica lettera metto uno spazio " "
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <StartproducerTask+0x120>)
 800d1ac:	6818      	ldr	r0, [r3, #0]
 800d1ae:	f107 0116 	add.w	r1, r7, #22
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7fb f9df 	bl	8008578 <osMessageQueuePut>
	     		       	   }

	     		      memset(morseCode, 0, sizeof(morseCode)); // resetto il contenuto del vettore morseCode
 800d1ba:	f107 0308 	add.w	r3, r7, #8
 800d1be:	220a      	movs	r2, #10
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f001 fbe0 	bl	800e988 <memset>
	     for( int i = 0; i < 10; i++ ) { // leggo fino a 10 caratteri
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	61fb      	str	r3, [r7, #28]
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	2b09      	cmp	r3, #9
 800d1d2:	dda2      	ble.n	800d11a <StartproducerTask+0x3e>
	     		    	}
	     	 }
	     	 usbserialPrint("Dato inserito nella coda CORRETTAMENTE.\n\r");
 800d1d4:	480a      	ldr	r0, [pc, #40]	; (800d200 <StartproducerTask+0x124>)
 800d1d6:	f001 faf7 	bl	800e7c8 <usbserialPrint>
	     	 osSemaphoreRelease(mySemHandle);
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <StartproducerTask+0x114>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fb f912 	bl	8008408 <osSemaphoreRelease>

	  	  }
         	 vTaskDelay(1000);
 800d1e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d1e8:	f7fd f9ac 	bl	800a544 <vTaskDelay>
	  if (osSemaphoreAcquire(mySemHandle, osWaitForever) == osOK) { // acquisizione del semaforo
 800d1ec:	e782      	b.n	800d0f4 <StartproducerTask+0x18>
 800d1ee:	bf00      	nop
 800d1f0:	20003f1c 	.word	0x20003f1c
 800d1f4:	0800f4c0 	.word	0x0800f4c0
 800d1f8:	0800f4dc 	.word	0x0800f4dc
 800d1fc:	20003f18 	.word	0x20003f18
 800d200:	0800f500 	.word	0x0800f500

0800d204 <StartconsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartconsumerTask */
void StartconsumerTask(void *argument)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartconsumerTask */
	  MX_USB_DEVICE_Init();
 800d20c:	f000 fc24 	bl	800da58 <MX_USB_DEVICE_Init>
	  usbserialInit();
 800d210:	f001 fa2c 	bl	800e66c <usbserialInit>
	  uint8_t ch;

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(mySemHandle, osWaitForever) == osOK) {
 800d214:	4b3e      	ldr	r3, [pc, #248]	; (800d310 <StartconsumerTask+0x10c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f04f 31ff 	mov.w	r1, #4294967295
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fb f8a1 	bl	8008364 <osSemaphoreAcquire>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d16d      	bne.n	800d304 <StartconsumerTask+0x100>
	    usbserialPrint("Task Consumatore ATTIVATO.\n\r");
 800d228:	483a      	ldr	r0, [pc, #232]	; (800d314 <StartconsumerTask+0x110>)
 800d22a:	f001 facd 	bl	800e7c8 <usbserialPrint>
	    usbserialPrint("CODIFICA IN CORSO...");
 800d22e:	483a      	ldr	r0, [pc, #232]	; (800d318 <StartconsumerTask+0x114>)
 800d230:	f001 faca 	bl	800e7c8 <usbserialPrint>

	    while (osMessageQueueGet(myQueueHandle, (void *)&ch, NULL, 0) == osOK) // ciclo while che mi svuota la coda, continua finchè c'è un valore in coda quindi osOK
 800d234:	e046      	b.n	800d2c4 <StartconsumerTask+0xc0>
	            {

	    	if ( ch == 0x21 ){ // breve pausa tra ch e ch quindi se ch == "!"
 800d236:	7bfb      	ldrb	r3, [r7, #15]
 800d238:	2b21      	cmp	r3, #33	; 0x21
 800d23a:	d107      	bne.n	800d24c <StartconsumerTask+0x48>
	    		usbserialPrint("  ");
 800d23c:	4837      	ldr	r0, [pc, #220]	; (800d31c <StartconsumerTask+0x118>)
 800d23e:	f001 fac3 	bl	800e7c8 <usbserialPrint>
	    		HAL_Delay(2000);
 800d242:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d246:	f7f3 f863 	bl	8000310 <HAL_Delay>
 800d24a:	e03b      	b.n	800d2c4 <StartconsumerTask+0xc0>
	    	}
	    	else if( ch == 0x23 ){ // pausa lunga tra due parole quindi se ch == "#"
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	2b23      	cmp	r3, #35	; 0x23
 800d250:	d107      	bne.n	800d262 <StartconsumerTask+0x5e>
	    		usbserialPrint("  ");
 800d252:	4832      	ldr	r0, [pc, #200]	; (800d31c <StartconsumerTask+0x118>)
 800d254:	f001 fab8 	bl	800e7c8 <usbserialPrint>
	    		HAL_Delay(5000);
 800d258:	f241 3088 	movw	r0, #5000	; 0x1388
 800d25c:	f7f3 f858 	bl	8000310 <HAL_Delay>
 800d260:	e030      	b.n	800d2c4 <StartconsumerTask+0xc0>
	    	}
	    	else {

	    		usbserialPrintf("%c", ch);
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	4619      	mov	r1, r3
 800d266:	482e      	ldr	r0, [pc, #184]	; (800d320 <StartconsumerTask+0x11c>)
 800d268:	f001 fad4 	bl	800e814 <usbserialPrintf>

	    		if (ch == 0x2E) { // se ch == "*"
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	2b2e      	cmp	r3, #46	; 0x2e
 800d270:	d114      	bne.n	800d29c <StartconsumerTask+0x98>
	    			HAL_GPIO_WritePin(GPIOC, LED0_Pin, SET);
 800d272:	2201      	movs	r2, #1
 800d274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d278:	482a      	ldr	r0, [pc, #168]	; (800d324 <StartconsumerTask+0x120>)
 800d27a:	f7f4 fddf 	bl	8001e3c <HAL_GPIO_WritePin>
	    			osDelay(500);
 800d27e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d282:	f7fa ffca 	bl	800821a <osDelay>
	    			HAL_GPIO_WritePin(GPIOC, LED0_Pin, RESET);
 800d286:	2200      	movs	r2, #0
 800d288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d28c:	4825      	ldr	r0, [pc, #148]	; (800d324 <StartconsumerTask+0x120>)
 800d28e:	f7f4 fdd5 	bl	8001e3c <HAL_GPIO_WritePin>
	    			osDelay(500);
 800d292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d296:	f7fa ffc0 	bl	800821a <osDelay>
 800d29a:	e013      	b.n	800d2c4 <StartconsumerTask+0xc0>
	    		}

	    		else { // se ch == "-"
	    			HAL_GPIO_WritePin(GPIOC, LED0_Pin, SET);
 800d29c:	2201      	movs	r2, #1
 800d29e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2a2:	4820      	ldr	r0, [pc, #128]	; (800d324 <StartconsumerTask+0x120>)
 800d2a4:	f7f4 fdca 	bl	8001e3c <HAL_GPIO_WritePin>
	    			osDelay(2500);
 800d2a8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800d2ac:	f7fa ffb5 	bl	800821a <osDelay>
	    			HAL_GPIO_WritePin(GPIOC, LED0_Pin, RESET);
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2b6:	481b      	ldr	r0, [pc, #108]	; (800d324 <StartconsumerTask+0x120>)
 800d2b8:	f7f4 fdc0 	bl	8001e3c <HAL_GPIO_WritePin>
	    			osDelay(500);
 800d2bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d2c0:	f7fa ffab 	bl	800821a <osDelay>
	    while (osMessageQueueGet(myQueueHandle, (void *)&ch, NULL, 0) == osOK) // ciclo while che mi svuota la coda, continua finchè c'è un valore in coda quindi osOK
 800d2c4:	4b18      	ldr	r3, [pc, #96]	; (800d328 <StartconsumerTask+0x124>)
 800d2c6:	6818      	ldr	r0, [r3, #0]
 800d2c8:	f107 010f 	add.w	r1, r7, #15
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f7fb f9b2 	bl	8008638 <osMessageQueueGet>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0ad      	beq.n	800d236 <StartconsumerTask+0x32>
	    			}
	    		}
	            		}

	    usbserialPrint("\n\r");
 800d2da:	4814      	ldr	r0, [pc, #80]	; (800d32c <StartconsumerTask+0x128>)
 800d2dc:	f001 fa74 	bl	800e7c8 <usbserialPrint>
	    usbserialPrintf("Numero di elementi nella coda: %lu\n\r\n\r", osMessageQueueGetCount(myQueueHandle));
 800d2e0:	4b11      	ldr	r3, [pc, #68]	; (800d328 <StartconsumerTask+0x124>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fb fa05 	bl	80086f4 <osMessageQueueGetCount>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4810      	ldr	r0, [pc, #64]	; (800d330 <StartconsumerTask+0x12c>)
 800d2f0:	f001 fa90 	bl	800e814 <usbserialPrintf>
	    osDelay(100);
 800d2f4:	2064      	movs	r0, #100	; 0x64
 800d2f6:	f7fa ff90 	bl	800821a <osDelay>
	    osSemaphoreRelease(mySemHandle);
 800d2fa:	4b05      	ldr	r3, [pc, #20]	; (800d310 <StartconsumerTask+0x10c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fb f882 	bl	8008408 <osSemaphoreRelease>
	  }
		vTaskDelay(1000);
 800d304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d308:	f7fd f91c 	bl	800a544 <vTaskDelay>
	  if (osSemaphoreAcquire(mySemHandle, osWaitForever) == osOK) {
 800d30c:	e782      	b.n	800d214 <StartconsumerTask+0x10>
 800d30e:	bf00      	nop
 800d310:	20003f1c 	.word	0x20003f1c
 800d314:	0800f52c 	.word	0x0800f52c
 800d318:	0800f54c 	.word	0x0800f54c
 800d31c:	0800f564 	.word	0x0800f564
 800d320:	0800f568 	.word	0x0800f568
 800d324:	48000800 	.word	0x48000800
 800d328:	20003f18 	.word	0x20003f18
 800d32c:	0800f56c 	.word	0x0800f56c
 800d330:	0800f570 	.word	0x0800f570

0800d334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a04      	ldr	r2, [pc, #16]	; (800d354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d101      	bne.n	800d34a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d346:	f7f2 ffc3 	bl	80002d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	40014400 	.word	0x40014400

0800d358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d358:	b480      	push	{r7}
 800d35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d35c:	bf00      	nop
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
	...

0800d368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d36e:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d372:	4a14      	ldr	r2, [pc, #80]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d374:	f043 0301 	orr.w	r3, r3, #1
 800d378:	6613      	str	r3, [r2, #96]	; 0x60
 800d37a:	4b12      	ldr	r3, [pc, #72]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	607b      	str	r3, [r7, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d386:	4b0f      	ldr	r3, [pc, #60]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38a:	4a0e      	ldr	r2, [pc, #56]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d38c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d390:	6593      	str	r3, [r2, #88]	; 0x58
 800d392:	4b0c      	ldr	r3, [pc, #48]	; (800d3c4 <HAL_MspInit+0x5c>)
 800d394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d39a:	603b      	str	r3, [r7, #0]
 800d39c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d39e:	2200      	movs	r2, #0
 800d3a0:	210f      	movs	r1, #15
 800d3a2:	f06f 0001 	mvn.w	r0, #1
 800d3a6:	f7f4 fa51 	bl	800184c <HAL_NVIC_SetPriority>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	f7f2 ffd4 	bl	8000358 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	f7f2 ffe5 	bl	8000380 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800d3b6:	f7f2 fff7 	bl	80003a8 <HAL_SYSCFG_EnableVREFBUF>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	40021000 	.word	0x40021000

0800d3c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08c      	sub	sp, #48	; 0x30
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3d0:	f107 031c 	add.w	r3, r7, #28
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	605a      	str	r2, [r3, #4]
 800d3da:	609a      	str	r2, [r3, #8]
 800d3dc:	60da      	str	r2, [r3, #12]
 800d3de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a33      	ldr	r2, [pc, #204]	; (800d4b4 <HAL_ADC_MspInit+0xec>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d146      	bne.n	800d478 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800d3ea:	4b33      	ldr	r3, [pc, #204]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	4a31      	ldr	r2, [pc, #196]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d3f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800d3f4:	4b30      	ldr	r3, [pc, #192]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d10b      	bne.n	800d414 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800d3fc:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d400:	4a2e      	ldr	r2, [pc, #184]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d406:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d408:	4b2c      	ldr	r3, [pc, #176]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d40c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d414:	4b29      	ldr	r3, [pc, #164]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d418:	4a28      	ldr	r2, [pc, #160]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d41a:	f043 0304 	orr.w	r3, r3, #4
 800d41e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d420:	4b26      	ldr	r3, [pc, #152]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d42c:	4b23      	ldr	r3, [pc, #140]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d430:	4a22      	ldr	r2, [pc, #136]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d432:	f043 0301 	orr.w	r3, r3, #1
 800d436:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d438:	4b20      	ldr	r3, [pc, #128]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	613b      	str	r3, [r7, #16]
 800d442:	693b      	ldr	r3, [r7, #16]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|AIN3_Pin|AIN4_Pin;
 800d444:	230f      	movs	r3, #15
 800d446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d448:	230b      	movs	r3, #11
 800d44a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d44c:	2300      	movs	r3, #0
 800d44e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d450:	f107 031c 	add.w	r3, r7, #28
 800d454:	4619      	mov	r1, r3
 800d456:	481a      	ldr	r0, [pc, #104]	; (800d4c0 <HAL_ADC_MspInit+0xf8>)
 800d458:	f7f4 fb5e 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AIN5_Pin;
 800d45c:	2304      	movs	r3, #4
 800d45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d460:	230b      	movs	r3, #11
 800d462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d464:	2300      	movs	r3, #0
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AIN5_GPIO_Port, &GPIO_InitStruct);
 800d468:	f107 031c 	add.w	r3, r7, #28
 800d46c:	4619      	mov	r1, r3
 800d46e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d472:	f7f4 fb51 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800d476:	e019      	b.n	800d4ac <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a11      	ldr	r2, [pc, #68]	; (800d4c4 <HAL_ADC_MspInit+0xfc>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d114      	bne.n	800d4ac <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800d482:	4b0d      	ldr	r3, [pc, #52]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	4a0b      	ldr	r2, [pc, #44]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d48a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <HAL_ADC_MspInit+0xf0>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d10b      	bne.n	800d4ac <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 800d494:	4b09      	ldr	r3, [pc, #36]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d498:	4a08      	ldr	r2, [pc, #32]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d49a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d49e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4a0:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <HAL_ADC_MspInit+0xf4>)
 800d4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
}
 800d4ac:	bf00      	nop
 800d4ae:	3730      	adds	r7, #48	; 0x30
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	50040000 	.word	0x50040000
 800d4b8:	20003f20 	.word	0x20003f20
 800d4bc:	40021000 	.word	0x40021000
 800d4c0:	48000800 	.word	0x48000800
 800d4c4:	50040200 	.word	0x50040200

0800d4c8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4d0:	f107 030c 	add.w	r3, r7, #12
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	605a      	str	r2, [r3, #4]
 800d4da:	609a      	str	r2, [r3, #8]
 800d4dc:	60da      	str	r2, [r3, #12]
 800d4de:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a0f      	ldr	r2, [pc, #60]	; (800d524 <HAL_COMP_MspInit+0x5c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d117      	bne.n	800d51a <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <HAL_COMP_MspInit+0x60>)
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ee:	4a0e      	ldr	r2, [pc, #56]	; (800d528 <HAL_COMP_MspInit+0x60>)
 800d4f0:	f043 0304 	orr.w	r3, r3, #4
 800d4f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <HAL_COMP_MspInit+0x60>)
 800d4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	60bb      	str	r3, [r7, #8]
 800d500:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PC5     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_INM_Pin|COMP_INP_Pin;
 800d502:	2330      	movs	r3, #48	; 0x30
 800d504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d506:	2303      	movs	r3, #3
 800d508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d50a:	2300      	movs	r3, #0
 800d50c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d50e:	f107 030c 	add.w	r3, r7, #12
 800d512:	4619      	mov	r1, r3
 800d514:	4805      	ldr	r0, [pc, #20]	; (800d52c <HAL_COMP_MspInit+0x64>)
 800d516:	f7f4 faff 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800d51a:	bf00      	nop
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	40010200 	.word	0x40010200
 800d528:	40021000 	.word	0x40021000
 800d52c:	48000800 	.word	0x48000800

0800d530 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08a      	sub	sp, #40	; 0x28
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d538:	f107 0314 	add.w	r3, r7, #20
 800d53c:	2200      	movs	r2, #0
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	605a      	str	r2, [r3, #4]
 800d542:	609a      	str	r2, [r3, #8]
 800d544:	60da      	str	r2, [r3, #12]
 800d546:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a15      	ldr	r2, [pc, #84]	; (800d5a4 <HAL_DAC_MspInit+0x74>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d124      	bne.n	800d59c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d556:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d55c:	6593      	str	r3, [r2, #88]	; 0x58
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d566:	613b      	str	r3, [r7, #16]
 800d568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d56e:	4a0e      	ldr	r2, [pc, #56]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d570:	f043 0301 	orr.w	r3, r3, #1
 800d574:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d576:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <HAL_DAC_MspInit+0x78>)
 800d578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	60fb      	str	r3, [r7, #12]
 800d580:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC_OUT1_Pin|DAC_OUT2_Pin;
 800d582:	2330      	movs	r3, #48	; 0x30
 800d584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d586:	2303      	movs	r3, #3
 800d588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d58e:	f107 0314 	add.w	r3, r7, #20
 800d592:	4619      	mov	r1, r3
 800d594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d598:	f7f4 fabe 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800d59c:	bf00      	nop
 800d59e:	3728      	adds	r7, #40	; 0x28
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	40007400 	.word	0x40007400
 800d5a8:	40021000 	.word	0x40021000

0800d5ac <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b0ae      	sub	sp, #184	; 0xb8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	605a      	str	r2, [r3, #4]
 800d5be:	609a      	str	r2, [r3, #8]
 800d5c0:	60da      	str	r2, [r3, #12]
 800d5c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d5c4:	f107 0318 	add.w	r3, r7, #24
 800d5c8:	228c      	movs	r2, #140	; 0x8c
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f001 f9db 	bl	800e988 <memset>
  if(hlcd->Instance==LCD)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a46      	ldr	r2, [pc, #280]	; (800d6f0 <HAL_LCD_MspInit+0x144>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	f040 8084 	bne.w	800d6e6 <HAL_LCD_MspInit+0x13a>
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d5de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d5e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d5ec:	f107 0318 	add.w	r3, r7, #24
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7f6 fd73 	bl	80040dc <HAL_RCCEx_PeriphCLKConfig>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 800d5fc:	f7ff feac 	bl	800d358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800d600:	4b3c      	ldr	r3, [pc, #240]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d604:	4a3b      	ldr	r2, [pc, #236]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d60a:	6593      	str	r3, [r2, #88]	; 0x58
 800d60c:	4b39      	ldr	r3, [pc, #228]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d614:	617b      	str	r3, [r7, #20]
 800d616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d618:	4b36      	ldr	r3, [pc, #216]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d61c:	4a35      	ldr	r2, [pc, #212]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d61e:	f043 0302 	orr.w	r3, r3, #2
 800d622:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d624:	4b33      	ldr	r3, [pc, #204]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d628:	f003 0302 	and.w	r3, r3, #2
 800d62c:	613b      	str	r3, [r7, #16]
 800d62e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d630:	4b30      	ldr	r3, [pc, #192]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d634:	4a2f      	ldr	r2, [pc, #188]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d636:	f043 0304 	orr.w	r3, r3, #4
 800d63a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d63c:	4b2d      	ldr	r3, [pc, #180]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d640:	f003 0304 	and.w	r3, r3, #4
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d648:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d64c:	4a29      	ldr	r2, [pc, #164]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d64e:	f043 0301 	orr.w	r3, r3, #1
 800d652:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d654:	4b27      	ldr	r3, [pc, #156]	; (800d6f4 <HAL_LCD_MspInit+0x148>)
 800d656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d658:	f003 0301 	and.w	r3, r3, #1
 800d65c:	60bb      	str	r3, [r7, #8]
 800d65e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    PA10     ------> LCD_COM2
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800d660:	f24f 2304 	movw	r3, #61956	; 0xf204
 800d664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_15|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d668:	2302      	movs	r3, #2
 800d66a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d674:	2300      	movs	r3, #0
 800d676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800d67a:	230b      	movs	r3, #11
 800d67c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d684:	4619      	mov	r1, r3
 800d686:	481c      	ldr	r0, [pc, #112]	; (800d6f8 <HAL_LCD_MspInit+0x14c>)
 800d688:	f7f4 fa46 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800d68c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d694:	2302      	movs	r3, #2
 800d696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800d6a6:	230b      	movs	r3, #11
 800d6a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4812      	ldr	r0, [pc, #72]	; (800d6fc <HAL_LCD_MspInit+0x150>)
 800d6b4:	f7f4 fa30 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800d6b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800d6bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800d6d2:	230b      	movs	r3, #11
 800d6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6e2:	f7f4 fa19 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 800d6e6:	bf00      	nop
 800d6e8:	37b8      	adds	r7, #184	; 0xb8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	40002400 	.word	0x40002400
 800d6f4:	40021000 	.word	0x40021000
 800d6f8:	48000400 	.word	0x48000400
 800d6fc:	48000800 	.word	0x48000800

0800d700 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08c      	sub	sp, #48	; 0x30
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d708:	f107 031c 	add.w	r3, r7, #28
 800d70c:	2200      	movs	r2, #0
 800d70e:	601a      	str	r2, [r3, #0]
 800d710:	605a      	str	r2, [r3, #4]
 800d712:	609a      	str	r2, [r3, #8]
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a49      	ldr	r2, [pc, #292]	; (800d844 <HAL_OPAMP_MspInit+0x144>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d137      	bne.n	800d792 <HAL_OPAMP_MspInit+0x92>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800d722:	4b49      	ldr	r3, [pc, #292]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3301      	adds	r3, #1
 800d728:	4a47      	ldr	r2, [pc, #284]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d72a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 800d72c:	4b46      	ldr	r3, [pc, #280]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d10b      	bne.n	800d74c <HAL_OPAMP_MspInit+0x4c>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800d734:	4b45      	ldr	r3, [pc, #276]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d738:	4a44      	ldr	r2, [pc, #272]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d73a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d73e:	6593      	str	r3, [r2, #88]	; 0x58
 800d740:	4b42      	ldr	r3, [pc, #264]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d748:	61bb      	str	r3, [r7, #24]
 800d74a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d74c:	4b3f      	ldr	r3, [pc, #252]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d750:	4a3e      	ldr	r2, [pc, #248]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d752:	f043 0301 	orr.w	r3, r3, #1
 800d756:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d758:	4b3c      	ldr	r3, [pc, #240]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	617b      	str	r3, [r7, #20]
 800d762:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = OA1_INP_Pin|OA1_OUT_Pin;
 800d764:	2309      	movs	r3, #9
 800d766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d768:	2303      	movs	r3, #3
 800d76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d770:	f107 031c 	add.w	r3, r7, #28
 800d774:	4619      	mov	r1, r3
 800d776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d77a:	f7f4 f9cd 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OA1_INM_Pin;
 800d77e:	2302      	movs	r3, #2
 800d780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OA1_INM_GPIO_Port, &GPIO_InitStruct);
 800d782:	f107 031c 	add.w	r3, r7, #28
 800d786:	4619      	mov	r1, r3
 800d788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d78c:	f7f4 f9c4 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 800d790:	e053      	b.n	800d83a <HAL_OPAMP_MspInit+0x13a>
  else if(hopamp->Instance==OPAMP2)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a2e      	ldr	r2, [pc, #184]	; (800d850 <HAL_OPAMP_MspInit+0x150>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d14e      	bne.n	800d83a <HAL_OPAMP_MspInit+0x13a>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800d79c:	4b2a      	ldr	r3, [pc, #168]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	4a29      	ldr	r2, [pc, #164]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d7a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 800d7a6:	4b28      	ldr	r3, [pc, #160]	; (800d848 <HAL_OPAMP_MspInit+0x148>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d10b      	bne.n	800d7c6 <HAL_OPAMP_MspInit+0xc6>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800d7ae:	4b27      	ldr	r3, [pc, #156]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b2:	4a26      	ldr	r2, [pc, #152]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7b8:	6593      	str	r3, [r2, #88]	; 0x58
 800d7ba:	4b24      	ldr	r3, [pc, #144]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d7c2:	613b      	str	r3, [r7, #16]
 800d7c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7c6:	4b21      	ldr	r3, [pc, #132]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ca:	4a20      	ldr	r2, [pc, #128]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7cc:	f043 0301 	orr.w	r3, r3, #1
 800d7d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7d2:	4b1e      	ldr	r3, [pc, #120]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7de:	4b1b      	ldr	r3, [pc, #108]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7e2:	4a1a      	ldr	r2, [pc, #104]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7e4:	f043 0302 	orr.w	r3, r3, #2
 800d7e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7ea:	4b18      	ldr	r3, [pc, #96]	; (800d84c <HAL_OPAMP_MspInit+0x14c>)
 800d7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	60bb      	str	r3, [r7, #8]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OA1_INPA6_Pin;
 800d7f6:	2340      	movs	r3, #64	; 0x40
 800d7f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OA1_INPA6_GPIO_Port, &GPIO_InitStruct);
 800d802:	f107 031c 	add.w	r3, r7, #28
 800d806:	4619      	mov	r1, r3
 800d808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d80c:	f7f4 f984 	bl	8001b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OA2_INM_Pin;
 800d810:	2380      	movs	r3, #128	; 0x80
 800d812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OA2_INM_GPIO_Port, &GPIO_InitStruct);
 800d814:	f107 031c 	add.w	r3, r7, #28
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d81e:	f7f4 f97b 	bl	8001b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OA2_COMP_OUT_Pin;
 800d822:	2301      	movs	r3, #1
 800d824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d826:	2303      	movs	r3, #3
 800d828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OA2_COMP_OUT_GPIO_Port, &GPIO_InitStruct);
 800d82e:	f107 031c 	add.w	r3, r7, #28
 800d832:	4619      	mov	r1, r3
 800d834:	4807      	ldr	r0, [pc, #28]	; (800d854 <HAL_OPAMP_MspInit+0x154>)
 800d836:	f7f4 f96f 	bl	8001b18 <HAL_GPIO_Init>
}
 800d83a:	bf00      	nop
 800d83c:	3730      	adds	r7, #48	; 0x30
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	40007800 	.word	0x40007800
 800d848:	20003f24 	.word	0x20003f24
 800d84c:	40021000 	.word	0x40021000
 800d850:	40007810 	.word	0x40007810
 800d854:	48000400 	.word	0x48000400

0800d858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800d868:	2200      	movs	r2, #0
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	2019      	movs	r0, #25
 800d86e:	f7f3 ffed 	bl	800184c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800d872:	2019      	movs	r0, #25
 800d874:	f7f4 f806 	bl	8001884 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800d878:	4b1e      	ldr	r3, [pc, #120]	; (800d8f4 <HAL_InitTick+0x9c>)
 800d87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d87c:	4a1d      	ldr	r2, [pc, #116]	; (800d8f4 <HAL_InitTick+0x9c>)
 800d87e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d882:	6613      	str	r3, [r2, #96]	; 0x60
 800d884:	4b1b      	ldr	r3, [pc, #108]	; (800d8f4 <HAL_InitTick+0x9c>)
 800d886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d890:	f107 0210 	add.w	r2, r7, #16
 800d894:	f107 0314 	add.w	r3, r7, #20
 800d898:	4611      	mov	r1, r2
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f6 fb8c 	bl	8003fb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800d8a0:	f7f6 fb74 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 800d8a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	4a13      	ldr	r2, [pc, #76]	; (800d8f8 <HAL_InitTick+0xa0>)
 800d8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ae:	0c9b      	lsrs	r3, r3, #18
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800d8b4:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8b6:	4a12      	ldr	r2, [pc, #72]	; (800d900 <HAL_InitTick+0xa8>)
 800d8b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800d8ba:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d8c0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800d8c2:	4a0e      	ldr	r2, [pc, #56]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d8ce:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800d8d4:	4809      	ldr	r0, [pc, #36]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8d6:	f7f7 f8cb 	bl	8004a70 <HAL_TIM_Base_Init>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800d8e0:	4806      	ldr	r0, [pc, #24]	; (800d8fc <HAL_InitTick+0xa4>)
 800d8e2:	f7f7 f927 	bl	8004b34 <HAL_TIM_Base_Start_IT>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	e000      	b.n	800d8ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3730      	adds	r7, #48	; 0x30
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	40021000 	.word	0x40021000
 800d8f8:	431bde83 	.word	0x431bde83
 800d8fc:	20003f28 	.word	0x20003f28
 800d900:	40014400 	.word	0x40014400

0800d904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d908:	bf00      	nop
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d912:	b480      	push	{r7}
 800d914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d916:	e7fe      	b.n	800d916 <HardFault_Handler+0x4>

0800d918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d91c:	e7fe      	b.n	800d91c <MemManage_Handler+0x4>

0800d91e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d91e:	b480      	push	{r7}
 800d920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d922:	e7fe      	b.n	800d922 <BusFault_Handler+0x4>

0800d924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d928:	e7fe      	b.n	800d928 <UsageFault_Handler+0x4>

0800d92a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d92a:	b480      	push	{r7}
 800d92c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d92e:	bf00      	nop
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW0_Pin);
 800d93c:	2008      	movs	r0, #8
 800d93e:	f7f4 fa95 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800d942:	bf00      	nop
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800d94c:	4802      	ldr	r0, [pc, #8]	; (800d958 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800d94e:	f7f7 f961 	bl	8004c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800d952:	bf00      	nop
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20003f28 	.word	0x20003f28

0800d95c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW7_Pin);
 800d960:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d964:	f7f4 fa82 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d968:	bf00      	nop
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d970:	4802      	ldr	r0, [pc, #8]	; (800d97c <OTG_FS_IRQHandler+0x10>)
 800d972:	f7f4 fdaa 	bl	80024ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d976:	bf00      	nop
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	20005248 	.word	0x20005248

0800d980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d988:	4a14      	ldr	r2, [pc, #80]	; (800d9dc <_sbrk+0x5c>)
 800d98a:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <_sbrk+0x60>)
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d994:	4b13      	ldr	r3, [pc, #76]	; (800d9e4 <_sbrk+0x64>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d99c:	4b11      	ldr	r3, [pc, #68]	; (800d9e4 <_sbrk+0x64>)
 800d99e:	4a12      	ldr	r2, [pc, #72]	; (800d9e8 <_sbrk+0x68>)
 800d9a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d9a2:	4b10      	ldr	r3, [pc, #64]	; (800d9e4 <_sbrk+0x64>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d207      	bcs.n	800d9c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d9b0:	f000 ffb0 	bl	800e914 <__errno>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	220c      	movs	r2, #12
 800d9b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	e009      	b.n	800d9d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d9c0:	4b08      	ldr	r3, [pc, #32]	; (800d9e4 <_sbrk+0x64>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d9c6:	4b07      	ldr	r3, [pc, #28]	; (800d9e4 <_sbrk+0x64>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <_sbrk+0x64>)
 800d9d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	20050000 	.word	0x20050000
 800d9e0:	00000400 	.word	0x00000400
 800d9e4:	20003f74 	.word	0x20003f74
 800d9e8:	20006ae0 	.word	0x20006ae0

0800d9ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d9f0:	4b17      	ldr	r3, [pc, #92]	; (800da50 <SystemInit+0x64>)
 800d9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9f6:	4a16      	ldr	r2, [pc, #88]	; (800da50 <SystemInit+0x64>)
 800d9f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800da00:	4b14      	ldr	r3, [pc, #80]	; (800da54 <SystemInit+0x68>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a13      	ldr	r2, [pc, #76]	; (800da54 <SystemInit+0x68>)
 800da06:	f043 0301 	orr.w	r3, r3, #1
 800da0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800da0c:	4b11      	ldr	r3, [pc, #68]	; (800da54 <SystemInit+0x68>)
 800da0e:	2200      	movs	r2, #0
 800da10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800da12:	4b10      	ldr	r3, [pc, #64]	; (800da54 <SystemInit+0x68>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a0f      	ldr	r2, [pc, #60]	; (800da54 <SystemInit+0x68>)
 800da18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800da1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800da20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800da22:	4b0c      	ldr	r3, [pc, #48]	; (800da54 <SystemInit+0x68>)
 800da24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800da28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800da2a:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <SystemInit+0x68>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a09      	ldr	r2, [pc, #36]	; (800da54 <SystemInit+0x68>)
 800da30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800da36:	4b07      	ldr	r3, [pc, #28]	; (800da54 <SystemInit+0x68>)
 800da38:	2200      	movs	r2, #0
 800da3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800da3c:	4b04      	ldr	r3, [pc, #16]	; (800da50 <SystemInit+0x64>)
 800da3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800da42:	609a      	str	r2, [r3, #8]
#endif
}
 800da44:	bf00      	nop
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	e000ed00 	.word	0xe000ed00
 800da54:	40021000 	.word	0x40021000

0800da58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da5c:	2200      	movs	r2, #0
 800da5e:	4912      	ldr	r1, [pc, #72]	; (800daa8 <MX_USB_DEVICE_Init+0x50>)
 800da60:	4812      	ldr	r0, [pc, #72]	; (800daac <MX_USB_DEVICE_Init+0x54>)
 800da62:	f7f9 f881 	bl	8006b68 <USBD_Init>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d001      	beq.n	800da70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da6c:	f7ff fc74 	bl	800d358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da70:	490f      	ldr	r1, [pc, #60]	; (800dab0 <MX_USB_DEVICE_Init+0x58>)
 800da72:	480e      	ldr	r0, [pc, #56]	; (800daac <MX_USB_DEVICE_Init+0x54>)
 800da74:	f7f9 f8a8 	bl	8006bc8 <USBD_RegisterClass>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da7e:	f7ff fc6b 	bl	800d358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da82:	490c      	ldr	r1, [pc, #48]	; (800dab4 <MX_USB_DEVICE_Init+0x5c>)
 800da84:	4809      	ldr	r0, [pc, #36]	; (800daac <MX_USB_DEVICE_Init+0x54>)
 800da86:	f7f8 ffc9 	bl	8006a1c <USBD_CDC_RegisterInterface>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da90:	f7ff fc62 	bl	800d358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da94:	4805      	ldr	r0, [pc, #20]	; (800daac <MX_USB_DEVICE_Init+0x54>)
 800da96:	f7f9 f8be 	bl	8006c16 <USBD_Start>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800daa0:	f7ff fc5a 	bl	800d358 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800daa4:	bf00      	nop
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	2000013c 	.word	0x2000013c
 800daac:	20003f78 	.word	0x20003f78
 800dab0:	20000014 	.word	0x20000014
 800dab4:	20000128 	.word	0x20000128

0800dab8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dabc:	2200      	movs	r2, #0
 800dabe:	4905      	ldr	r1, [pc, #20]	; (800dad4 <CDC_Init_FS+0x1c>)
 800dac0:	4805      	ldr	r0, [pc, #20]	; (800dad8 <CDC_Init_FS+0x20>)
 800dac2:	f7f8 ffc0 	bl	8006a46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dac6:	4905      	ldr	r1, [pc, #20]	; (800dadc <CDC_Init_FS+0x24>)
 800dac8:	4803      	ldr	r0, [pc, #12]	; (800dad8 <CDC_Init_FS+0x20>)
 800daca:	f7f8 ffda 	bl	8006a82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dace:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20004a48 	.word	0x20004a48
 800dad8:	20003f78 	.word	0x20003f78
 800dadc:	20004248 	.word	0x20004248

0800dae0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dae0:	b480      	push	{r7}
 800dae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dae4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	6039      	str	r1, [r7, #0]
 800dafa:	71fb      	strb	r3, [r7, #7]
 800dafc:	4613      	mov	r3, r2
 800dafe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db00:	79fb      	ldrb	r3, [r7, #7]
 800db02:	2b23      	cmp	r3, #35	; 0x23
 800db04:	d85c      	bhi.n	800dbc0 <CDC_Control_FS+0xd0>
 800db06:	a201      	add	r2, pc, #4	; (adr r2, 800db0c <CDC_Control_FS+0x1c>)
 800db08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0c:	0800dbc1 	.word	0x0800dbc1
 800db10:	0800dbc1 	.word	0x0800dbc1
 800db14:	0800dbc1 	.word	0x0800dbc1
 800db18:	0800dbc1 	.word	0x0800dbc1
 800db1c:	0800dbc1 	.word	0x0800dbc1
 800db20:	0800dbc1 	.word	0x0800dbc1
 800db24:	0800dbc1 	.word	0x0800dbc1
 800db28:	0800dbc1 	.word	0x0800dbc1
 800db2c:	0800dbc1 	.word	0x0800dbc1
 800db30:	0800dbc1 	.word	0x0800dbc1
 800db34:	0800dbc1 	.word	0x0800dbc1
 800db38:	0800dbc1 	.word	0x0800dbc1
 800db3c:	0800dbc1 	.word	0x0800dbc1
 800db40:	0800dbc1 	.word	0x0800dbc1
 800db44:	0800dbc1 	.word	0x0800dbc1
 800db48:	0800dbc1 	.word	0x0800dbc1
 800db4c:	0800dbc1 	.word	0x0800dbc1
 800db50:	0800dbc1 	.word	0x0800dbc1
 800db54:	0800dbc1 	.word	0x0800dbc1
 800db58:	0800dbc1 	.word	0x0800dbc1
 800db5c:	0800dbc1 	.word	0x0800dbc1
 800db60:	0800dbc1 	.word	0x0800dbc1
 800db64:	0800dbc1 	.word	0x0800dbc1
 800db68:	0800dbc1 	.word	0x0800dbc1
 800db6c:	0800dbc1 	.word	0x0800dbc1
 800db70:	0800dbc1 	.word	0x0800dbc1
 800db74:	0800dbc1 	.word	0x0800dbc1
 800db78:	0800dbc1 	.word	0x0800dbc1
 800db7c:	0800dbc1 	.word	0x0800dbc1
 800db80:	0800dbc1 	.word	0x0800dbc1
 800db84:	0800dbc1 	.word	0x0800dbc1
 800db88:	0800dbc1 	.word	0x0800dbc1
 800db8c:	0800db9d 	.word	0x0800db9d
 800db90:	0800dbaf 	.word	0x0800dbaf
 800db94:	0800dbc1 	.word	0x0800dbc1
 800db98:	0800dbc1 	.word	0x0800dbc1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof( lineCoding ) );
 800db9c:	4b0c      	ldr	r3, [pc, #48]	; (800dbd0 <CDC_Control_FS+0xe0>)
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	6810      	ldr	r0, [r2, #0]
 800dba2:	6018      	str	r0, [r3, #0]
 800dba4:	8891      	ldrh	r1, [r2, #4]
 800dba6:	7992      	ldrb	r2, [r2, #6]
 800dba8:	8099      	strh	r1, [r3, #4]
 800dbaa:	719a      	strb	r2, [r3, #6]
    break;
 800dbac:	e009      	b.n	800dbc2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof( lineCoding ) );
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	4a07      	ldr	r2, [pc, #28]	; (800dbd0 <CDC_Control_FS+0xe0>)
 800dbb2:	6810      	ldr	r0, [r2, #0]
 800dbb4:	6018      	str	r0, [r3, #0]
 800dbb6:	8891      	ldrh	r1, [r2, #4]
 800dbb8:	7992      	ldrb	r2, [r2, #6]
 800dbba:	8099      	strh	r1, [r3, #4]
 800dbbc:	719a      	strb	r2, [r3, #6]
    break;
 800dbbe:	e000      	b.n	800dbc2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dbc0:	bf00      	nop
  }

  return (USBD_OK);
 800dbc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	20000120 	.word	0x20000120

0800dbd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	int status = usbserialQueue( &hUsbDeviceFS, Buf, *Len );
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	4809      	ldr	r0, [pc, #36]	; (800dc0c <CDC_Receive_FS+0x38>)
 800dbe8:	f000 fd70 	bl	800e6cc <usbserialQueue>
 800dbec:	60f8      	str	r0, [r7, #12]
	USBD_CDC_SetRxBuffer( &hUsbDeviceFS, &Buf[0] );
 800dbee:	6879      	ldr	r1, [r7, #4]
 800dbf0:	4806      	ldr	r0, [pc, #24]	; (800dc0c <CDC_Receive_FS+0x38>)
 800dbf2:	f7f8 ff46 	bl	8006a82 <USBD_CDC_SetRxBuffer>
	if( status == 0 ) { // If queuing is ok, then schedule next reception
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <CDC_Receive_FS+0x2e>
		USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 800dbfc:	4803      	ldr	r0, [pc, #12]	; (800dc0c <CDC_Receive_FS+0x38>)
 800dbfe:	f7f8 ff89 	bl	8006b14 <USBD_CDC_ReceivePacket>
	}
	return (USBD_OK);
 800dc02:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20003f78 	.word	0x20003f78

0800dc10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc20:	4b0d      	ldr	r3, [pc, #52]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e00b      	b.n	800dc4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	4806      	ldr	r0, [pc, #24]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc3e:	f7f8 ff02 	bl	8006a46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc42:	4805      	ldr	r0, [pc, #20]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc44:	f7f8 ff36 	bl	8006ab4 <USBD_CDC_TransmitPacket>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20003f78 	.word	0x20003f78

0800dc5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	4613      	mov	r3, r2
 800dc68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  usbserialTxWakeup();
 800dc6e:	f000 fded 	bl	800e84c <usbserialTxWakeup>
  /* USER CODE END 13 */
  return result;
 800dc72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3718      	adds	r7, #24
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
	...

0800dc80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b0ae      	sub	sp, #184	; 0xb8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	601a      	str	r2, [r3, #0]
 800dc90:	605a      	str	r2, [r3, #4]
 800dc92:	609a      	str	r2, [r3, #8]
 800dc94:	60da      	str	r2, [r3, #12]
 800dc96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dc98:	f107 0318 	add.w	r3, r7, #24
 800dc9c:	228c      	movs	r2, #140	; 0x8c
 800dc9e:	2100      	movs	r1, #0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fe71 	bl	800e988 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcae:	d163      	bne.n	800dd78 <HAL_PCD_MspInit+0xf8>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dcb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dcbc:	f107 0318 	add.w	r3, r7, #24
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7f6 fa0b 	bl	80040dc <HAL_RCCEx_PeriphCLKConfig>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dccc:	f7ff fb44 	bl	800d358 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcd0:	4b2b      	ldr	r3, [pc, #172]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dcd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcd4:	4a2a      	ldr	r2, [pc, #168]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dcd6:	f043 0301 	orr.w	r3, r3, #1
 800dcda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcdc:	4b28      	ldr	r3, [pc, #160]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dcde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DN_Pin|USB_DP_Pin;
 800dce8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dcec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd02:	230a      	movs	r3, #10
 800dd04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dd12:	f7f3 ff01 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd16:	4b1a      	ldr	r3, [pc, #104]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd1a:	4a19      	ldr	r2, [pc, #100]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dd20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd22:	4b17      	ldr	r3, [pc, #92]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd2e:	4b14      	ldr	r3, [pc, #80]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d114      	bne.n	800dd64 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd3e:	4a10      	ldr	r2, [pc, #64]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd44:	6593      	str	r3, [r2, #88]	; 0x58
 800dd46:	4b0e      	ldr	r3, [pc, #56]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd4e:	60fb      	str	r3, [r7, #12]
 800dd50:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800dd52:	f7f5 fb6b 	bl	800342c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dd56:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd5a:	4a09      	ldr	r2, [pc, #36]	; (800dd80 <HAL_PCD_MspInit+0x100>)
 800dd5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd60:	6593      	str	r3, [r2, #88]	; 0x58
 800dd62:	e001      	b.n	800dd68 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800dd64:	f7f5 fb62 	bl	800342c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2105      	movs	r1, #5
 800dd6c:	2043      	movs	r0, #67	; 0x43
 800dd6e:	f7f3 fd6d 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd72:	2043      	movs	r0, #67	; 0x43
 800dd74:	f7f3 fd86 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd78:	bf00      	nop
 800dd7a:	37b8      	adds	r7, #184	; 0xb8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	40021000 	.word	0x40021000

0800dd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4610      	mov	r0, r2
 800dd9c:	f7f8 ff86 	bl	8006cac <USBD_LL_SetupStage>
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ddba:	78fa      	ldrb	r2, [r7, #3]
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	1a9b      	subs	r3, r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f7f8 ffc0 	bl	8006d56 <USBD_LL_DataOutStage>
}
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ddf0:	78fa      	ldrb	r2, [r7, #3]
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	3348      	adds	r3, #72	; 0x48
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	78fb      	ldrb	r3, [r7, #3]
 800de04:	4619      	mov	r1, r3
 800de06:	f7f9 f809 	bl	8006e1c <USBD_LL_DataInStage>
}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de20:	4618      	mov	r0, r3
 800de22:	f7f9 f91d 	bl	8007060 <USBD_LL_SOF>
}
 800de26:	bf00      	nop
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de36:	2301      	movs	r3, #1
 800de38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d001      	beq.n	800de46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de42:	f7ff fa89 	bl	800d358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de4c:	7bfa      	ldrb	r2, [r7, #15]
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f7f9 f8c7 	bl	8006fe4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f9 f873 	bl	8006f48 <USBD_LL_Reset>
}
 800de62:	bf00      	nop
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	6812      	ldr	r2, [r2, #0]
 800de82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de86:	f043 0301 	orr.w	r3, r3, #1
 800de8a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de92:	4618      	mov	r0, r3
 800de94:	f7f9 f8b6 	bl	8007004 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d005      	beq.n	800deac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dea0:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <HAL_PCD_SuspendCallback+0x48>)
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <HAL_PCD_SuspendCallback+0x48>)
 800dea6:	f043 0306 	orr.w	r3, r3, #6
 800deaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	e000ed00 	.word	0xe000ed00

0800deb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	6812      	ldr	r2, [r2, #0]
 800dece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ded2:	f023 0301 	bic.w	r3, r3, #1
 800ded6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d007      	beq.n	800def0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dee0:	4b08      	ldr	r3, [pc, #32]	; (800df04 <HAL_PCD_ResumeCallback+0x4c>)
 800dee2:	691b      	ldr	r3, [r3, #16]
 800dee4:	4a07      	ldr	r2, [pc, #28]	; (800df04 <HAL_PCD_ResumeCallback+0x4c>)
 800dee6:	f023 0306 	bic.w	r3, r3, #6
 800deea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800deec:	f000 faa8 	bl	800e440 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800def6:	4618      	mov	r0, r3
 800def8:	f7f9 f89a 	bl	8007030 <USBD_LL_Resume>
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	e000ed00 	.word	0xe000ed00

0800df08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df1a:	78fa      	ldrb	r2, [r7, #3]
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f9 f8e6 	bl	80070f0 <USBD_LL_IsoOUTIncomplete>
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	460b      	mov	r3, r1
 800df36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df3e:	78fa      	ldrb	r2, [r7, #3]
 800df40:	4611      	mov	r1, r2
 800df42:	4618      	mov	r0, r3
 800df44:	f7f9 f8ae 	bl	80070a4 <USBD_LL_IsoINIncomplete>
}
 800df48:	bf00      	nop
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df5e:	4618      	mov	r0, r3
 800df60:	f7f9 f8ec 	bl	800713c <USBD_LL_DevConnected>
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f9 f8e9 	bl	8007152 <USBD_LL_DevDisconnected>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d13c      	bne.n	800e012 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800df98:	4a20      	ldr	r2, [pc, #128]	; (800e01c <USBD_LL_Init+0x94>)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a1e      	ldr	r2, [pc, #120]	; (800e01c <USBD_LL_Init+0x94>)
 800dfa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dfa8:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <USBD_LL_Init+0x94>)
 800dfaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dfae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dfb0:	4b1a      	ldr	r3, [pc, #104]	; (800e01c <USBD_LL_Init+0x94>)
 800dfb2:	2206      	movs	r2, #6
 800dfb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dfb6:	4b19      	ldr	r3, [pc, #100]	; (800e01c <USBD_LL_Init+0x94>)
 800dfb8:	2202      	movs	r2, #2
 800dfba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dfbc:	4b17      	ldr	r3, [pc, #92]	; (800e01c <USBD_LL_Init+0x94>)
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <USBD_LL_Init+0x94>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dfc8:	4b14      	ldr	r3, [pc, #80]	; (800e01c <USBD_LL_Init+0x94>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dfce:	4b13      	ldr	r3, [pc, #76]	; (800e01c <USBD_LL_Init+0x94>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800dfd4:	4b11      	ldr	r3, [pc, #68]	; (800e01c <USBD_LL_Init+0x94>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dfda:	4b10      	ldr	r3, [pc, #64]	; (800e01c <USBD_LL_Init+0x94>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dfe0:	4b0e      	ldr	r3, [pc, #56]	; (800e01c <USBD_LL_Init+0x94>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dfe6:	480d      	ldr	r0, [pc, #52]	; (800e01c <USBD_LL_Init+0x94>)
 800dfe8:	f7f4 f91c 	bl	8002224 <HAL_PCD_Init>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dff2:	f7ff f9b1 	bl	800d358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dff6:	2180      	movs	r1, #128	; 0x80
 800dff8:	4808      	ldr	r0, [pc, #32]	; (800e01c <USBD_LL_Init+0x94>)
 800dffa:	f7f5 f972 	bl	80032e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dffe:	2240      	movs	r2, #64	; 0x40
 800e000:	2100      	movs	r1, #0
 800e002:	4806      	ldr	r0, [pc, #24]	; (800e01c <USBD_LL_Init+0x94>)
 800e004:	f7f5 f926 	bl	8003254 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e008:	2280      	movs	r2, #128	; 0x80
 800e00a:	2101      	movs	r1, #1
 800e00c:	4803      	ldr	r0, [pc, #12]	; (800e01c <USBD_LL_Init+0x94>)
 800e00e:	f7f5 f921 	bl	8003254 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20005248 	.word	0x20005248

0800e020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e036:	4618      	mov	r0, r3
 800e038:	f7f4 fa18 	bl	800246c <HAL_PCD_Start>
 800e03c:	4603      	mov	r3, r0
 800e03e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e040:	7bbb      	ldrb	r3, [r7, #14]
 800e042:	2b03      	cmp	r3, #3
 800e044:	d816      	bhi.n	800e074 <USBD_LL_Start+0x54>
 800e046:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <USBD_LL_Start+0x2c>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e05d 	.word	0x0800e05d
 800e050:	0800e063 	.word	0x0800e063
 800e054:	0800e069 	.word	0x0800e069
 800e058:	0800e06f 	.word	0x0800e06f
    case HAL_OK :
      usb_status = USBD_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73fb      	strb	r3, [r7, #15]
    break;
 800e060:	e00b      	b.n	800e07a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e062:	2303      	movs	r3, #3
 800e064:	73fb      	strb	r3, [r7, #15]
    break;
 800e066:	e008      	b.n	800e07a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e068:	2301      	movs	r3, #1
 800e06a:	73fb      	strb	r3, [r7, #15]
    break;
 800e06c:	e005      	b.n	800e07a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e06e:	2303      	movs	r3, #3
 800e070:	73fb      	strb	r3, [r7, #15]
    break;
 800e072:	e002      	b.n	800e07a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e074:	2303      	movs	r3, #3
 800e076:	73fb      	strb	r3, [r7, #15]
    break;
 800e078:	bf00      	nop
  }
  return usb_status;
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	4608      	mov	r0, r1
 800e08e:	4611      	mov	r1, r2
 800e090:	461a      	mov	r2, r3
 800e092:	4603      	mov	r3, r0
 800e094:	70fb      	strb	r3, [r7, #3]
 800e096:	460b      	mov	r3, r1
 800e098:	70bb      	strb	r3, [r7, #2]
 800e09a:	4613      	mov	r3, r2
 800e09c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e0ac:	78bb      	ldrb	r3, [r7, #2]
 800e0ae:	883a      	ldrh	r2, [r7, #0]
 800e0b0:	78f9      	ldrb	r1, [r7, #3]
 800e0b2:	f7f4 fdc8 	bl	8002c46 <HAL_PCD_EP_Open>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e0ba:	7bbb      	ldrb	r3, [r7, #14]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d817      	bhi.n	800e0f0 <USBD_LL_OpenEP+0x6c>
 800e0c0:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <USBD_LL_OpenEP+0x44>)
 800e0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c6:	bf00      	nop
 800e0c8:	0800e0d9 	.word	0x0800e0d9
 800e0cc:	0800e0df 	.word	0x0800e0df
 800e0d0:	0800e0e5 	.word	0x0800e0e5
 800e0d4:	0800e0eb 	.word	0x0800e0eb
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	73fb      	strb	r3, [r7, #15]
    break;
 800e0dc:	e00b      	b.n	800e0f6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e2:	e008      	b.n	800e0f6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e8:	e005      	b.n	800e0f6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ee:	e002      	b.n	800e0f6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f4:	bf00      	nop
  }
  return usb_status;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e11a:	78fa      	ldrb	r2, [r7, #3]
 800e11c:	4611      	mov	r1, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f4 fdf9 	bl	8002d16 <HAL_PCD_EP_Close>
 800e124:	4603      	mov	r3, r0
 800e126:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d816      	bhi.n	800e15c <USBD_LL_CloseEP+0x5c>
 800e12e:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <USBD_LL_CloseEP+0x34>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e145 	.word	0x0800e145
 800e138:	0800e14b 	.word	0x0800e14b
 800e13c:	0800e151 	.word	0x0800e151
 800e140:	0800e157 	.word	0x0800e157
    case HAL_OK :
      usb_status = USBD_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
    break;
 800e148:	e00b      	b.n	800e162 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e14a:	2303      	movs	r3, #3
 800e14c:	73fb      	strb	r3, [r7, #15]
    break;
 800e14e:	e008      	b.n	800e162 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e150:	2301      	movs	r3, #1
 800e152:	73fb      	strb	r3, [r7, #15]
    break;
 800e154:	e005      	b.n	800e162 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e156:	2303      	movs	r3, #3
 800e158:	73fb      	strb	r3, [r7, #15]
    break;
 800e15a:	e002      	b.n	800e162 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	73fb      	strb	r3, [r7, #15]
    break;
 800e160:	bf00      	nop
  }
  return usb_status;
 800e162:	7bfb      	ldrb	r3, [r7, #15]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e186:	78fa      	ldrb	r2, [r7, #3]
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7f4 fea0 	bl	8002ed0 <HAL_PCD_EP_SetStall>
 800e190:	4603      	mov	r3, r0
 800e192:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e194:	7bbb      	ldrb	r3, [r7, #14]
 800e196:	2b03      	cmp	r3, #3
 800e198:	d816      	bhi.n	800e1c8 <USBD_LL_StallEP+0x5c>
 800e19a:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <USBD_LL_StallEP+0x34>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1b1 	.word	0x0800e1b1
 800e1a4:	0800e1b7 	.word	0x0800e1b7
 800e1a8:	0800e1bd 	.word	0x0800e1bd
 800e1ac:	0800e1c3 	.word	0x0800e1c3
    case HAL_OK :
      usb_status = USBD_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b4:	e00b      	b.n	800e1ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ba:	e008      	b.n	800e1ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c0:	e005      	b.n	800e1ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c6:	e002      	b.n	800e1ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e1cc:	bf00      	nop
  }
  return usb_status;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1f2:	78fa      	ldrb	r2, [r7, #3]
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7f4 fecc 	bl	8002f94 <HAL_PCD_EP_ClrStall>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e200:	7bbb      	ldrb	r3, [r7, #14]
 800e202:	2b03      	cmp	r3, #3
 800e204:	d816      	bhi.n	800e234 <USBD_LL_ClearStallEP+0x5c>
 800e206:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <USBD_LL_ClearStallEP+0x34>)
 800e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20c:	0800e21d 	.word	0x0800e21d
 800e210:	0800e223 	.word	0x0800e223
 800e214:	0800e229 	.word	0x0800e229
 800e218:	0800e22f 	.word	0x0800e22f
    case HAL_OK :
      usb_status = USBD_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	73fb      	strb	r3, [r7, #15]
    break;
 800e220:	e00b      	b.n	800e23a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e222:	2303      	movs	r3, #3
 800e224:	73fb      	strb	r3, [r7, #15]
    break;
 800e226:	e008      	b.n	800e23a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e228:	2301      	movs	r3, #1
 800e22a:	73fb      	strb	r3, [r7, #15]
    break;
 800e22c:	e005      	b.n	800e23a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e22e:	2303      	movs	r3, #3
 800e230:	73fb      	strb	r3, [r7, #15]
    break;
 800e232:	e002      	b.n	800e23a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e234:	2303      	movs	r3, #3
 800e236:	73fb      	strb	r3, [r7, #15]
    break;
 800e238:	bf00      	nop
  }
  return usb_status;
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	460b      	mov	r3, r1
 800e24e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	da0b      	bge.n	800e278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e266:	68f9      	ldr	r1, [r7, #12]
 800e268:	4613      	mov	r3, r2
 800e26a:	00db      	lsls	r3, r3, #3
 800e26c:	1a9b      	subs	r3, r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	440b      	add	r3, r1
 800e272:	333e      	adds	r3, #62	; 0x3e
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	e00b      	b.n	800e290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e278:	78fb      	ldrb	r3, [r7, #3]
 800e27a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e27e:	68f9      	ldr	r1, [r7, #12]
 800e280:	4613      	mov	r3, r2
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	1a9b      	subs	r3, r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	440b      	add	r3, r1
 800e28a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e28e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2b6:	78fa      	ldrb	r2, [r7, #3]
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7f4 fc9e 	bl	8002bfc <HAL_PCD_SetAddress>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d816      	bhi.n	800e2f8 <USBD_LL_SetUSBAddress+0x5c>
 800e2ca:	a201      	add	r2, pc, #4	; (adr r2, 800e2d0 <USBD_LL_SetUSBAddress+0x34>)
 800e2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d0:	0800e2e1 	.word	0x0800e2e1
 800e2d4:	0800e2e7 	.word	0x0800e2e7
 800e2d8:	0800e2ed 	.word	0x0800e2ed
 800e2dc:	0800e2f3 	.word	0x0800e2f3
    case HAL_OK :
      usb_status = USBD_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2e4:	e00b      	b.n	800e2fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ea:	e008      	b.n	800e2fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f0:	e005      	b.n	800e2fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f6:	e002      	b.n	800e2fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fc:	bf00      	nop
  }
  return usb_status;
 800e2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	607a      	str	r2, [r7, #4]
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	460b      	mov	r3, r1
 800e316:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e326:	7af9      	ldrb	r1, [r7, #11]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	f7f4 fd93 	bl	8002e56 <HAL_PCD_EP_Transmit>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e334:	7dbb      	ldrb	r3, [r7, #22]
 800e336:	2b03      	cmp	r3, #3
 800e338:	d816      	bhi.n	800e368 <USBD_LL_Transmit+0x60>
 800e33a:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <USBD_LL_Transmit+0x38>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e351 	.word	0x0800e351
 800e344:	0800e357 	.word	0x0800e357
 800e348:	0800e35d 	.word	0x0800e35d
 800e34c:	0800e363 	.word	0x0800e363
    case HAL_OK :
      usb_status = USBD_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	75fb      	strb	r3, [r7, #23]
    break;
 800e354:	e00b      	b.n	800e36e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e356:	2303      	movs	r3, #3
 800e358:	75fb      	strb	r3, [r7, #23]
    break;
 800e35a:	e008      	b.n	800e36e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e35c:	2301      	movs	r3, #1
 800e35e:	75fb      	strb	r3, [r7, #23]
    break;
 800e360:	e005      	b.n	800e36e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e362:	2303      	movs	r3, #3
 800e364:	75fb      	strb	r3, [r7, #23]
    break;
 800e366:	e002      	b.n	800e36e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e368:	2303      	movs	r3, #3
 800e36a:	75fb      	strb	r3, [r7, #23]
    break;
 800e36c:	bf00      	nop
  }
  return usb_status;
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3718      	adds	r7, #24
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	603b      	str	r3, [r7, #0]
 800e384:	460b      	mov	r3, r1
 800e386:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e396:	7af9      	ldrb	r1, [r7, #11]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	f7f4 fd05 	bl	8002daa <HAL_PCD_EP_Receive>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e3a4:	7dbb      	ldrb	r3, [r7, #22]
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d816      	bhi.n	800e3d8 <USBD_LL_PrepareReceive+0x60>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <USBD_LL_PrepareReceive+0x38>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c7 	.word	0x0800e3c7
 800e3b8:	0800e3cd 	.word	0x0800e3cd
 800e3bc:	0800e3d3 	.word	0x0800e3d3
    case HAL_OK :
      usb_status = USBD_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	75fb      	strb	r3, [r7, #23]
    break;
 800e3c4:	e00b      	b.n	800e3de <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ca:	e008      	b.n	800e3de <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	75fb      	strb	r3, [r7, #23]
    break;
 800e3d0:	e005      	b.n	800e3de <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	75fb      	strb	r3, [r7, #23]
    break;
 800e3d6:	e002      	b.n	800e3de <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	75fb      	strb	r3, [r7, #23]
    break;
 800e3dc:	bf00      	nop
  }
  return usb_status;
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e3fa:	78fa      	ldrb	r2, [r7, #3]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f4 fd11 	bl	8002e26 <HAL_PCD_EP_GetRxCount>
 800e404:	4603      	mov	r3, r0
}
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e418:	4b03      	ldr	r3, [pc, #12]	; (800e428 <USBD_static_malloc+0x18>)
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	20005650 	.word	0x20005650

0800e42c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]

}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e444:	f7fe faf6 	bl	800ca34 <SystemClock_Config>
}
 800e448:	bf00      	nop
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	6039      	str	r1, [r7, #0]
 800e456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2212      	movs	r2, #18
 800e45c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	20000158 	.word	0x20000158

0800e470 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2204      	movs	r2, #4
 800e480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e482:	4b03      	ldr	r3, [pc, #12]	; (800e490 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e484:	4618      	mov	r0, r3
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	2000016c 	.word	0x2000016c

0800e494 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4a0:	79fb      	ldrb	r3, [r7, #7]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d105      	bne.n	800e4b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	4907      	ldr	r1, [pc, #28]	; (800e4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e4aa:	4808      	ldr	r0, [pc, #32]	; (800e4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e4ac:	f7f9 fbe5 	bl	8007c7a <USBD_GetString>
 800e4b0:	e004      	b.n	800e4bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	4904      	ldr	r1, [pc, #16]	; (800e4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e4b6:	4805      	ldr	r0, [pc, #20]	; (800e4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e4b8:	f7f9 fbdf 	bl	8007c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20005870 	.word	0x20005870
 800e4cc:	0800f598 	.word	0x0800f598

0800e4d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	6039      	str	r1, [r7, #0]
 800e4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	4904      	ldr	r1, [pc, #16]	; (800e4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e4e0:	4804      	ldr	r0, [pc, #16]	; (800e4f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e4e2:	f7f9 fbca 	bl	8007c7a <USBD_GetString>
  return USBD_StrDesc;
 800e4e6:	4b02      	ldr	r3, [pc, #8]	; (800e4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	20005870 	.word	0x20005870
 800e4f4:	0800f5a8 	.word	0x0800f5a8

0800e4f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	6039      	str	r1, [r7, #0]
 800e502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	221a      	movs	r2, #26
 800e508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e50a:	f000 f843 	bl	800e594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e50e:	4b02      	ldr	r3, [pc, #8]	; (800e518 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e510:	4618      	mov	r0, r3
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	20000170 	.word	0x20000170

0800e51c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	6039      	str	r1, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e528:	79fb      	ldrb	r3, [r7, #7]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d105      	bne.n	800e53a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	4907      	ldr	r1, [pc, #28]	; (800e550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e532:	4808      	ldr	r0, [pc, #32]	; (800e554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e534:	f7f9 fba1 	bl	8007c7a <USBD_GetString>
 800e538:	e004      	b.n	800e544 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	4904      	ldr	r1, [pc, #16]	; (800e550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e53e:	4805      	ldr	r0, [pc, #20]	; (800e554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e540:	f7f9 fb9b 	bl	8007c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e544:	4b02      	ldr	r3, [pc, #8]	; (800e550 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e546:	4618      	mov	r0, r3
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	20005870 	.word	0x20005870
 800e554:	0800f5ac 	.word	0x0800f5ac

0800e558 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	6039      	str	r1, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	4907      	ldr	r1, [pc, #28]	; (800e58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e56e:	4808      	ldr	r0, [pc, #32]	; (800e590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e570:	f7f9 fb83 	bl	8007c7a <USBD_GetString>
 800e574:	e004      	b.n	800e580 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	4904      	ldr	r1, [pc, #16]	; (800e58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e57a:	4805      	ldr	r0, [pc, #20]	; (800e590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e57c:	f7f9 fb7d 	bl	8007c7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e582:	4618      	mov	r0, r3
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	20005870 	.word	0x20005870
 800e590:	0800f5b8 	.word	0x0800f5b8

0800e594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <Get_SerialNum+0x44>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5a0:	4b0e      	ldr	r3, [pc, #56]	; (800e5dc <Get_SerialNum+0x48>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5a6:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <Get_SerialNum+0x4c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d009      	beq.n	800e5ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5ba:	2208      	movs	r2, #8
 800e5bc:	4909      	ldr	r1, [pc, #36]	; (800e5e4 <Get_SerialNum+0x50>)
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 f814 	bl	800e5ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5c4:	2204      	movs	r2, #4
 800e5c6:	4908      	ldr	r1, [pc, #32]	; (800e5e8 <Get_SerialNum+0x54>)
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f000 f80f 	bl	800e5ec <IntToUnicode>
  }
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	1fff7590 	.word	0x1fff7590
 800e5dc:	1fff7594 	.word	0x1fff7594
 800e5e0:	1fff7598 	.word	0x1fff7598
 800e5e4:	20000172 	.word	0x20000172
 800e5e8:	20000182 	.word	0x20000182

0800e5ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5fe:	2300      	movs	r3, #0
 800e600:	75fb      	strb	r3, [r7, #23]
 800e602:	e027      	b.n	800e654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	0f1b      	lsrs	r3, r3, #28
 800e608:	2b09      	cmp	r3, #9
 800e60a:	d80b      	bhi.n	800e624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	0f1b      	lsrs	r3, r3, #28
 800e610:	b2da      	uxtb	r2, r3
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	4619      	mov	r1, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	440b      	add	r3, r1
 800e61c:	3230      	adds	r2, #48	; 0x30
 800e61e:	b2d2      	uxtb	r2, r2
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	e00a      	b.n	800e63a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	0f1b      	lsrs	r3, r3, #28
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	4619      	mov	r1, r3
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	440b      	add	r3, r1
 800e634:	3237      	adds	r2, #55	; 0x37
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	011b      	lsls	r3, r3, #4
 800e63e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	3301      	adds	r3, #1
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	4413      	add	r3, r2
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	3301      	adds	r3, #1
 800e652:	75fb      	strb	r3, [r7, #23]
 800e654:	7dfa      	ldrb	r2, [r7, #23]
 800e656:	79fb      	ldrb	r3, [r7, #7]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d3d3      	bcc.n	800e604 <IntToUnicode+0x18>
  }
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	371c      	adds	r7, #28
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
	...

0800e66c <usbserialInit>:
static StaticStreamBuffer_t usbserialRxBufferStruct, usbserialTxBufferStruct;
static StreamBufferHandle_t usbserialRxHandle, usbserialTxHandle;

extern USBD_HandleTypeDef hUsbDeviceFS;

void usbserialInit( void ) {
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af02      	add	r7, sp, #8
	// Create Stream Buffer's
	usbserialTxHandle = xStreamBufferCreateStatic( USBSERIAL_TXBUFSIZE, 1, usbserialTxBuffer, &usbserialTxBufferStruct );
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <usbserialInit+0x48>)
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <usbserialInit+0x4c>)
 800e678:	2200      	movs	r2, #0
 800e67a:	2101      	movs	r1, #1
 800e67c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e680:	f7fb f98a 	bl	8009998 <xStreamBufferGenericCreateStatic>
 800e684:	4603      	mov	r3, r0
 800e686:	4a0d      	ldr	r2, [pc, #52]	; (800e6bc <usbserialInit+0x50>)
 800e688:	6013      	str	r3, [r2, #0]
	usbserialRxHandle = xStreamBufferCreateStatic( USBSERIAL_RXBUFSIZE, 1, usbserialRxBuffer, &usbserialRxBufferStruct );
 800e68a:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <usbserialInit+0x54>)
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <usbserialInit+0x58>)
 800e690:	2200      	movs	r2, #0
 800e692:	2101      	movs	r1, #1
 800e694:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e698:	f7fb f97e 	bl	8009998 <xStreamBufferGenericCreateStatic>
 800e69c:	4603      	mov	r3, r0
 800e69e:	4a0a      	ldr	r2, [pc, #40]	; (800e6c8 <usbserialInit+0x5c>)
 800e6a0:	6013      	str	r3, [r2, #0]
	// Init USB-CDC subsystem
	MX_USB_DEVICE_Init();
 800e6a2:	f7ff f9d9 	bl	800da58 <MX_USB_DEVICE_Init>
	osDelay( 2000 );
 800e6a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e6aa:	f7f9 fdb6 	bl	800821a <osDelay>
}
 800e6ae:	bf00      	nop
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20006a94 	.word	0x20006a94
 800e6b8:	20006270 	.word	0x20006270
 800e6bc:	20006abc 	.word	0x20006abc
 800e6c0:	20006a70 	.word	0x20006a70
 800e6c4:	20005a70 	.word	0x20005a70
 800e6c8:	20006ab8 	.word	0x20006ab8

0800e6cc <usbserialQueue>:
// and return -1

static volatile int usbRxStopped;
static USBD_HandleTypeDef *usbHandle;

int usbserialQueue( USBD_HandleTypeDef *handle, uint8_t *dataPtr, uint32_t len ) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	613b      	str	r3, [r7, #16]
	int retval;
	xStreamBufferSendFromISR( usbserialRxHandle, dataPtr, len, &xHigherPriorityTaskWoken );
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <usbserialQueue+0x50>)
 800e6de:	6818      	ldr	r0, [r3, #0]
 800e6e0:	f107 0310 	add.w	r3, r7, #16
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	68b9      	ldr	r1, [r7, #8]
 800e6e8:	f7fb fabf 	bl	8009c6a <xStreamBufferSendFromISR>
	if( xStreamBufferSpacesAvailable( usbserialRxHandle ) >= USB_FS_MAX_PACKET_SIZE ) {
 800e6ec:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <usbserialQueue+0x50>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fb f9d2 	bl	8009a9a <xStreamBufferSpacesAvailable>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b3f      	cmp	r3, #63	; 0x3f
 800e6fa:	d902      	bls.n	800e702 <usbserialQueue+0x36>
		retval = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	e007      	b.n	800e712 <usbserialQueue+0x46>
	} else {
		usbRxStopped = 1;
 800e702:	4b07      	ldr	r3, [pc, #28]	; (800e720 <usbserialQueue+0x54>)
 800e704:	2201      	movs	r2, #1
 800e706:	601a      	str	r2, [r3, #0]
		usbHandle = handle;
 800e708:	4a06      	ldr	r2, [pc, #24]	; (800e724 <usbserialQueue+0x58>)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6013      	str	r3, [r2, #0]
		retval = 1;
 800e70e:	2301      	movs	r3, #1
 800e710:	617b      	str	r3, [r7, #20]
	}
	return retval;
 800e712:	697b      	ldr	r3, [r7, #20]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	20006ab8 	.word	0x20006ab8
 800e720:	20006ac0 	.word	0x20006ac0
 800e724:	20006ac4 	.word	0x20006ac4

0800e728 <usbserialGetByte>:

// Extract a byte from the Rx buffer. If the usb rx is stopped, and enough space is available in the buffer
// then resume usb rx process

unsigned char usbserialGetByte() {
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
	uint8_t data;
	xStreamBufferReceive( usbserialRxHandle, &data, 1, portMAX_DELAY );
 800e72e:	4b0f      	ldr	r3, [pc, #60]	; (800e76c <usbserialGetByte+0x44>)
 800e730:	6818      	ldr	r0, [r3, #0]
 800e732:	1df9      	adds	r1, r7, #7
 800e734:	f04f 33ff 	mov.w	r3, #4294967295
 800e738:	2201      	movs	r2, #1
 800e73a:	f7fb fb44 	bl	8009dc6 <xStreamBufferReceive>
	if( usbRxStopped && xStreamBufferSpacesAvailable( usbserialRxHandle ) >= USB_FS_MAX_PACKET_SIZE ) {
 800e73e:	4b0c      	ldr	r3, [pc, #48]	; (800e770 <usbserialGetByte+0x48>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00c      	beq.n	800e760 <usbserialGetByte+0x38>
 800e746:	4b09      	ldr	r3, [pc, #36]	; (800e76c <usbserialGetByte+0x44>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fb f9a5 	bl	8009a9a <xStreamBufferSpacesAvailable>
 800e750:	4603      	mov	r3, r0
 800e752:	2b3f      	cmp	r3, #63	; 0x3f
 800e754:	d904      	bls.n	800e760 <usbserialGetByte+0x38>
		USBD_CDC_ReceivePacket( usbHandle );
 800e756:	4b07      	ldr	r3, [pc, #28]	; (800e774 <usbserialGetByte+0x4c>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7f8 f9da 	bl	8006b14 <USBD_CDC_ReceivePacket>
	}
    return data;
 800e760:	79fb      	ldrb	r3, [r7, #7]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20006ab8 	.word	0x20006ab8
 800e770:	20006ac0 	.word	0x20006ac0
 800e774:	20006ac4 	.word	0x20006ac4

0800e778 <usbserialPutByte>:
// Tx side
// The Tx queue is read by a task (usbTxTask) constantly waiting for data to transmit
// Any other task can insert data in the queue

// Send data to USB port - very slow!!!
void usbserialPutByte( uint8_t data ) {
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	4603      	mov	r3, r0
 800e780:	71fb      	strb	r3, [r7, #7]
	xStreamBufferSend( usbserialTxHandle, &data, 1, portMAX_DELAY );
 800e782:	4b06      	ldr	r3, [pc, #24]	; (800e79c <usbserialPutByte+0x24>)
 800e784:	6818      	ldr	r0, [r3, #0]
 800e786:	1df9      	adds	r1, r7, #7
 800e788:	f04f 33ff 	mov.w	r3, #4294967295
 800e78c:	2201      	movs	r2, #1
 800e78e:	f7fb f9b7 	bl	8009b00 <xStreamBufferSend>
}
 800e792:	bf00      	nop
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	20006abc 	.word	0x20006abc

0800e7a0 <usbserialWriteData>:

// Copy data to usb serial Tx buffer, and block task if no space is available
// Please notice that total amount of data must be less than Tx buffer size (see above)
void usbserialWriteData( uint8_t *data, unsigned int length ) {
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
	xStreamBufferSend( usbserialTxHandle, data, length, portMAX_DELAY );
 800e7aa:	4b06      	ldr	r3, [pc, #24]	; (800e7c4 <usbserialWriteData+0x24>)
 800e7ac:	6818      	ldr	r0, [r3, #0]
 800e7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	f7fb f9a3 	bl	8009b00 <xStreamBufferSend>
}
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20006abc 	.word	0x20006abc

0800e7c8 <usbserialPrint>:

void usbserialPrint( char *msg ) {
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	usbserialWriteData( ( uint8_t * )msg, strlen( msg ) );
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7f1 fd0d 	bl	80001f0 <strlen>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff ffe0 	bl	800e7a0 <usbserialWriteData>
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <usbserialReadChar>:

void usbserialEchoOff() {
	echoOn = 0;
}

char usbserialReadChar() {
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
	char ch = usbserialGetByte();
 800e7ee:	f7ff ff9b 	bl	800e728 <usbserialGetByte>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	71fb      	strb	r3, [r7, #7]
	if( echoOn ) {
 800e7f6:	4b06      	ldr	r3, [pc, #24]	; (800e810 <usbserialReadChar+0x28>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d003      	beq.n	800e806 <usbserialReadChar+0x1e>
		usbserialPutByte( ch );
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ffb9 	bl	800e778 <usbserialPutByte>
	}
	return ch;
 800e806:	79fb      	ldrb	r3, [r7, #7]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20006ac8 	.word	0x20006ac8

0800e814 <usbserialPrintf>:
// Return number of bytes available
int usbserialDataAvailable() {
	return xStreamBufferBytesAvailable( usbserialRxHandle );
}

void usbserialPrintf( const char *fmt, ... ) {
 800e814:	b40f      	push	{r0, r1, r2, r3}
 800e816:	b580      	push	{r7, lr}
 800e818:	b0a2      	sub	sp, #136	; 0x88
 800e81a:	af00      	add	r7, sp, #0
	char buffer[128];
	va_list args;
	va_start( args, fmt );
 800e81c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e820:	607b      	str	r3, [r7, #4]
	vsnprintf( buffer, sizeof( buffer ), fmt, args );
 800e822:	f107 0008 	add.w	r0, r7, #8
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e82c:	2180      	movs	r1, #128	; 0x80
 800e82e:	f000 f9ed 	bl	800ec0c <vsniprintf>
	va_end( args );
	usbserialPrint( buffer );
 800e832:	f107 0308 	add.w	r3, r7, #8
 800e836:	4618      	mov	r0, r3
 800e838:	f7ff ffc6 	bl	800e7c8 <usbserialPrint>
}
 800e83c:	bf00      	nop
 800e83e:	3788      	adds	r7, #136	; 0x88
 800e840:	46bd      	mov	sp, r7
 800e842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e846:	b004      	add	sp, #16
 800e848:	4770      	bx	lr
	...

0800e84c <usbserialTxWakeup>:
}

// Wakeup function for Tx task
// Called by CDC_TransmitCplt_FS in usbd_cdc_if.c

void usbserialTxWakeup() {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	af00      	add	r7, sp, #0
	osThreadFlagsSet( usbTxTaskHandle, USB_TXDONE_FLAG );
 800e850:	4b03      	ldr	r3, [pc, #12]	; (800e860 <usbserialTxWakeup+0x14>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2101      	movs	r1, #1
 800e856:	4618      	mov	r0, r3
 800e858:	f7f9 fc10 	bl	800807c <osThreadFlagsSet>
}
 800e85c:	bf00      	nop
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20002e50 	.word	0x20002e50

0800e864 <StartUsbTxTask>:
// USB Tx task
// Just loop on the Tx queue, waiting for data to send
// Limit data sent to maximum USB packet size (64 bytes for USB full speed)
// If USB Tx is busy, then sleep up to flag assertion (no loop wait)

void StartUsbTxTask( void *argument ) {
 800e864:	b580      	push	{r7, lr}
 800e866:	b094      	sub	sp, #80	; 0x50
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	usbserialInit();
 800e86c:	f7ff fefe 	bl	800e66c <usbserialInit>
	readyFlag = 1;
 800e870:	4b11      	ldr	r3, [pc, #68]	; (800e8b8 <StartUsbTxTask+0x54>)
 800e872:	2201      	movs	r2, #1
 800e874:	601a      	str	r2, [r3, #0]
	while( 1 ) {
		uint8_t data[64];
		int len = xStreamBufferReceive( usbserialTxHandle, data, sizeof( data ), 1 );
 800e876:	4b11      	ldr	r3, [pc, #68]	; (800e8bc <StartUsbTxTask+0x58>)
 800e878:	6818      	ldr	r0, [r3, #0]
 800e87a:	f107 010c 	add.w	r1, r7, #12
 800e87e:	2301      	movs	r3, #1
 800e880:	2240      	movs	r2, #64	; 0x40
 800e882:	f7fb faa0 	bl	8009dc6 <xStreamBufferReceive>
 800e886:	4603      	mov	r3, r0
 800e888:	64fb      	str	r3, [r7, #76]	; 0x4c
		if( len > 0 ) {
 800e88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	ddf2      	ble.n	800e876 <StartUsbTxTask+0x12>
			// Schedule USB packet transmission, but wait for Tx end
			// to not modify buffer meanwhile
			while( CDC_Transmit_FS( data, len ) != USBD_OK ) {
 800e890:	e005      	b.n	800e89e <StartUsbTxTask+0x3a>
				osThreadFlagsWait(
 800e892:	f04f 32ff 	mov.w	r2, #4294967295
 800e896:	2100      	movs	r1, #0
 800e898:	2001      	movs	r0, #1
 800e89a:	f7f9 fc3d 	bl	8008118 <osThreadFlagsWait>
			while( CDC_Transmit_FS( data, len ) != USBD_OK ) {
 800e89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	f107 030c 	add.w	r3, r7, #12
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff f9b1 	bl	800dc10 <CDC_Transmit_FS>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1ee      	bne.n	800e892 <StartUsbTxTask+0x2e>
	while( 1 ) {
 800e8b4:	e7df      	b.n	800e876 <StartUsbTxTask+0x12>
 800e8b6:	bf00      	nop
 800e8b8:	20006acc 	.word	0x20006acc
 800e8bc:	20006abc 	.word	0x20006abc

0800e8c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800e8c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e8f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e8c4:	f7ff f892 	bl	800d9ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e8c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e8ca:	e003      	b.n	800e8d4 <LoopCopyDataInit>

0800e8cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e8cc:	4b0b      	ldr	r3, [pc, #44]	; (800e8fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e8ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e8d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e8d2:	3104      	adds	r1, #4

0800e8d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e8d4:	480a      	ldr	r0, [pc, #40]	; (800e900 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	; (800e904 <LoopForever+0xe>)
	adds	r2, r0, r1
 800e8d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e8da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e8dc:	d3f6      	bcc.n	800e8cc <CopyDataInit>
	ldr	r2, =_sbss
 800e8de:	4a0a      	ldr	r2, [pc, #40]	; (800e908 <LoopForever+0x12>)
	b	LoopFillZerobss
 800e8e0:	e002      	b.n	800e8e8 <LoopFillZerobss>

0800e8e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e8e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e8e4:	f842 3b04 	str.w	r3, [r2], #4

0800e8e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e8e8:	4b08      	ldr	r3, [pc, #32]	; (800e90c <LoopForever+0x16>)
	cmp	r2, r3
 800e8ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e8ec:	d3f9      	bcc.n	800e8e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e8ee:	f000 f817 	bl	800e920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e8f2:	f7fe f831 	bl	800c958 <main>

0800e8f6 <LoopForever>:

LoopForever:
    b LoopForever
 800e8f6:	e7fe      	b.n	800e8f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800e8f8:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800e8fc:	0800f764 	.word	0x0800f764
	ldr	r0, =_sdata
 800e900:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e904:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 800e908:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800e90c:	20006ae0 	.word	0x20006ae0

0800e910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e910:	e7fe      	b.n	800e910 <ADC1_2_IRQHandler>
	...

0800e914 <__errno>:
 800e914:	4b01      	ldr	r3, [pc, #4]	; (800e91c <__errno+0x8>)
 800e916:	6818      	ldr	r0, [r3, #0]
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	2000018c 	.word	0x2000018c

0800e920 <__libc_init_array>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4d0d      	ldr	r5, [pc, #52]	; (800e958 <__libc_init_array+0x38>)
 800e924:	4c0d      	ldr	r4, [pc, #52]	; (800e95c <__libc_init_array+0x3c>)
 800e926:	1b64      	subs	r4, r4, r5
 800e928:	10a4      	asrs	r4, r4, #2
 800e92a:	2600      	movs	r6, #0
 800e92c:	42a6      	cmp	r6, r4
 800e92e:	d109      	bne.n	800e944 <__libc_init_array+0x24>
 800e930:	4d0b      	ldr	r5, [pc, #44]	; (800e960 <__libc_init_array+0x40>)
 800e932:	4c0c      	ldr	r4, [pc, #48]	; (800e964 <__libc_init_array+0x44>)
 800e934:	f000 fd12 	bl	800f35c <_init>
 800e938:	1b64      	subs	r4, r4, r5
 800e93a:	10a4      	asrs	r4, r4, #2
 800e93c:	2600      	movs	r6, #0
 800e93e:	42a6      	cmp	r6, r4
 800e940:	d105      	bne.n	800e94e <__libc_init_array+0x2e>
 800e942:	bd70      	pop	{r4, r5, r6, pc}
 800e944:	f855 3b04 	ldr.w	r3, [r5], #4
 800e948:	4798      	blx	r3
 800e94a:	3601      	adds	r6, #1
 800e94c:	e7ee      	b.n	800e92c <__libc_init_array+0xc>
 800e94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e952:	4798      	blx	r3
 800e954:	3601      	adds	r6, #1
 800e956:	e7f2      	b.n	800e93e <__libc_init_array+0x1e>
 800e958:	0800f75c 	.word	0x0800f75c
 800e95c:	0800f75c 	.word	0x0800f75c
 800e960:	0800f75c 	.word	0x0800f75c
 800e964:	0800f760 	.word	0x0800f760

0800e968 <__retarget_lock_acquire_recursive>:
 800e968:	4770      	bx	lr

0800e96a <__retarget_lock_release_recursive>:
 800e96a:	4770      	bx	lr

0800e96c <memcpy>:
 800e96c:	440a      	add	r2, r1
 800e96e:	4291      	cmp	r1, r2
 800e970:	f100 33ff 	add.w	r3, r0, #4294967295
 800e974:	d100      	bne.n	800e978 <memcpy+0xc>
 800e976:	4770      	bx	lr
 800e978:	b510      	push	{r4, lr}
 800e97a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e97e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e982:	4291      	cmp	r1, r2
 800e984:	d1f9      	bne.n	800e97a <memcpy+0xe>
 800e986:	bd10      	pop	{r4, pc}

0800e988 <memset>:
 800e988:	4402      	add	r2, r0
 800e98a:	4603      	mov	r3, r0
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d100      	bne.n	800e992 <memset+0xa>
 800e990:	4770      	bx	lr
 800e992:	f803 1b01 	strb.w	r1, [r3], #1
 800e996:	e7f9      	b.n	800e98c <memset+0x4>

0800e998 <sbrk_aligned>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	4e0e      	ldr	r6, [pc, #56]	; (800e9d4 <sbrk_aligned+0x3c>)
 800e99c:	460c      	mov	r4, r1
 800e99e:	6831      	ldr	r1, [r6, #0]
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	b911      	cbnz	r1, 800e9aa <sbrk_aligned+0x12>
 800e9a4:	f000 f8f6 	bl	800eb94 <_sbrk_r>
 800e9a8:	6030      	str	r0, [r6, #0]
 800e9aa:	4621      	mov	r1, r4
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f000 f8f1 	bl	800eb94 <_sbrk_r>
 800e9b2:	1c43      	adds	r3, r0, #1
 800e9b4:	d00a      	beq.n	800e9cc <sbrk_aligned+0x34>
 800e9b6:	1cc4      	adds	r4, r0, #3
 800e9b8:	f024 0403 	bic.w	r4, r4, #3
 800e9bc:	42a0      	cmp	r0, r4
 800e9be:	d007      	beq.n	800e9d0 <sbrk_aligned+0x38>
 800e9c0:	1a21      	subs	r1, r4, r0
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f000 f8e6 	bl	800eb94 <_sbrk_r>
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d101      	bne.n	800e9d0 <sbrk_aligned+0x38>
 800e9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	20006ad8 	.word	0x20006ad8

0800e9d8 <_malloc_r>:
 800e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9dc:	1ccd      	adds	r5, r1, #3
 800e9de:	f025 0503 	bic.w	r5, r5, #3
 800e9e2:	3508      	adds	r5, #8
 800e9e4:	2d0c      	cmp	r5, #12
 800e9e6:	bf38      	it	cc
 800e9e8:	250c      	movcc	r5, #12
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	db01      	blt.n	800e9f4 <_malloc_r+0x1c>
 800e9f0:	42a9      	cmp	r1, r5
 800e9f2:	d905      	bls.n	800ea00 <_malloc_r+0x28>
 800e9f4:	230c      	movs	r3, #12
 800e9f6:	603b      	str	r3, [r7, #0]
 800e9f8:	2600      	movs	r6, #0
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	4e2e      	ldr	r6, [pc, #184]	; (800eabc <_malloc_r+0xe4>)
 800ea02:	f000 f911 	bl	800ec28 <__malloc_lock>
 800ea06:	6833      	ldr	r3, [r6, #0]
 800ea08:	461c      	mov	r4, r3
 800ea0a:	bb34      	cbnz	r4, 800ea5a <_malloc_r+0x82>
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4638      	mov	r0, r7
 800ea10:	f7ff ffc2 	bl	800e998 <sbrk_aligned>
 800ea14:	1c43      	adds	r3, r0, #1
 800ea16:	4604      	mov	r4, r0
 800ea18:	d14d      	bne.n	800eab6 <_malloc_r+0xde>
 800ea1a:	6834      	ldr	r4, [r6, #0]
 800ea1c:	4626      	mov	r6, r4
 800ea1e:	2e00      	cmp	r6, #0
 800ea20:	d140      	bne.n	800eaa4 <_malloc_r+0xcc>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	4631      	mov	r1, r6
 800ea26:	4638      	mov	r0, r7
 800ea28:	eb04 0803 	add.w	r8, r4, r3
 800ea2c:	f000 f8b2 	bl	800eb94 <_sbrk_r>
 800ea30:	4580      	cmp	r8, r0
 800ea32:	d13a      	bne.n	800eaaa <_malloc_r+0xd2>
 800ea34:	6821      	ldr	r1, [r4, #0]
 800ea36:	3503      	adds	r5, #3
 800ea38:	1a6d      	subs	r5, r5, r1
 800ea3a:	f025 0503 	bic.w	r5, r5, #3
 800ea3e:	3508      	adds	r5, #8
 800ea40:	2d0c      	cmp	r5, #12
 800ea42:	bf38      	it	cc
 800ea44:	250c      	movcc	r5, #12
 800ea46:	4629      	mov	r1, r5
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff ffa5 	bl	800e998 <sbrk_aligned>
 800ea4e:	3001      	adds	r0, #1
 800ea50:	d02b      	beq.n	800eaaa <_malloc_r+0xd2>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	442b      	add	r3, r5
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	e00e      	b.n	800ea78 <_malloc_r+0xa0>
 800ea5a:	6822      	ldr	r2, [r4, #0]
 800ea5c:	1b52      	subs	r2, r2, r5
 800ea5e:	d41e      	bmi.n	800ea9e <_malloc_r+0xc6>
 800ea60:	2a0b      	cmp	r2, #11
 800ea62:	d916      	bls.n	800ea92 <_malloc_r+0xba>
 800ea64:	1961      	adds	r1, r4, r5
 800ea66:	42a3      	cmp	r3, r4
 800ea68:	6025      	str	r5, [r4, #0]
 800ea6a:	bf18      	it	ne
 800ea6c:	6059      	strne	r1, [r3, #4]
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	bf08      	it	eq
 800ea72:	6031      	streq	r1, [r6, #0]
 800ea74:	5162      	str	r2, [r4, r5]
 800ea76:	604b      	str	r3, [r1, #4]
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f104 060b 	add.w	r6, r4, #11
 800ea7e:	f000 f8d9 	bl	800ec34 <__malloc_unlock>
 800ea82:	f026 0607 	bic.w	r6, r6, #7
 800ea86:	1d23      	adds	r3, r4, #4
 800ea88:	1af2      	subs	r2, r6, r3
 800ea8a:	d0b6      	beq.n	800e9fa <_malloc_r+0x22>
 800ea8c:	1b9b      	subs	r3, r3, r6
 800ea8e:	50a3      	str	r3, [r4, r2]
 800ea90:	e7b3      	b.n	800e9fa <_malloc_r+0x22>
 800ea92:	6862      	ldr	r2, [r4, #4]
 800ea94:	42a3      	cmp	r3, r4
 800ea96:	bf0c      	ite	eq
 800ea98:	6032      	streq	r2, [r6, #0]
 800ea9a:	605a      	strne	r2, [r3, #4]
 800ea9c:	e7ec      	b.n	800ea78 <_malloc_r+0xa0>
 800ea9e:	4623      	mov	r3, r4
 800eaa0:	6864      	ldr	r4, [r4, #4]
 800eaa2:	e7b2      	b.n	800ea0a <_malloc_r+0x32>
 800eaa4:	4634      	mov	r4, r6
 800eaa6:	6876      	ldr	r6, [r6, #4]
 800eaa8:	e7b9      	b.n	800ea1e <_malloc_r+0x46>
 800eaaa:	230c      	movs	r3, #12
 800eaac:	603b      	str	r3, [r7, #0]
 800eaae:	4638      	mov	r0, r7
 800eab0:	f000 f8c0 	bl	800ec34 <__malloc_unlock>
 800eab4:	e7a1      	b.n	800e9fa <_malloc_r+0x22>
 800eab6:	6025      	str	r5, [r4, #0]
 800eab8:	e7de      	b.n	800ea78 <_malloc_r+0xa0>
 800eaba:	bf00      	nop
 800eabc:	20006ad4 	.word	0x20006ad4

0800eac0 <cleanup_glue>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	6809      	ldr	r1, [r1, #0]
 800eac6:	4605      	mov	r5, r0
 800eac8:	b109      	cbz	r1, 800eace <cleanup_glue+0xe>
 800eaca:	f7ff fff9 	bl	800eac0 <cleanup_glue>
 800eace:	4621      	mov	r1, r4
 800ead0:	4628      	mov	r0, r5
 800ead2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ead6:	f000 b8b3 	b.w	800ec40 <_free_r>
	...

0800eadc <_reclaim_reent>:
 800eadc:	4b2c      	ldr	r3, [pc, #176]	; (800eb90 <_reclaim_reent+0xb4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4283      	cmp	r3, r0
 800eae2:	b570      	push	{r4, r5, r6, lr}
 800eae4:	4604      	mov	r4, r0
 800eae6:	d051      	beq.n	800eb8c <_reclaim_reent+0xb0>
 800eae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eaea:	b143      	cbz	r3, 800eafe <_reclaim_reent+0x22>
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d14a      	bne.n	800eb88 <_reclaim_reent+0xac>
 800eaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf4:	6819      	ldr	r1, [r3, #0]
 800eaf6:	b111      	cbz	r1, 800eafe <_reclaim_reent+0x22>
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f000 f8a1 	bl	800ec40 <_free_r>
 800eafe:	6961      	ldr	r1, [r4, #20]
 800eb00:	b111      	cbz	r1, 800eb08 <_reclaim_reent+0x2c>
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 f89c 	bl	800ec40 <_free_r>
 800eb08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb0a:	b111      	cbz	r1, 800eb12 <_reclaim_reent+0x36>
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 f897 	bl	800ec40 <_free_r>
 800eb12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb14:	b111      	cbz	r1, 800eb1c <_reclaim_reent+0x40>
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 f892 	bl	800ec40 <_free_r>
 800eb1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb1e:	b111      	cbz	r1, 800eb26 <_reclaim_reent+0x4a>
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 f88d 	bl	800ec40 <_free_r>
 800eb26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb28:	b111      	cbz	r1, 800eb30 <_reclaim_reent+0x54>
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 f888 	bl	800ec40 <_free_r>
 800eb30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb32:	b111      	cbz	r1, 800eb3a <_reclaim_reent+0x5e>
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 f883 	bl	800ec40 <_free_r>
 800eb3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb3c:	b111      	cbz	r1, 800eb44 <_reclaim_reent+0x68>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f000 f87e 	bl	800ec40 <_free_r>
 800eb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb46:	b111      	cbz	r1, 800eb4e <_reclaim_reent+0x72>
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f000 f879 	bl	800ec40 <_free_r>
 800eb4e:	69a3      	ldr	r3, [r4, #24]
 800eb50:	b1e3      	cbz	r3, 800eb8c <_reclaim_reent+0xb0>
 800eb52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb54:	4620      	mov	r0, r4
 800eb56:	4798      	blx	r3
 800eb58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb5a:	b1b9      	cbz	r1, 800eb8c <_reclaim_reent+0xb0>
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb62:	f7ff bfad 	b.w	800eac0 <cleanup_glue>
 800eb66:	5949      	ldr	r1, [r1, r5]
 800eb68:	b941      	cbnz	r1, 800eb7c <_reclaim_reent+0xa0>
 800eb6a:	3504      	adds	r5, #4
 800eb6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb6e:	2d80      	cmp	r5, #128	; 0x80
 800eb70:	68d9      	ldr	r1, [r3, #12]
 800eb72:	d1f8      	bne.n	800eb66 <_reclaim_reent+0x8a>
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 f863 	bl	800ec40 <_free_r>
 800eb7a:	e7ba      	b.n	800eaf2 <_reclaim_reent+0x16>
 800eb7c:	680e      	ldr	r6, [r1, #0]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 f85e 	bl	800ec40 <_free_r>
 800eb84:	4631      	mov	r1, r6
 800eb86:	e7ef      	b.n	800eb68 <_reclaim_reent+0x8c>
 800eb88:	2500      	movs	r5, #0
 800eb8a:	e7ef      	b.n	800eb6c <_reclaim_reent+0x90>
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000018c 	.word	0x2000018c

0800eb94 <_sbrk_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d06      	ldr	r5, [pc, #24]	; (800ebb0 <_sbrk_r+0x1c>)
 800eb98:	2300      	movs	r3, #0
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	4608      	mov	r0, r1
 800eb9e:	602b      	str	r3, [r5, #0]
 800eba0:	f7fe feee 	bl	800d980 <_sbrk>
 800eba4:	1c43      	adds	r3, r0, #1
 800eba6:	d102      	bne.n	800ebae <_sbrk_r+0x1a>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	b103      	cbz	r3, 800ebae <_sbrk_r+0x1a>
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	bd38      	pop	{r3, r4, r5, pc}
 800ebb0:	20006adc 	.word	0x20006adc

0800ebb4 <_vsniprintf_r>:
 800ebb4:	b530      	push	{r4, r5, lr}
 800ebb6:	4614      	mov	r4, r2
 800ebb8:	2c00      	cmp	r4, #0
 800ebba:	b09b      	sub	sp, #108	; 0x6c
 800ebbc:	4605      	mov	r5, r0
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	da05      	bge.n	800ebce <_vsniprintf_r+0x1a>
 800ebc2:	238b      	movs	r3, #139	; 0x8b
 800ebc4:	6003      	str	r3, [r0, #0]
 800ebc6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebca:	b01b      	add	sp, #108	; 0x6c
 800ebcc:	bd30      	pop	{r4, r5, pc}
 800ebce:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebd2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ebd6:	bf14      	ite	ne
 800ebd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ebdc:	4623      	moveq	r3, r4
 800ebde:	9302      	str	r3, [sp, #8]
 800ebe0:	9305      	str	r3, [sp, #20]
 800ebe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe6:	9100      	str	r1, [sp, #0]
 800ebe8:	9104      	str	r1, [sp, #16]
 800ebea:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ebee:	4669      	mov	r1, sp
 800ebf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ebf2:	f000 f8cd 	bl	800ed90 <_svfiprintf_r>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	bfbc      	itt	lt
 800ebfa:	238b      	movlt	r3, #139	; 0x8b
 800ebfc:	602b      	strlt	r3, [r5, #0]
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	d0e3      	beq.n	800ebca <_vsniprintf_r+0x16>
 800ec02:	9b00      	ldr	r3, [sp, #0]
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	e7df      	b.n	800ebca <_vsniprintf_r+0x16>
	...

0800ec0c <vsniprintf>:
 800ec0c:	b507      	push	{r0, r1, r2, lr}
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4613      	mov	r3, r2
 800ec12:	460a      	mov	r2, r1
 800ec14:	4601      	mov	r1, r0
 800ec16:	4803      	ldr	r0, [pc, #12]	; (800ec24 <vsniprintf+0x18>)
 800ec18:	6800      	ldr	r0, [r0, #0]
 800ec1a:	f7ff ffcb 	bl	800ebb4 <_vsniprintf_r>
 800ec1e:	b003      	add	sp, #12
 800ec20:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec24:	2000018c 	.word	0x2000018c

0800ec28 <__malloc_lock>:
 800ec28:	4801      	ldr	r0, [pc, #4]	; (800ec30 <__malloc_lock+0x8>)
 800ec2a:	f7ff be9d 	b.w	800e968 <__retarget_lock_acquire_recursive>
 800ec2e:	bf00      	nop
 800ec30:	20006ad0 	.word	0x20006ad0

0800ec34 <__malloc_unlock>:
 800ec34:	4801      	ldr	r0, [pc, #4]	; (800ec3c <__malloc_unlock+0x8>)
 800ec36:	f7ff be98 	b.w	800e96a <__retarget_lock_release_recursive>
 800ec3a:	bf00      	nop
 800ec3c:	20006ad0 	.word	0x20006ad0

0800ec40 <_free_r>:
 800ec40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec42:	2900      	cmp	r1, #0
 800ec44:	d044      	beq.n	800ecd0 <_free_r+0x90>
 800ec46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec4a:	9001      	str	r0, [sp, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec52:	bfb8      	it	lt
 800ec54:	18e4      	addlt	r4, r4, r3
 800ec56:	f7ff ffe7 	bl	800ec28 <__malloc_lock>
 800ec5a:	4a1e      	ldr	r2, [pc, #120]	; (800ecd4 <_free_r+0x94>)
 800ec5c:	9801      	ldr	r0, [sp, #4]
 800ec5e:	6813      	ldr	r3, [r2, #0]
 800ec60:	b933      	cbnz	r3, 800ec70 <_free_r+0x30>
 800ec62:	6063      	str	r3, [r4, #4]
 800ec64:	6014      	str	r4, [r2, #0]
 800ec66:	b003      	add	sp, #12
 800ec68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec6c:	f7ff bfe2 	b.w	800ec34 <__malloc_unlock>
 800ec70:	42a3      	cmp	r3, r4
 800ec72:	d908      	bls.n	800ec86 <_free_r+0x46>
 800ec74:	6825      	ldr	r5, [r4, #0]
 800ec76:	1961      	adds	r1, r4, r5
 800ec78:	428b      	cmp	r3, r1
 800ec7a:	bf01      	itttt	eq
 800ec7c:	6819      	ldreq	r1, [r3, #0]
 800ec7e:	685b      	ldreq	r3, [r3, #4]
 800ec80:	1949      	addeq	r1, r1, r5
 800ec82:	6021      	streq	r1, [r4, #0]
 800ec84:	e7ed      	b.n	800ec62 <_free_r+0x22>
 800ec86:	461a      	mov	r2, r3
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	b10b      	cbz	r3, 800ec90 <_free_r+0x50>
 800ec8c:	42a3      	cmp	r3, r4
 800ec8e:	d9fa      	bls.n	800ec86 <_free_r+0x46>
 800ec90:	6811      	ldr	r1, [r2, #0]
 800ec92:	1855      	adds	r5, r2, r1
 800ec94:	42a5      	cmp	r5, r4
 800ec96:	d10b      	bne.n	800ecb0 <_free_r+0x70>
 800ec98:	6824      	ldr	r4, [r4, #0]
 800ec9a:	4421      	add	r1, r4
 800ec9c:	1854      	adds	r4, r2, r1
 800ec9e:	42a3      	cmp	r3, r4
 800eca0:	6011      	str	r1, [r2, #0]
 800eca2:	d1e0      	bne.n	800ec66 <_free_r+0x26>
 800eca4:	681c      	ldr	r4, [r3, #0]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	6053      	str	r3, [r2, #4]
 800ecaa:	4421      	add	r1, r4
 800ecac:	6011      	str	r1, [r2, #0]
 800ecae:	e7da      	b.n	800ec66 <_free_r+0x26>
 800ecb0:	d902      	bls.n	800ecb8 <_free_r+0x78>
 800ecb2:	230c      	movs	r3, #12
 800ecb4:	6003      	str	r3, [r0, #0]
 800ecb6:	e7d6      	b.n	800ec66 <_free_r+0x26>
 800ecb8:	6825      	ldr	r5, [r4, #0]
 800ecba:	1961      	adds	r1, r4, r5
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	bf04      	itt	eq
 800ecc0:	6819      	ldreq	r1, [r3, #0]
 800ecc2:	685b      	ldreq	r3, [r3, #4]
 800ecc4:	6063      	str	r3, [r4, #4]
 800ecc6:	bf04      	itt	eq
 800ecc8:	1949      	addeq	r1, r1, r5
 800ecca:	6021      	streq	r1, [r4, #0]
 800eccc:	6054      	str	r4, [r2, #4]
 800ecce:	e7ca      	b.n	800ec66 <_free_r+0x26>
 800ecd0:	b003      	add	sp, #12
 800ecd2:	bd30      	pop	{r4, r5, pc}
 800ecd4:	20006ad4 	.word	0x20006ad4

0800ecd8 <__ssputs_r>:
 800ecd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecdc:	688e      	ldr	r6, [r1, #8]
 800ecde:	429e      	cmp	r6, r3
 800ece0:	4682      	mov	sl, r0
 800ece2:	460c      	mov	r4, r1
 800ece4:	4690      	mov	r8, r2
 800ece6:	461f      	mov	r7, r3
 800ece8:	d838      	bhi.n	800ed5c <__ssputs_r+0x84>
 800ecea:	898a      	ldrh	r2, [r1, #12]
 800ecec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecf0:	d032      	beq.n	800ed58 <__ssputs_r+0x80>
 800ecf2:	6825      	ldr	r5, [r4, #0]
 800ecf4:	6909      	ldr	r1, [r1, #16]
 800ecf6:	eba5 0901 	sub.w	r9, r5, r1
 800ecfa:	6965      	ldr	r5, [r4, #20]
 800ecfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed04:	3301      	adds	r3, #1
 800ed06:	444b      	add	r3, r9
 800ed08:	106d      	asrs	r5, r5, #1
 800ed0a:	429d      	cmp	r5, r3
 800ed0c:	bf38      	it	cc
 800ed0e:	461d      	movcc	r5, r3
 800ed10:	0553      	lsls	r3, r2, #21
 800ed12:	d531      	bpl.n	800ed78 <__ssputs_r+0xa0>
 800ed14:	4629      	mov	r1, r5
 800ed16:	f7ff fe5f 	bl	800e9d8 <_malloc_r>
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	b950      	cbnz	r0, 800ed34 <__ssputs_r+0x5c>
 800ed1e:	230c      	movs	r3, #12
 800ed20:	f8ca 3000 	str.w	r3, [sl]
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed2a:	81a3      	strh	r3, [r4, #12]
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed34:	6921      	ldr	r1, [r4, #16]
 800ed36:	464a      	mov	r2, r9
 800ed38:	f7ff fe18 	bl	800e96c <memcpy>
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed46:	81a3      	strh	r3, [r4, #12]
 800ed48:	6126      	str	r6, [r4, #16]
 800ed4a:	6165      	str	r5, [r4, #20]
 800ed4c:	444e      	add	r6, r9
 800ed4e:	eba5 0509 	sub.w	r5, r5, r9
 800ed52:	6026      	str	r6, [r4, #0]
 800ed54:	60a5      	str	r5, [r4, #8]
 800ed56:	463e      	mov	r6, r7
 800ed58:	42be      	cmp	r6, r7
 800ed5a:	d900      	bls.n	800ed5e <__ssputs_r+0x86>
 800ed5c:	463e      	mov	r6, r7
 800ed5e:	6820      	ldr	r0, [r4, #0]
 800ed60:	4632      	mov	r2, r6
 800ed62:	4641      	mov	r1, r8
 800ed64:	f000 faa8 	bl	800f2b8 <memmove>
 800ed68:	68a3      	ldr	r3, [r4, #8]
 800ed6a:	1b9b      	subs	r3, r3, r6
 800ed6c:	60a3      	str	r3, [r4, #8]
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	4433      	add	r3, r6
 800ed72:	6023      	str	r3, [r4, #0]
 800ed74:	2000      	movs	r0, #0
 800ed76:	e7db      	b.n	800ed30 <__ssputs_r+0x58>
 800ed78:	462a      	mov	r2, r5
 800ed7a:	f000 fab7 	bl	800f2ec <_realloc_r>
 800ed7e:	4606      	mov	r6, r0
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d1e1      	bne.n	800ed48 <__ssputs_r+0x70>
 800ed84:	6921      	ldr	r1, [r4, #16]
 800ed86:	4650      	mov	r0, sl
 800ed88:	f7ff ff5a 	bl	800ec40 <_free_r>
 800ed8c:	e7c7      	b.n	800ed1e <__ssputs_r+0x46>
	...

0800ed90 <_svfiprintf_r>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	4698      	mov	r8, r3
 800ed96:	898b      	ldrh	r3, [r1, #12]
 800ed98:	061b      	lsls	r3, r3, #24
 800ed9a:	b09d      	sub	sp, #116	; 0x74
 800ed9c:	4607      	mov	r7, r0
 800ed9e:	460d      	mov	r5, r1
 800eda0:	4614      	mov	r4, r2
 800eda2:	d50e      	bpl.n	800edc2 <_svfiprintf_r+0x32>
 800eda4:	690b      	ldr	r3, [r1, #16]
 800eda6:	b963      	cbnz	r3, 800edc2 <_svfiprintf_r+0x32>
 800eda8:	2140      	movs	r1, #64	; 0x40
 800edaa:	f7ff fe15 	bl	800e9d8 <_malloc_r>
 800edae:	6028      	str	r0, [r5, #0]
 800edb0:	6128      	str	r0, [r5, #16]
 800edb2:	b920      	cbnz	r0, 800edbe <_svfiprintf_r+0x2e>
 800edb4:	230c      	movs	r3, #12
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295
 800edbc:	e0d1      	b.n	800ef62 <_svfiprintf_r+0x1d2>
 800edbe:	2340      	movs	r3, #64	; 0x40
 800edc0:	616b      	str	r3, [r5, #20]
 800edc2:	2300      	movs	r3, #0
 800edc4:	9309      	str	r3, [sp, #36]	; 0x24
 800edc6:	2320      	movs	r3, #32
 800edc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800edd0:	2330      	movs	r3, #48	; 0x30
 800edd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef7c <_svfiprintf_r+0x1ec>
 800edd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edda:	f04f 0901 	mov.w	r9, #1
 800edde:	4623      	mov	r3, r4
 800ede0:	469a      	mov	sl, r3
 800ede2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede6:	b10a      	cbz	r2, 800edec <_svfiprintf_r+0x5c>
 800ede8:	2a25      	cmp	r2, #37	; 0x25
 800edea:	d1f9      	bne.n	800ede0 <_svfiprintf_r+0x50>
 800edec:	ebba 0b04 	subs.w	fp, sl, r4
 800edf0:	d00b      	beq.n	800ee0a <_svfiprintf_r+0x7a>
 800edf2:	465b      	mov	r3, fp
 800edf4:	4622      	mov	r2, r4
 800edf6:	4629      	mov	r1, r5
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7ff ff6d 	bl	800ecd8 <__ssputs_r>
 800edfe:	3001      	adds	r0, #1
 800ee00:	f000 80aa 	beq.w	800ef58 <_svfiprintf_r+0x1c8>
 800ee04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee06:	445a      	add	r2, fp
 800ee08:	9209      	str	r2, [sp, #36]	; 0x24
 800ee0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 80a2 	beq.w	800ef58 <_svfiprintf_r+0x1c8>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f04f 32ff 	mov.w	r2, #4294967295
 800ee1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee1e:	f10a 0a01 	add.w	sl, sl, #1
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	9307      	str	r3, [sp, #28]
 800ee26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ee2c:	4654      	mov	r4, sl
 800ee2e:	2205      	movs	r2, #5
 800ee30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee34:	4851      	ldr	r0, [pc, #324]	; (800ef7c <_svfiprintf_r+0x1ec>)
 800ee36:	f7f1 f9e3 	bl	8000200 <memchr>
 800ee3a:	9a04      	ldr	r2, [sp, #16]
 800ee3c:	b9d8      	cbnz	r0, 800ee76 <_svfiprintf_r+0xe6>
 800ee3e:	06d0      	lsls	r0, r2, #27
 800ee40:	bf44      	itt	mi
 800ee42:	2320      	movmi	r3, #32
 800ee44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee48:	0711      	lsls	r1, r2, #28
 800ee4a:	bf44      	itt	mi
 800ee4c:	232b      	movmi	r3, #43	; 0x2b
 800ee4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee52:	f89a 3000 	ldrb.w	r3, [sl]
 800ee56:	2b2a      	cmp	r3, #42	; 0x2a
 800ee58:	d015      	beq.n	800ee86 <_svfiprintf_r+0xf6>
 800ee5a:	9a07      	ldr	r2, [sp, #28]
 800ee5c:	4654      	mov	r4, sl
 800ee5e:	2000      	movs	r0, #0
 800ee60:	f04f 0c0a 	mov.w	ip, #10
 800ee64:	4621      	mov	r1, r4
 800ee66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee6a:	3b30      	subs	r3, #48	; 0x30
 800ee6c:	2b09      	cmp	r3, #9
 800ee6e:	d94e      	bls.n	800ef0e <_svfiprintf_r+0x17e>
 800ee70:	b1b0      	cbz	r0, 800eea0 <_svfiprintf_r+0x110>
 800ee72:	9207      	str	r2, [sp, #28]
 800ee74:	e014      	b.n	800eea0 <_svfiprintf_r+0x110>
 800ee76:	eba0 0308 	sub.w	r3, r0, r8
 800ee7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	46a2      	mov	sl, r4
 800ee84:	e7d2      	b.n	800ee2c <_svfiprintf_r+0x9c>
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	1d19      	adds	r1, r3, #4
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	9103      	str	r1, [sp, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	bfbb      	ittet	lt
 800ee92:	425b      	neglt	r3, r3
 800ee94:	f042 0202 	orrlt.w	r2, r2, #2
 800ee98:	9307      	strge	r3, [sp, #28]
 800ee9a:	9307      	strlt	r3, [sp, #28]
 800ee9c:	bfb8      	it	lt
 800ee9e:	9204      	strlt	r2, [sp, #16]
 800eea0:	7823      	ldrb	r3, [r4, #0]
 800eea2:	2b2e      	cmp	r3, #46	; 0x2e
 800eea4:	d10c      	bne.n	800eec0 <_svfiprintf_r+0x130>
 800eea6:	7863      	ldrb	r3, [r4, #1]
 800eea8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeaa:	d135      	bne.n	800ef18 <_svfiprintf_r+0x188>
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	1d1a      	adds	r2, r3, #4
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	9203      	str	r2, [sp, #12]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	bfb8      	it	lt
 800eeb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eebc:	3402      	adds	r4, #2
 800eebe:	9305      	str	r3, [sp, #20]
 800eec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef8c <_svfiprintf_r+0x1fc>
 800eec4:	7821      	ldrb	r1, [r4, #0]
 800eec6:	2203      	movs	r2, #3
 800eec8:	4650      	mov	r0, sl
 800eeca:	f7f1 f999 	bl	8000200 <memchr>
 800eece:	b140      	cbz	r0, 800eee2 <_svfiprintf_r+0x152>
 800eed0:	2340      	movs	r3, #64	; 0x40
 800eed2:	eba0 000a 	sub.w	r0, r0, sl
 800eed6:	fa03 f000 	lsl.w	r0, r3, r0
 800eeda:	9b04      	ldr	r3, [sp, #16]
 800eedc:	4303      	orrs	r3, r0
 800eede:	3401      	adds	r4, #1
 800eee0:	9304      	str	r3, [sp, #16]
 800eee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee6:	4826      	ldr	r0, [pc, #152]	; (800ef80 <_svfiprintf_r+0x1f0>)
 800eee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeec:	2206      	movs	r2, #6
 800eeee:	f7f1 f987 	bl	8000200 <memchr>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d038      	beq.n	800ef68 <_svfiprintf_r+0x1d8>
 800eef6:	4b23      	ldr	r3, [pc, #140]	; (800ef84 <_svfiprintf_r+0x1f4>)
 800eef8:	bb1b      	cbnz	r3, 800ef42 <_svfiprintf_r+0x1b2>
 800eefa:	9b03      	ldr	r3, [sp, #12]
 800eefc:	3307      	adds	r3, #7
 800eefe:	f023 0307 	bic.w	r3, r3, #7
 800ef02:	3308      	adds	r3, #8
 800ef04:	9303      	str	r3, [sp, #12]
 800ef06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef08:	4433      	add	r3, r6
 800ef0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef0c:	e767      	b.n	800edde <_svfiprintf_r+0x4e>
 800ef0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef12:	460c      	mov	r4, r1
 800ef14:	2001      	movs	r0, #1
 800ef16:	e7a5      	b.n	800ee64 <_svfiprintf_r+0xd4>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	3401      	adds	r4, #1
 800ef1c:	9305      	str	r3, [sp, #20]
 800ef1e:	4619      	mov	r1, r3
 800ef20:	f04f 0c0a 	mov.w	ip, #10
 800ef24:	4620      	mov	r0, r4
 800ef26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef2a:	3a30      	subs	r2, #48	; 0x30
 800ef2c:	2a09      	cmp	r2, #9
 800ef2e:	d903      	bls.n	800ef38 <_svfiprintf_r+0x1a8>
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d0c5      	beq.n	800eec0 <_svfiprintf_r+0x130>
 800ef34:	9105      	str	r1, [sp, #20]
 800ef36:	e7c3      	b.n	800eec0 <_svfiprintf_r+0x130>
 800ef38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e7f0      	b.n	800ef24 <_svfiprintf_r+0x194>
 800ef42:	ab03      	add	r3, sp, #12
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	462a      	mov	r2, r5
 800ef48:	4b0f      	ldr	r3, [pc, #60]	; (800ef88 <_svfiprintf_r+0x1f8>)
 800ef4a:	a904      	add	r1, sp, #16
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	f3af 8000 	nop.w
 800ef52:	1c42      	adds	r2, r0, #1
 800ef54:	4606      	mov	r6, r0
 800ef56:	d1d6      	bne.n	800ef06 <_svfiprintf_r+0x176>
 800ef58:	89ab      	ldrh	r3, [r5, #12]
 800ef5a:	065b      	lsls	r3, r3, #25
 800ef5c:	f53f af2c 	bmi.w	800edb8 <_svfiprintf_r+0x28>
 800ef60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef62:	b01d      	add	sp, #116	; 0x74
 800ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef68:	ab03      	add	r3, sp, #12
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <_svfiprintf_r+0x1f8>)
 800ef70:	a904      	add	r1, sp, #16
 800ef72:	4638      	mov	r0, r7
 800ef74:	f000 f87a 	bl	800f06c <_printf_i>
 800ef78:	e7eb      	b.n	800ef52 <_svfiprintf_r+0x1c2>
 800ef7a:	bf00      	nop
 800ef7c:	0800f728 	.word	0x0800f728
 800ef80:	0800f732 	.word	0x0800f732
 800ef84:	00000000 	.word	0x00000000
 800ef88:	0800ecd9 	.word	0x0800ecd9
 800ef8c:	0800f72e 	.word	0x0800f72e

0800ef90 <_printf_common>:
 800ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	4616      	mov	r6, r2
 800ef96:	4699      	mov	r9, r3
 800ef98:	688a      	ldr	r2, [r1, #8]
 800ef9a:	690b      	ldr	r3, [r1, #16]
 800ef9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bfb8      	it	lt
 800efa4:	4613      	movlt	r3, r2
 800efa6:	6033      	str	r3, [r6, #0]
 800efa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efac:	4607      	mov	r7, r0
 800efae:	460c      	mov	r4, r1
 800efb0:	b10a      	cbz	r2, 800efb6 <_printf_common+0x26>
 800efb2:	3301      	adds	r3, #1
 800efb4:	6033      	str	r3, [r6, #0]
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	0699      	lsls	r1, r3, #26
 800efba:	bf42      	ittt	mi
 800efbc:	6833      	ldrmi	r3, [r6, #0]
 800efbe:	3302      	addmi	r3, #2
 800efc0:	6033      	strmi	r3, [r6, #0]
 800efc2:	6825      	ldr	r5, [r4, #0]
 800efc4:	f015 0506 	ands.w	r5, r5, #6
 800efc8:	d106      	bne.n	800efd8 <_printf_common+0x48>
 800efca:	f104 0a19 	add.w	sl, r4, #25
 800efce:	68e3      	ldr	r3, [r4, #12]
 800efd0:	6832      	ldr	r2, [r6, #0]
 800efd2:	1a9b      	subs	r3, r3, r2
 800efd4:	42ab      	cmp	r3, r5
 800efd6:	dc26      	bgt.n	800f026 <_printf_common+0x96>
 800efd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efdc:	1e13      	subs	r3, r2, #0
 800efde:	6822      	ldr	r2, [r4, #0]
 800efe0:	bf18      	it	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	0692      	lsls	r2, r2, #26
 800efe6:	d42b      	bmi.n	800f040 <_printf_common+0xb0>
 800efe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efec:	4649      	mov	r1, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d01e      	beq.n	800f034 <_printf_common+0xa4>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	68e5      	ldr	r5, [r4, #12]
 800effa:	6832      	ldr	r2, [r6, #0]
 800effc:	f003 0306 	and.w	r3, r3, #6
 800f000:	2b04      	cmp	r3, #4
 800f002:	bf08      	it	eq
 800f004:	1aad      	subeq	r5, r5, r2
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	6922      	ldr	r2, [r4, #16]
 800f00a:	bf0c      	ite	eq
 800f00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f010:	2500      	movne	r5, #0
 800f012:	4293      	cmp	r3, r2
 800f014:	bfc4      	itt	gt
 800f016:	1a9b      	subgt	r3, r3, r2
 800f018:	18ed      	addgt	r5, r5, r3
 800f01a:	2600      	movs	r6, #0
 800f01c:	341a      	adds	r4, #26
 800f01e:	42b5      	cmp	r5, r6
 800f020:	d11a      	bne.n	800f058 <_printf_common+0xc8>
 800f022:	2000      	movs	r0, #0
 800f024:	e008      	b.n	800f038 <_printf_common+0xa8>
 800f026:	2301      	movs	r3, #1
 800f028:	4652      	mov	r2, sl
 800f02a:	4649      	mov	r1, r9
 800f02c:	4638      	mov	r0, r7
 800f02e:	47c0      	blx	r8
 800f030:	3001      	adds	r0, #1
 800f032:	d103      	bne.n	800f03c <_printf_common+0xac>
 800f034:	f04f 30ff 	mov.w	r0, #4294967295
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03c:	3501      	adds	r5, #1
 800f03e:	e7c6      	b.n	800efce <_printf_common+0x3e>
 800f040:	18e1      	adds	r1, r4, r3
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	2030      	movs	r0, #48	; 0x30
 800f046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f04a:	4422      	add	r2, r4
 800f04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f054:	3302      	adds	r3, #2
 800f056:	e7c7      	b.n	800efe8 <_printf_common+0x58>
 800f058:	2301      	movs	r3, #1
 800f05a:	4622      	mov	r2, r4
 800f05c:	4649      	mov	r1, r9
 800f05e:	4638      	mov	r0, r7
 800f060:	47c0      	blx	r8
 800f062:	3001      	adds	r0, #1
 800f064:	d0e6      	beq.n	800f034 <_printf_common+0xa4>
 800f066:	3601      	adds	r6, #1
 800f068:	e7d9      	b.n	800f01e <_printf_common+0x8e>
	...

0800f06c <_printf_i>:
 800f06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f070:	7e0f      	ldrb	r7, [r1, #24]
 800f072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f074:	2f78      	cmp	r7, #120	; 0x78
 800f076:	4691      	mov	r9, r2
 800f078:	4680      	mov	r8, r0
 800f07a:	460c      	mov	r4, r1
 800f07c:	469a      	mov	sl, r3
 800f07e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f082:	d807      	bhi.n	800f094 <_printf_i+0x28>
 800f084:	2f62      	cmp	r7, #98	; 0x62
 800f086:	d80a      	bhi.n	800f09e <_printf_i+0x32>
 800f088:	2f00      	cmp	r7, #0
 800f08a:	f000 80d8 	beq.w	800f23e <_printf_i+0x1d2>
 800f08e:	2f58      	cmp	r7, #88	; 0x58
 800f090:	f000 80a3 	beq.w	800f1da <_printf_i+0x16e>
 800f094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f09c:	e03a      	b.n	800f114 <_printf_i+0xa8>
 800f09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0a2:	2b15      	cmp	r3, #21
 800f0a4:	d8f6      	bhi.n	800f094 <_printf_i+0x28>
 800f0a6:	a101      	add	r1, pc, #4	; (adr r1, 800f0ac <_printf_i+0x40>)
 800f0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0ac:	0800f105 	.word	0x0800f105
 800f0b0:	0800f119 	.word	0x0800f119
 800f0b4:	0800f095 	.word	0x0800f095
 800f0b8:	0800f095 	.word	0x0800f095
 800f0bc:	0800f095 	.word	0x0800f095
 800f0c0:	0800f095 	.word	0x0800f095
 800f0c4:	0800f119 	.word	0x0800f119
 800f0c8:	0800f095 	.word	0x0800f095
 800f0cc:	0800f095 	.word	0x0800f095
 800f0d0:	0800f095 	.word	0x0800f095
 800f0d4:	0800f095 	.word	0x0800f095
 800f0d8:	0800f225 	.word	0x0800f225
 800f0dc:	0800f149 	.word	0x0800f149
 800f0e0:	0800f207 	.word	0x0800f207
 800f0e4:	0800f095 	.word	0x0800f095
 800f0e8:	0800f095 	.word	0x0800f095
 800f0ec:	0800f247 	.word	0x0800f247
 800f0f0:	0800f095 	.word	0x0800f095
 800f0f4:	0800f149 	.word	0x0800f149
 800f0f8:	0800f095 	.word	0x0800f095
 800f0fc:	0800f095 	.word	0x0800f095
 800f100:	0800f20f 	.word	0x0800f20f
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	1d1a      	adds	r2, r3, #4
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	602a      	str	r2, [r5, #0]
 800f10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f114:	2301      	movs	r3, #1
 800f116:	e0a3      	b.n	800f260 <_printf_i+0x1f4>
 800f118:	6820      	ldr	r0, [r4, #0]
 800f11a:	6829      	ldr	r1, [r5, #0]
 800f11c:	0606      	lsls	r6, r0, #24
 800f11e:	f101 0304 	add.w	r3, r1, #4
 800f122:	d50a      	bpl.n	800f13a <_printf_i+0xce>
 800f124:	680e      	ldr	r6, [r1, #0]
 800f126:	602b      	str	r3, [r5, #0]
 800f128:	2e00      	cmp	r6, #0
 800f12a:	da03      	bge.n	800f134 <_printf_i+0xc8>
 800f12c:	232d      	movs	r3, #45	; 0x2d
 800f12e:	4276      	negs	r6, r6
 800f130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f134:	485e      	ldr	r0, [pc, #376]	; (800f2b0 <_printf_i+0x244>)
 800f136:	230a      	movs	r3, #10
 800f138:	e019      	b.n	800f16e <_printf_i+0x102>
 800f13a:	680e      	ldr	r6, [r1, #0]
 800f13c:	602b      	str	r3, [r5, #0]
 800f13e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f142:	bf18      	it	ne
 800f144:	b236      	sxthne	r6, r6
 800f146:	e7ef      	b.n	800f128 <_printf_i+0xbc>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	6820      	ldr	r0, [r4, #0]
 800f14c:	1d19      	adds	r1, r3, #4
 800f14e:	6029      	str	r1, [r5, #0]
 800f150:	0601      	lsls	r1, r0, #24
 800f152:	d501      	bpl.n	800f158 <_printf_i+0xec>
 800f154:	681e      	ldr	r6, [r3, #0]
 800f156:	e002      	b.n	800f15e <_printf_i+0xf2>
 800f158:	0646      	lsls	r6, r0, #25
 800f15a:	d5fb      	bpl.n	800f154 <_printf_i+0xe8>
 800f15c:	881e      	ldrh	r6, [r3, #0]
 800f15e:	4854      	ldr	r0, [pc, #336]	; (800f2b0 <_printf_i+0x244>)
 800f160:	2f6f      	cmp	r7, #111	; 0x6f
 800f162:	bf0c      	ite	eq
 800f164:	2308      	moveq	r3, #8
 800f166:	230a      	movne	r3, #10
 800f168:	2100      	movs	r1, #0
 800f16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f16e:	6865      	ldr	r5, [r4, #4]
 800f170:	60a5      	str	r5, [r4, #8]
 800f172:	2d00      	cmp	r5, #0
 800f174:	bfa2      	ittt	ge
 800f176:	6821      	ldrge	r1, [r4, #0]
 800f178:	f021 0104 	bicge.w	r1, r1, #4
 800f17c:	6021      	strge	r1, [r4, #0]
 800f17e:	b90e      	cbnz	r6, 800f184 <_printf_i+0x118>
 800f180:	2d00      	cmp	r5, #0
 800f182:	d04d      	beq.n	800f220 <_printf_i+0x1b4>
 800f184:	4615      	mov	r5, r2
 800f186:	fbb6 f1f3 	udiv	r1, r6, r3
 800f18a:	fb03 6711 	mls	r7, r3, r1, r6
 800f18e:	5dc7      	ldrb	r7, [r0, r7]
 800f190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f194:	4637      	mov	r7, r6
 800f196:	42bb      	cmp	r3, r7
 800f198:	460e      	mov	r6, r1
 800f19a:	d9f4      	bls.n	800f186 <_printf_i+0x11a>
 800f19c:	2b08      	cmp	r3, #8
 800f19e:	d10b      	bne.n	800f1b8 <_printf_i+0x14c>
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	07de      	lsls	r6, r3, #31
 800f1a4:	d508      	bpl.n	800f1b8 <_printf_i+0x14c>
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	6861      	ldr	r1, [r4, #4]
 800f1aa:	4299      	cmp	r1, r3
 800f1ac:	bfde      	ittt	le
 800f1ae:	2330      	movle	r3, #48	; 0x30
 800f1b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1b8:	1b52      	subs	r2, r2, r5
 800f1ba:	6122      	str	r2, [r4, #16]
 800f1bc:	f8cd a000 	str.w	sl, [sp]
 800f1c0:	464b      	mov	r3, r9
 800f1c2:	aa03      	add	r2, sp, #12
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	f7ff fee2 	bl	800ef90 <_printf_common>
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d14c      	bne.n	800f26a <_printf_i+0x1fe>
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	b004      	add	sp, #16
 800f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1da:	4835      	ldr	r0, [pc, #212]	; (800f2b0 <_printf_i+0x244>)
 800f1dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f1e0:	6829      	ldr	r1, [r5, #0]
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1e8:	6029      	str	r1, [r5, #0]
 800f1ea:	061d      	lsls	r5, r3, #24
 800f1ec:	d514      	bpl.n	800f218 <_printf_i+0x1ac>
 800f1ee:	07df      	lsls	r7, r3, #31
 800f1f0:	bf44      	itt	mi
 800f1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f1f6:	6023      	strmi	r3, [r4, #0]
 800f1f8:	b91e      	cbnz	r6, 800f202 <_printf_i+0x196>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	f023 0320 	bic.w	r3, r3, #32
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	2310      	movs	r3, #16
 800f204:	e7b0      	b.n	800f168 <_printf_i+0xfc>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	f043 0320 	orr.w	r3, r3, #32
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	2378      	movs	r3, #120	; 0x78
 800f210:	4828      	ldr	r0, [pc, #160]	; (800f2b4 <_printf_i+0x248>)
 800f212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f216:	e7e3      	b.n	800f1e0 <_printf_i+0x174>
 800f218:	0659      	lsls	r1, r3, #25
 800f21a:	bf48      	it	mi
 800f21c:	b2b6      	uxthmi	r6, r6
 800f21e:	e7e6      	b.n	800f1ee <_printf_i+0x182>
 800f220:	4615      	mov	r5, r2
 800f222:	e7bb      	b.n	800f19c <_printf_i+0x130>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	6826      	ldr	r6, [r4, #0]
 800f228:	6961      	ldr	r1, [r4, #20]
 800f22a:	1d18      	adds	r0, r3, #4
 800f22c:	6028      	str	r0, [r5, #0]
 800f22e:	0635      	lsls	r5, r6, #24
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	d501      	bpl.n	800f238 <_printf_i+0x1cc>
 800f234:	6019      	str	r1, [r3, #0]
 800f236:	e002      	b.n	800f23e <_printf_i+0x1d2>
 800f238:	0670      	lsls	r0, r6, #25
 800f23a:	d5fb      	bpl.n	800f234 <_printf_i+0x1c8>
 800f23c:	8019      	strh	r1, [r3, #0]
 800f23e:	2300      	movs	r3, #0
 800f240:	6123      	str	r3, [r4, #16]
 800f242:	4615      	mov	r5, r2
 800f244:	e7ba      	b.n	800f1bc <_printf_i+0x150>
 800f246:	682b      	ldr	r3, [r5, #0]
 800f248:	1d1a      	adds	r2, r3, #4
 800f24a:	602a      	str	r2, [r5, #0]
 800f24c:	681d      	ldr	r5, [r3, #0]
 800f24e:	6862      	ldr	r2, [r4, #4]
 800f250:	2100      	movs	r1, #0
 800f252:	4628      	mov	r0, r5
 800f254:	f7f0 ffd4 	bl	8000200 <memchr>
 800f258:	b108      	cbz	r0, 800f25e <_printf_i+0x1f2>
 800f25a:	1b40      	subs	r0, r0, r5
 800f25c:	6060      	str	r0, [r4, #4]
 800f25e:	6863      	ldr	r3, [r4, #4]
 800f260:	6123      	str	r3, [r4, #16]
 800f262:	2300      	movs	r3, #0
 800f264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f268:	e7a8      	b.n	800f1bc <_printf_i+0x150>
 800f26a:	6923      	ldr	r3, [r4, #16]
 800f26c:	462a      	mov	r2, r5
 800f26e:	4649      	mov	r1, r9
 800f270:	4640      	mov	r0, r8
 800f272:	47d0      	blx	sl
 800f274:	3001      	adds	r0, #1
 800f276:	d0ab      	beq.n	800f1d0 <_printf_i+0x164>
 800f278:	6823      	ldr	r3, [r4, #0]
 800f27a:	079b      	lsls	r3, r3, #30
 800f27c:	d413      	bmi.n	800f2a6 <_printf_i+0x23a>
 800f27e:	68e0      	ldr	r0, [r4, #12]
 800f280:	9b03      	ldr	r3, [sp, #12]
 800f282:	4298      	cmp	r0, r3
 800f284:	bfb8      	it	lt
 800f286:	4618      	movlt	r0, r3
 800f288:	e7a4      	b.n	800f1d4 <_printf_i+0x168>
 800f28a:	2301      	movs	r3, #1
 800f28c:	4632      	mov	r2, r6
 800f28e:	4649      	mov	r1, r9
 800f290:	4640      	mov	r0, r8
 800f292:	47d0      	blx	sl
 800f294:	3001      	adds	r0, #1
 800f296:	d09b      	beq.n	800f1d0 <_printf_i+0x164>
 800f298:	3501      	adds	r5, #1
 800f29a:	68e3      	ldr	r3, [r4, #12]
 800f29c:	9903      	ldr	r1, [sp, #12]
 800f29e:	1a5b      	subs	r3, r3, r1
 800f2a0:	42ab      	cmp	r3, r5
 800f2a2:	dcf2      	bgt.n	800f28a <_printf_i+0x21e>
 800f2a4:	e7eb      	b.n	800f27e <_printf_i+0x212>
 800f2a6:	2500      	movs	r5, #0
 800f2a8:	f104 0619 	add.w	r6, r4, #25
 800f2ac:	e7f5      	b.n	800f29a <_printf_i+0x22e>
 800f2ae:	bf00      	nop
 800f2b0:	0800f739 	.word	0x0800f739
 800f2b4:	0800f74a 	.word	0x0800f74a

0800f2b8 <memmove>:
 800f2b8:	4288      	cmp	r0, r1
 800f2ba:	b510      	push	{r4, lr}
 800f2bc:	eb01 0402 	add.w	r4, r1, r2
 800f2c0:	d902      	bls.n	800f2c8 <memmove+0x10>
 800f2c2:	4284      	cmp	r4, r0
 800f2c4:	4623      	mov	r3, r4
 800f2c6:	d807      	bhi.n	800f2d8 <memmove+0x20>
 800f2c8:	1e43      	subs	r3, r0, #1
 800f2ca:	42a1      	cmp	r1, r4
 800f2cc:	d008      	beq.n	800f2e0 <memmove+0x28>
 800f2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2d6:	e7f8      	b.n	800f2ca <memmove+0x12>
 800f2d8:	4402      	add	r2, r0
 800f2da:	4601      	mov	r1, r0
 800f2dc:	428a      	cmp	r2, r1
 800f2de:	d100      	bne.n	800f2e2 <memmove+0x2a>
 800f2e0:	bd10      	pop	{r4, pc}
 800f2e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2ea:	e7f7      	b.n	800f2dc <memmove+0x24>

0800f2ec <_realloc_r>:
 800f2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f0:	4680      	mov	r8, r0
 800f2f2:	4614      	mov	r4, r2
 800f2f4:	460e      	mov	r6, r1
 800f2f6:	b921      	cbnz	r1, 800f302 <_realloc_r+0x16>
 800f2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	f7ff bb6b 	b.w	800e9d8 <_malloc_r>
 800f302:	b92a      	cbnz	r2, 800f310 <_realloc_r+0x24>
 800f304:	f7ff fc9c 	bl	800ec40 <_free_r>
 800f308:	4625      	mov	r5, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	f000 f81b 	bl	800f34a <_malloc_usable_size_r>
 800f314:	4284      	cmp	r4, r0
 800f316:	4607      	mov	r7, r0
 800f318:	d802      	bhi.n	800f320 <_realloc_r+0x34>
 800f31a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f31e:	d812      	bhi.n	800f346 <_realloc_r+0x5a>
 800f320:	4621      	mov	r1, r4
 800f322:	4640      	mov	r0, r8
 800f324:	f7ff fb58 	bl	800e9d8 <_malloc_r>
 800f328:	4605      	mov	r5, r0
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d0ed      	beq.n	800f30a <_realloc_r+0x1e>
 800f32e:	42bc      	cmp	r4, r7
 800f330:	4622      	mov	r2, r4
 800f332:	4631      	mov	r1, r6
 800f334:	bf28      	it	cs
 800f336:	463a      	movcs	r2, r7
 800f338:	f7ff fb18 	bl	800e96c <memcpy>
 800f33c:	4631      	mov	r1, r6
 800f33e:	4640      	mov	r0, r8
 800f340:	f7ff fc7e 	bl	800ec40 <_free_r>
 800f344:	e7e1      	b.n	800f30a <_realloc_r+0x1e>
 800f346:	4635      	mov	r5, r6
 800f348:	e7df      	b.n	800f30a <_realloc_r+0x1e>

0800f34a <_malloc_usable_size_r>:
 800f34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f34e:	1f18      	subs	r0, r3, #4
 800f350:	2b00      	cmp	r3, #0
 800f352:	bfbc      	itt	lt
 800f354:	580b      	ldrlt	r3, [r1, r0]
 800f356:	18c0      	addlt	r0, r0, r3
 800f358:	4770      	bx	lr
	...

0800f35c <_init>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	bf00      	nop
 800f360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f362:	bc08      	pop	{r3}
 800f364:	469e      	mov	lr, r3
 800f366:	4770      	bx	lr

0800f368 <_fini>:
 800f368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36a:	bf00      	nop
 800f36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f36e:	bc08      	pop	{r3}
 800f370:	469e      	mov	lr, r3
 800f372:	4770      	bx	lr
